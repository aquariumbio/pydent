interactions:
- request:
    body: '{"model": "OperationType", "method": "where", "arguments": {}, "options":
      {"offset": -1, "limit": 1, "reverse": true}}'
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['118']
      Content-Type: [application/json]
      Cookie: [XSRF-TOKEN=Z7rOeOl0mCZIsf6WVfIT5KppzC6Bp5fLC%2FTb4WKBtgZsb3Npd5LqCB38ABz5zCom4vMMBCi%2Fb5gLtY6c5X%2BcgQ%3D%3D;
          _aquarium_NURSERY_production_session=dFQwOEdTbEI3ZnREa1VWblNJNXAxMVVQUzEycitIK1lkZWdmQjNackxGTy9YSjZZUTJtZjFERTc1S1M2WlJ6QmVKOWlISHhtU29IL1gvcy80dCt6MHZnNFdoMnM2ZFlNTnIzOHNNU1d5MEcyTTE5S2ZvSG9EV0JTaWUrdVR6STBKWEp5Mk5qM01kMVF2QUw5dExtNjYrOGRUbTkvM2FoWFJNR3JkNVFYNmJkSzd1YXRDa3U3dm12YUNOT1ZuOWF2cjBBZ05adEt1aE9ldkZZT010MkdBb0lWcnA3K3Rrb2NSUGtnSlgxN2U2V0c4amJaNXF5ZjhDMDlXcW54VjBxTDc1TnJERzRpUnorcHhrWHhVL0pUYUprZlVTRjNkVTByeHcyWis0VjdUR252Q0gvcm02RSsvMzhBSTkrVytaMlpQNGNhVTZSdkJQcTZlMktSMDBOdGhTbVJjTklMNGdGRVEvNmpMTVloWllzMVI3a1RrbHE4MEN5S3Z6MWh4bDU0NjdyeEd5M0FlY0VGUXUvL2FXQ2RjUjZNT3djeVkxWlZCMDhPQWh6S1dWYz0tLWtNU0I0dGhOMkZWMUlBWUR4S29JZ3c9PQ%3D%3D--865ef42f75263dd463f5aabd5a92e5029404008d;
          remember_token=SLLRrvtYchvNLhWHJR3FVg; remember_token_NURSERY_production=SLLRrvtYchvNLhWHJR3FVg]
      User-Agent: [python-requests/2.20.0]
    method: POST
    uri: http://52.27.43.242:81/json
  response:
    body: {string: '[{"id":1539,"name":"Make PCR Fragment (copy)","category":"ZAbeTest","deployed":false,"on_the_fly":false,"created_at":"2018-10-29T14:37:27.000-07:00","updated_at":"2018-10-29T14:39:02.000-07:00"}]'}
    headers:
      Cache-Control: ['max-age=0, private, must-revalidate']
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      Date: ['Thu, 01 Nov 2018 04:19:54 GMT']
      ETag: [W/"cac7a4ab9d35e701807538ddac13bc65"]
      Server: [nginx/1.10.3 (Ubuntu)]
      Set-Cookie: [XSRF-TOKEN=GJH9QzbRW6EAdZcKXWDlQw%2BmZDXgpqgWyUOtCH0Qx0gTREBSqDcpj1U4aYDxXtyBRzykH0m%2BUEXJAvh1%2Bu7tzw%3D%3D;
          path=/, _aquarium_NURSERY_production_session=MW9uc25lM29XRDUrNWZUQkU3c2xjdjZNNXdBcjdRdnlvcWVlejcxV0hMRGJ4Zm1JR0hQUFZnTk1zVFpmY3ROK2lHei9ReEtJbXRGN3FaQW1CQ29HdEZhUnJ4OWNQZnF6QVM2MldNbjlxR1NwT053dExrY2hUZm9TdjdhOXEzTUN3djZIdjhOa3JnUHRXaUZYb0R5THlJeEYxRExacU5yMlYwdVJMSkZpcmhJRE5uc2lIQ0oydUZmS2Y0SWwzZldqZkF1OEllajhac01tOWVXNTZCc3g3ZXpwNmR3dVI2MGxISnV1RE1TNFN4MWpMQXA2RHl2ZDdqQmVRemRZRlVLYUVMQ21MalVwZVlqVnB3UUxWb3NSb2NURFJSdVRmenY5KzgzdVFZb0FsbUhMeC9VK3BNMGZEbSszcm5KUlR6M3RaQ24xd0g3bEpqKzRTSW1kazUwWUpZaExTOHRweGQ5WlJuRFBMZi8rWElXSEdzcUZZSnQyYVN3U09PVDFBajVXMkZ5NktGL0o3dDJkZkd0VkFzcEFUQ2F3RlhJTDc4R2dNcXBIM1UrckhWVT0tLU9SRVp3R1lqRGM0eS8vS1RVNWJTTHc9PQ%3D%3D--a55eb8adbfbec54e932b4034a733c09337ba4594;
          path=/; HttpOnly]
      Vary: [Origin]
      X-Content-Type-Options: [nosniff]
      X-Frame-Options: [SAMEORIGIN]
      X-Request-Id: [5be1f769-a160-45cc-8526-5d0e6e718726]
      X-Runtime: ['0.004410']
      X-XSS-Protection: [1; mode=block]
    status: {code: 200, message: OK}
- request:
    body: '{"model": "Code", "method": "where", "arguments": {"parent_id": 1539, "parent_class":
      "OperationType", "name": "protocol"}, "options": {"offset": -1, "limit": 1,
      "reverse": true}}'
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['179']
      Content-Type: [application/json]
      Cookie: [XSRF-TOKEN=Z7rOeOl0mCZIsf6WVfIT5KppzC6Bp5fLC%2FTb4WKBtgZsb3Npd5LqCB38ABz5zCom4vMMBCi%2Fb5gLtY6c5X%2BcgQ%3D%3D;
          _aquarium_NURSERY_production_session=dFQwOEdTbEI3ZnREa1VWblNJNXAxMVVQUzEycitIK1lkZWdmQjNackxGTy9YSjZZUTJtZjFERTc1S1M2WlJ6QmVKOWlISHhtU29IL1gvcy80dCt6MHZnNFdoMnM2ZFlNTnIzOHNNU1d5MEcyTTE5S2ZvSG9EV0JTaWUrdVR6STBKWEp5Mk5qM01kMVF2QUw5dExtNjYrOGRUbTkvM2FoWFJNR3JkNVFYNmJkSzd1YXRDa3U3dm12YUNOT1ZuOWF2cjBBZ05adEt1aE9ldkZZT010MkdBb0lWcnA3K3Rrb2NSUGtnSlgxN2U2V0c4amJaNXF5ZjhDMDlXcW54VjBxTDc1TnJERzRpUnorcHhrWHhVL0pUYUprZlVTRjNkVTByeHcyWis0VjdUR252Q0gvcm02RSsvMzhBSTkrVytaMlpQNGNhVTZSdkJQcTZlMktSMDBOdGhTbVJjTklMNGdGRVEvNmpMTVloWllzMVI3a1RrbHE4MEN5S3Z6MWh4bDU0NjdyeEd5M0FlY0VGUXUvL2FXQ2RjUjZNT3djeVkxWlZCMDhPQWh6S1dWYz0tLWtNU0I0dGhOMkZWMUlBWUR4S29JZ3c9PQ%3D%3D--865ef42f75263dd463f5aabd5a92e5029404008d;
          remember_token=SLLRrvtYchvNLhWHJR3FVg; remember_token_NURSERY_production=SLLRrvtYchvNLhWHJR3FVg]
      User-Agent: [python-requests/2.20.0]
    method: POST
    uri: http://52.27.43.242:81/json
  response:
    body: {string: "[{\"id\":89351,\"name\":\"protocol\",\"content\":\"needs \\\"Cloning
        Libs/Cloning\\\"\\nneeds 'PCR Libs/GradientPcrBatching'\\nneeds 'Standard
        Libs/Debug'\\nneeds 'Standard Libs/Feedback'\\n\\nclass Protocol\\n    \\n
        \ # I/O\\n  FWD = \\\"Forward Primer\\\"\\n  REV = \\\"Reverse Primer\\\"\\n
        \ TEMPLATE = \\\"Template\\\"\\n  FRAGMENT = \\\"Fragment\\\"\\n  \\n  # other\\n
        \ SEC_PER_KB = 30 # sec, extension timer per KB for KAPA\\n  \\n  # get the
        gradient PCR magic\\n  include Cloning\\n  include GradientPcrBatching\\n
        \ include Debug\\n  include Feedback\\n\\n  def main\\n     \\n    # grab
        all necessary items\\n    dilute_stocks_and_retrieve TEMPLATE\\n    kapa_stock_item
        = find(:sample, name: \\\"Kapa HF Master Mix\\\")[0].in(\\\"Enzyme Stock\\\")[0]\\n
        \   take [kapa_stock_item], interactive: true,  method: \\\"boxes\\\"\\n    \\n
        \   #check the volumes of input primers for all operations, and ensure they
        are sufficient\\n    operations.each { |op| op.temporary[:primer_vol] = 2.5
        }\\n    check_volumes [FWD, REV], :primer_vol, :make_aliquots_from_stock,
        check_contam: true\\n    \\n    # build a pcrs hash that groups pcr by T Anneal\\n
        \   pcrs = build_pcrs_hash\\n\\n    # show the result of the binning algorithm\\n
        \   pcrs.each_with_index do |pcr, idx|\\n      show { title \\\"pcr #{idx}\\\"}\\n
        \     log_bin_info pcr\\n    end if debug\\n\\n    # generate a table for
        stripwells\\n    stripwell_tab = build_stripwell_table pcrs\\n    \\n    #
        prepare and label stripwells for PCR\\n    prepare_stripwells stripwell_tab\\n
        \   \\n    # add templates to stripwells for pcr\\n    load_templates pcrs\\n
        \   \\n    # add primers to stripwells\\n    load_primers pcrs\\n\\n    #
        add kapa master mix to stripwells\\n    add_mix stripwell_tab, kapa_stock_item\\n
        \   \\n    # run the thermocycler\\n    start_pcr pcrs\\n    \\n    # store
        \\n    operations.running.store io: \\\"input\\\", interactive: true, method:
        \\\"boxes\\\"\\n    release [kapa_stock_item], interactive: true\\n    \\n
        \   get_protocol_feedback\\n    \\n    return {batches: pcrs}\\n  end\\n  \\n
        \ # dilute to 1ng/uL stocks if necessary\\n  def dilute_stocks_and_retrieve
        input\\n  \\n    # only use inputs that haven't been diluted and that don't
        have diluted stocks already\\n    ops_w_undiluted_template = operations.reject
        { true }\\n    operations.each do |op|\\n        next if op.input(input).object_type.name.include?(\\\"1
        ng/\xB5L\\\") || op.input(input).object_type.name.include?(\\\"50X PCR Template\\\")
        || op.input(input).object_type.name.include?(\\\"Unverified PCR Fragment\\\")\\n
        \       \\n        sample = op.input(input).sample\\n        ot_name = op.input(input).object_type.name.include?(\\\"Unverified\\\")
        ? \\\"1 ng/\xB5L Plasmid Stock\\\" : \\\"1 ng/\xB5L \\\" + sample.sample_type.name
        + \\\" Stock\\\"\\n        new_stock = produce new_sample sample.name, of:
        sample.sample_type.name, as: ot_name\\n        op.temporary[:diluted_stock]
        = new_stock\\n        ops_w_undiluted_template.push op\\n    end\\n    \\n
        \   # retrieve operation inputs (doesn't include the stocks replaced by diluted
        stocks above)\\n    ops_w_undiluted_template.retrieve\\n    \\n    # all stocks
        may be diluted already\\n    if ops_w_undiluted_template.empty?\\n        operations.retrieve\\n
        \       return\\n    end\\n    \\n    # ensure concentrations\\n    check_concentration
        ops_w_undiluted_template, input\\n    \\n    # dilute stocks\\n    show do\\n
        \     title \\\"Make 1 ng/\xB5L Template Stocks\\\"\\n      \\n      check
        \\\"Grab #{ops_w_undiluted_template.length} 1.5 mL tubes, label them with
        #{ops_w_undiluted_template.map { |op| op.temporary[:diluted_stock].id }.join(\\\",
        \\\")}\\\"\\n      check \\\"Add template stocks and water into newly labeled
        1.5 mL tubes following the table below\\\"\\n      \\n      table ops_w_undiluted_template\\n
        \         .start_table\\n          .custom_column(heading: \\\"Newly-labeled
        tube\\\") { |op| op.temporary[:diluted_stock].id }\\n          .input_item(input,
        heading: \\\"Template stock, 1 uL\\\", checkable: true)\\n          .custom_column(heading:
        \\\"Water volume\\\", checkable: true) { |op| op.input(input).item.get(:concentration).to_f
        - 1 }\\n          .end_table\\n      check \\\"Vortex and then spin down for
        a few seconds\\\"\\n    end\\n    \\n    # return input stocks\\n    release
        ops_w_undiluted_template.map { |op| op.input(input).item }, interactive: true,
        method: \\\"boxes\\\"\\n    \\n    # retrieve the rest of the inputs\\n    operations.reject
        { |op| ops_w_undiluted_template.include? op }.retrieve\\n    \\n    # set
        diluted stocks as inputs\\n    ops_w_undiluted_template.each { |op| op.input(input).set
        item: op.temporary[:diluted_stock] }\\n  end\\n  \\n  \\n  # TODO dilute from
        stock if item is aliquot\\n  # Callback for check_volume.\\n  # takes in lists
        of all ops that have input aliquots with insufficient volume, sorted by item,\\n
        \ # and takes in the inputs which were checked for those ops.\\n  # Deletes
        bad items and remakes each from primer stock\\n  def make_aliquots_from_stock
        bad_ops_by_item, inputs\\n    # bad_ops_by_item is accessible by bad_ops_by_item[item]
        = [op1, op2, op3...]\\n    # where each op has a bad volume reading for the
        given item\\n    \\n    # Construct list of all stocks needed for making aliquots.
        Error ops for which no primer stock is available\\n    # for every non-errored
        op that has low item volume,\\n    # replace the old aliquot item with a new
        one. \\n    aliquots_to_make = 0\\n    stocks = []\\n    ops_by_fresh_item
        = Hash.new(0)\\n    stock_table = [[\\\"Primer Stock ID\\\", \\\"Primer Aliquot
        ID\\\"]]\\n    transfer_table = [[\\\"Old Aliquot ID\\\", \\\"New Aliquot
        ID\\\"]]\\n    bad_ops_by_item.each do |item, ops|\\n      stock = item.sample.in(\\\"Primer
        Stock\\\").first ######## items is a string?\\n      if stock.nil?\\n        ops.each
        { |op| op.error :no_primer, \\\"You need to order a primer stock for primer
        sample #{item.sample.id}.\\\" }\\n        bad_ops_by_item.except! item\\n
        \     else\\n        stocks.push stock\\n        aliquots_to_make += 1\\n
        \       item.mark_as_deleted\\n        fresh_item = produce new_sample item.sample.name,
        of: item.sample.sample_type.name, as: item.object_type.name\\n        bad_ops_by_item.except!
        item\\n        ops_by_fresh_item[fresh_item] = ops\\n        ops.each do |op|
        \\n          input = inputs.find { |input| op.input(input).item == item }\\n
        \         op.input(input).set item: fresh_item\\n        end\\n        stock_table.push
        [stock.id, {content: fresh_item.id, check: true}]\\n        if item.get(:contaminated)
        != \\\"Yes\\\"\\n          transfer_table.push [item.id, {content: fresh_item.id,
        check: true}]    \\n        end\\n      end\\n    end\\n    \\n    bad_ops_by_item.merge!
        ops_by_fresh_item\\n    take stocks, interactive: true\\n    \\n    # label
        new aliquot tubes and dilute\\n    show do \\n      title \\\"Grab 1.5 mL
        tubes\\\"\\n      \\n      note \\\"Grab #{aliquots_to_make} 1.5 mL tubes\\\"\\n
        \     note \\\"Label each tube with the following ids: #{bad_ops_by_item.keys.map
        { |item| item.id }.sort.to_sentence}\\\"\\n      note \\\"Using the 100 uL
        pipette, pipette 90uL of water into each tube\\\"\\n    end\\n  \\n    # make
        new aliquots\\n    show do \\n      title \\\"Transfer primer stock into primer
        aliquot\\\"\\n      \\n      note \\\"Pipette 10 uL of the primer stock into
        the primer aliquot according to the following table:\\\"\\n      table stock_table\\n
        \   end\\n    \\n    \\n    if transfer_table.length \\u003e 1\\n      show
        do\\n        title \\\"Transfer Residual Primer\\\"\\n        \\n        note
        \\\"Transfer primer residue from the low volume aliquots into the fresh aliquots
        according to the following table:\\\"\\n        table transfer_table\\n      end\\n
        \   end\\n    \\n    release stocks, interactive: true\\n  end\\n  \\n  #
        build a pcrs hash that groups pcr by T Anneal\\n  def build_pcrs_hash\\n    \\n
        \   pcr_operations = operations.map do |op|\\n      PcrOperation.new({\\n
        \       extension_time: op.output(FRAGMENT).sample.properties[\\\"Length\\\"]
        * SEC_PER_KB / 1000,\\n        anneal_temp: min(op.input(FWD).sample.properties[\\\"T
        Anneal\\\"], op.input(REV).sample.properties[\\\"T Anneal\\\"]),\\n        unique_id:
        op.id\\n      })\\n    end\\n\\n    result_hash = batch(pcr_operations)\\n
        \   pcr_reactions = []\\n    result_hash.each do |thermocycler_group, row_groups|\\n
        \     reaction = {}\\n      extension_time = thermocycler_group.max_extension
        + 60\\n      reaction[:mm], reaction[:ss] = (extension_time.to_i).divmod(60)\\n
        \     reaction[:mm] = \\\"0#{reaction[:mm]}\\\" if reaction[:mm].between?(0,
        9)\\n      reaction[:ss] = \\\"0#{reaction[:ss]}\\\" if reaction[:ss].between?(0,
        9)\\n      \\n      reaction[:ops_by_bin] = {}\\n      sorted_rows = row_groups.to_a.sort
        { |a,b| a.min_anneal \\u003c=\\u003e b.min_anneal }\\n      sorted_rows.each
        do |row_group|\\n          reaction[:ops_by_bin][row_group.min_anneal.round(1)]
        = [].extend(OperationList)\\n          row_group.members.sort { |a,b| a.anneal_temp
        \\u003c=\\u003e b.anneal_temp }.each do |pcr_op|\\n            reaction[:ops_by_bin][row_group.min_anneal.round(1)]
        \\u003c\\u003c (Operation.find(pcr_op.unique_id))\\n          end\\n      end\\n
        \     \\n      # trim bin if we cant fit all rows into one thermocycler\\n
        \     while reaction[:ops_by_bin].keys.size \\u003e 8\\n        extra_ops
        = reaction[:ops_by_bin][reaction[:ops_by_bin].keys.last]\\n        extra_ops.each
        do |op|\\n            op.error :batching_issue, \\\"We weren't able to batch
        this operation into a running thermocycler for this Job, try again.\\\"\\n
        \           show do note \\\"failed batching\\\" end\\n        end\\n        reaction[:ops_by_bin].except(reaction[:ops_by_bin].keys.last)\\n
        \     end\\n      \\n      reaction[:bins] = reaction[:ops_by_bin].keys\\n
        \     reaction[:stripwells] = []\\n      reaction[:ops_by_bin].each do |bin,
        ops|\\n          ops.make\\n          reaction[:stripwells] += ops.output_collections[FRAGMENT]#ops.map
        { |op| op.output(FRAGMENT).collection }.uniq\\n      end\\n      pcr_reactions
        \\u003c\\u003c reaction\\n    end\\n    pcr_reactions\\n  end\\n  \\n  # generate
        a table for stripwells\\n  def build_stripwell_table pcrs\\n    stripwells
        = pcrs.collect { |pcr| pcr[:stripwells] }.flatten\\n    stripwell_tab = [[\\\"Stripwell\\\",
        \\\"Wells to pipette\\\"]] + stripwells.map { |sw| [\\\"#{sw.id} (#{sw.num_samples
        \\u003c= 6 ? 6 : 12} wells)\\\", { content: sw.non_empty_string, check: true
        }] }\\n  end\\n  \\n  # prepare and label stripwells for PCR\\n    def prepare_stripwells
        stripwell_tab\\n    show do\\n      title \\\"Label and prepare stripwells\\\"\\n
        \     \\n      note \\\"Label stripwells, and pipette 19 uL of molecular grade
        water into each based on the following table:\\\"\\n      table stripwell_tab\\n
        \     stripwell_tab\\n    end\\n  end\\n  \\n  # add templates to stripwells
        for pcr\\n  def load_templates pcrs\\n    pcrs.each_with_index do |pcr, idx|\\n
        \     show do\\n        title \\\"Load templates for PCR ##{idx + 1}\\\"\\n
        \       \\n        pcr[:ops_by_bin].each do |bin, ops|\\n          table ops\\n
        \             .start_table\\n              .output_collection(FRAGMENT, heading:
        \\\"Stripwell\\\")\\n              .custom_column(heading: \\\"Well\\\") {
        |op| op.output(FRAGMENT).column + 1 }\\n              .input_item(TEMPLATE,
        heading: \\\"Template, 1 uL\\\", checkable: true)\\n              .end_table\\n
        \       end\\n        warning \\\"Use a fresh pipette tip for each transfer.\\\".upcase\\n
        \     end\\n    end\\n  end\\n  \\n  # add primers to stripwells\\n  def load_primers
        pcrs\\n    pcrs.each_with_index do |pcr, idx|\\n      show do\\n        title
        \\\"Load primers for PCR ##{idx + 1}\\\"\\n        \\n        pcr[:ops_by_bin].each
        do |bin, ops|\\n          table ops.start_table\\n              .output_collection(FRAGMENT,
        heading: \\\"Stripwell\\\")\\n              .custom_column(heading: \\\"Well\\\")
        { |op| op.output(FRAGMENT).column + 1 }\\n              .input_item(FWD, heading:
        \\\"Forward Primer, 2.5 uL\\\", checkable: true)\\n              .input_item(REV,
        heading: \\\"Reverse Primer, 2.5 uL\\\", checkable: true)\\n              .end_table\\n
        \       end\\n        warning \\\"Use a fresh pipette tip for each transfer.\\\".upcase\\n
        \     end\\n    end\\n  end\\n  \\n  # add kapa master mix to stripwells\\n
        \ def add_mix stripwell_tab, kapa_stock_item\\n      show do\\n          title
        \\\"Add Master Mix\\\"\\n          \\n          note \\\"Pipette 25 L of master
        mix (#{kapa_stock_item}) into stripwells based on the following table:\\\"\\n
        \         table stripwell_tab\\n          warning \\\"USE A NEW PIPETTE TIP
        FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\\\"\\n          check \\\"Cap
        each stripwell. Press each one very hard to make sure it is sealed.\\\"\\n
        \     end\\n  end\\n  \\n  # run the thermocycler and update the positions
        of the stripwells\\n  def start_pcr pcrs\\n      pcrs.each_with_index do |pcr,
        idx|\\n        is_gradient = pcr[:bins].length \\u003e 1\\n        # log_bin_info
        pcr # use for debugging bad binning behavior\\n        resp = show do\\n          if
        !is_gradient\\n            title \\\"Start PCR ##{idx + 1} at #{pcr[:bins].first}
        C\\\"\\n            \\n            check \\\"Place the stripwell(s) #{pcr[:stripwells].collect
        { |sw| \\\"#{sw}\\\" }.join(\\\", \\\")} into an available thermal cycler
        and close the lid.\\\"\\n            get \\\"text\\\", var: \\\"name\\\",
        label: \\\"Enter the name of the thermocycler used\\\", default: \\\"TC1\\\"\\n
        \           check \\\"Click 'Home' then click 'Saved Protocol'. Choose 'YY'
        and then 'CLONEPCR'.\\\"\\n            check \\\"Set the anneal temperature
        to \\u003cb\\u003e#{pcr[:bins].first} C\\u003c/b\\u003e. This is the 3rd temperature.\\\"\\n
        \         else\\n            title \\\"Start PCR ##{idx + 1} (gradient) over
        range #{pcr[:bins].first}-#{pcr[:bins].last} C\\\"\\n            check \\\"Click
        'Home' then click 'Saved Protocol'. Choose 'YY' and then 'CLONEPCR'.\\\"\\n
        \           check \\\"Click on annealing temperature -\\u003e options, and
        check the gradient checkbox.\\\"\\n            check \\\"Set the annealing
        temperature range to be #{pcr[:bins].first}-#{pcr[:bins].last} C.\\\"\\n            note
        \\\"Cancel this PCR batch if something doesn't look right, for example if
        the thermocycler does not allow this temperature range.\\\"\\n            select
        [\\\"yes\\\", \\\"no\\\"], var: \\\"batching_bad\\\", label: \\\"Cancel this
        batch?\\\", default: 1\\n            note \\\"The following stripwells are
        ordered front to back.\\\"\\n            \\n            pcr[:stripwells].map.with_index
        do |sw, idx|\\n              temp = pcr[:ops_by_bin].keys[idx].to_f\\n              check
        \\\"Place the stripwell #{sw} into a row of the thermocycler with the temperature
        as close as possible to \\u003cb\\u003e#{temp} C\\u003c/b\\u003e\\\"\\n            end\\n
        \           get \\\"text\\\", var: \\\"name\\\", label: \\\"Enter the name
        of the thermocycler used\\\", default: \\\"TC1\\\"\\n          end\\n          check
        \\\"Set the 4th time (extension time) to be #{pcr[:mm]}:#{pcr[:ss]}.\\\"\\n
        \         check \\\"Press 'Run' and select 50 uL.\\\"\\n        end\\n        \\n
        \       impossible_pcr_handler(pcr) if resp.get_response(:batching_bad) ==
        \\\"yes\\\"\\n        \\n        # set the location of the stripwell\\n        pcr[:stripwells].flatten.each
        do |sw|\\n          sw.move resp[:name]\\n        end\\n      end\\n  end\\n
        \ \\n  def impossible_pcr_handler(pcr)\\n      pcr[:ops_by_bin].each do |bin,
        ops|\\n          ops.each do |op|\\n            op.error :batching_issue,
        \\\"We weren't able to batch this operation into a running thermocycler for
        this Job, try again.\\\"\\n          end\\n      end\\n      pcr[:stripwells].each
        do |sw|\\n          sw.mark_as_deleted\\n      end\\n      \\n      show do\\n
        \       title 'Reaction Canceled'\\n        note \\\"All operations in this
        pcr reaction are canceled, try them again in a seperate job.\\\"\\n        note
        \\\"The other Reactions will go forward as planned.\\\"\\n      end\\n  end\\n\\n
        \ def log_bin_info pcr\\n    show do\\n      title \\\"bin info\\\"\\n      note
        \\\"ops_by_bin\\\"\\n      pcr[:ops_by_bin].each do |bin, ops|\\n        opids
        = ops.map { |op| op.id }\\n        check \\\"#{bin.to_s}  =\\u003e  #{opids.to_s}\\\"\\n
        \     end\\n\\n      note \\\"bins\\\"\\n      pcr[:bins].each do |bin|\\n
        \       check \\\"#{bin.to_s}\\\"\\n      end\\n    end\\n  end\\nend\",\"parent_id\":1539,\"parent_class\":\"OperationType\",\"created_at\":\"2018-10-29T16:05:44.000-07:00\",\"updated_at\":\"2018-10-29T16:05:44.000-07:00\",\"user_id\":193}]"}
    headers:
      Cache-Control: ['max-age=0, private, must-revalidate']
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      Date: ['Thu, 01 Nov 2018 04:19:54 GMT']
      ETag: [W/"85cba697c9173aee81b57e2df80d38b6"]
      Server: [nginx/1.10.3 (Ubuntu)]
      Set-Cookie: [XSRF-TOKEN=WNltZlbltL2tl3%2Fr73EqdvxEQnUQt36iRTgVDgvKZm9TDNB3yAPGk%2FjagWFDTxO0tN6CX7mvhvFFeUBzjDRM6A%3D%3D;
          path=/, _aquarium_NURSERY_production_session=UTR6RHlRQktwdVhwUHhIMFhDZ2tieWtIT2YyVkFWdFVRUHVNMnZWL09scjVsbWpyMXBvalAzejg1Vzc3YXZSOS8vYWRGcWZ5WFM4MlQrZXh3YVR6a3Rkb080eXoyZDBQSEJTcGtVci8rVWowLzFkcGR3dDcyR3lFdzlxQlFnYXBZUkZ2bWZNaGw4WEc3OEZPa1N6bWJjRjFMbmUycHdxMmkzcWd0N3p6eEJiS3hSVjdBZkpmVjVTUTZidmRSN0Z5ZmpIQU9ycjBPYUI3ZVUvU1FYT1hqTjBhUUtiQnJsbjZaWVNYdnBEWUZqKzNBZlo2ZDRWOUswcUp5cGIyZVVwdEMvQSs3dlZpeEkwU2JQbnBGQ2g1NEROaEhpaVFuN1REK3NVdkhPUFlyN0YxbUxFRkNhdlBBRXgvdkgyMk1ucFEreVMxMG85R3JMV0R0Ry93bEpqd1d1UmFrbGxGQzdmU0w5elNXamxrNmJDc2ROZEk0eDVIZldkd1BVVm5jU3ZXUzgzdmcxaTVoL1NNL2FCZmp0UFNLbVJ1VVRXWmZVeE1BejFWVXM5TTNPVT0tLWI2VmZGUDJKWHpTWEEyeWc2cnlDeWc9PQ%3D%3D--c5a253795768a3b75f723ade9b2c1828cf66de40;
          path=/; HttpOnly]
      Vary: [Origin]
      X-Content-Type-Options: [nosniff]
      X-Frame-Options: [SAMEORIGIN]
      X-Request-Id: [60a610ce-d1c7-4ac2-9d36-54188a7a8746]
      X-Runtime: ['0.062356']
      X-XSS-Protection: [1; mode=block]
    status: {code: 200, message: OK}
version: 1

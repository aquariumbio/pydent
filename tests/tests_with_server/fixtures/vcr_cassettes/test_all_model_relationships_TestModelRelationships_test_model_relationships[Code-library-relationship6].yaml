interactions:
- request:
    body: '{"model": "Code", "method": "where", "arguments": {}, "options": {"offset":
      -1, "limit": 1, "reverse": true}}'
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['109']
      Content-Type: [application/json]
      Cookie: [XSRF-TOKEN=xZ6egEhh%2BlChVfXVPVD8YDggenvqtv9YVI1kUABHZSqerspp7tLf1BOFEB5vpSJ3RUUQmElNf2kq8Up%2BqGs3ow%3D%3D;
          _aquarium_NURSERY_production_session=WEdBOGo4U21nWnJkZDByZ2ErSE1FeFpEVkE1OVM4ZFJPTFNNcnd5NlhQOWQyQ2lETk1rVDFnYmNwbFBiWnlnMTFkSzQ1ZFkxUklGcE0rMmNnMmZHVm1PWk9LLzNUVTBCd1liZkxDMVBBeXBmaUEwZHJaTjhvWFNsVFpVQ2Zmd3RyQlNWRlV5NytET3BqNUVraGtldXBFQzh2eEx2emF2cDRxM2lJSFM4OEJIZlpXaUNYblMxREZWc0E5ZnJTMlBEVWhkOFVGNDBWbDVacXEvcC92L0cveklUSmdRN0lYalRGbHJMalc1VnZvWkh4SjJvdzUxU25UdXNzQmFPSERadVFEVmZ3Q1dPaEVFZnlwVVpZR2c1Y2F1VVZTN3lrdWV0TDV6Um9vYUxKWHQ2a01tdlAvMEhhUTdKUW5tM3pHRUFiK0lsWjI5SnFTWDJiYVlGclY0RlppQ21MZVRuOUh0T1hvbnZIbHFZWjZVNzdLVGl0aTFFa2tyVytVeHpZMXM3aWZJMDFycENoblZEblBwTEtGcWRKcFVtMFZzWFJ1TkEyNmVlVkdaWFhPYz0tLTZoVW9XMzJuV0doLys5Y3UxNngxOFE9PQ%3D%3D--1cac2424c270f93e630e78a91a59326644cf5ee8;
          remember_token=SLLRrvtYchvNLhWHJR3FVg; remember_token_NURSERY_production=SLLRrvtYchvNLhWHJR3FVg]
      User-Agent: [python-requests/2.20.0]
    method: POST
    uri: http://52.27.43.242:81/json
  response:
    body: {string: "[{\"id\":89429,\"name\":\"protocol\",\"content\":\"needs \\\"Cloning
        Libs/Cloning\\\"\\nneeds 'PCR Libs/GradientPcrBatching'\\nneeds 'Standard
        Libs/Debug'\\nneeds 'Standard Libs/Feedback'\\n\\nclass Protocol\\n    \\n
        \ # I/O\\n  FWD = \\\"Forward Primer\\\"\\n  REV = \\\"Reverse Primer\\\"\\n
        \ TEMPLATE = \\\"Template\\\"\\n  FRAGMENT = \\\"Fragment\\\"\\n  \\n  # other\\n
        \ SEC_PER_KB = 30 # sec, extension timer per KB for KAPA\\n  \\n  # get the
        gradient PCR magic\\n  include Cloning\\n  include GradientPcrBatching\\n
        \ include Debug\\n  include Feedback\\n\\n  def main\\n     \\n    # grab
        all necessary items\\n    dilute_stocks_and_retrieve TEMPLATE\\n    kapa_stock_item
        = find(:sample, name: \\\"Kapa HF Master Mix\\\")[0].in(\\\"Enzyme Stock\\\")[0]\\n
        \   take [kapa_stock_item], interactive: true,  method: \\\"boxes\\\"\\n    \\n
        \   #check the volumes of input primers for all operations, and ensure they
        are sufficient\\n    operations.each { |op| op.temporary[:primer_vol] = 2.5
        }\\n    check_volumes [FWD, REV], :primer_vol, :make_aliquots_from_stock,
        check_contam: true\\n    \\n    # build a pcrs hash that groups pcr by T Anneal\\n
        \   pcrs = build_pcrs_hash\\n\\n    # show the result of the binning algorithm\\n
        \   pcrs.each_with_index do |pcr, idx|\\n      show { title \\\"pcr #{idx}\\\"}\\n
        \     log_bin_info pcr\\n    end if debug\\n\\n    # generate a table for
        stripwells\\n    stripwell_tab = build_stripwell_table pcrs\\n    \\n    #
        prepare and label stripwells for PCR\\n    prepare_stripwells stripwell_tab\\n
        \   \\n    # add templates to stripwells for pcr\\n    load_templates pcrs\\n
        \   \\n    # add primers to stripwells\\n    load_primers pcrs\\n\\n    #
        add kapa master mix to stripwells\\n    add_mix stripwell_tab, kapa_stock_item\\n
        \   \\n    # run the thermocycler\\n    start_pcr pcrs\\n    \\n    # store
        \\n    operations.running.store io: \\\"input\\\", interactive: true, method:
        \\\"boxes\\\"\\n    release [kapa_stock_item], interactive: true\\n    \\n
        \   get_protocol_feedback\\n    \\n    return {batches: pcrs}\\n  end\\n  \\n
        \ # dilute to 1ng/uL stocks if necessary\\n  def dilute_stocks_and_retrieve
        input\\n  \\n    # only use inputs that haven't been diluted and that don't
        have diluted stocks already\\n    ops_w_undiluted_template = operations.reject
        { true }\\n    operations.each do |op|\\n        next if op.input(input).object_type.name.include?(\\\"1
        ng/\xB5L\\\") || op.input(input).object_type.name.include?(\\\"50X PCR Template\\\")
        || op.input(input).object_type.name.include?(\\\"Unverified PCR Fragment\\\")\\n
        \       \\n        sample = op.input(input).sample\\n        ot_name = op.input(input).object_type.name.include?(\\\"Unverified\\\")
        ? \\\"1 ng/\xB5L Plasmid Stock\\\" : \\\"1 ng/\xB5L \\\" + sample.sample_type.name
        + \\\" Stock\\\"\\n        new_stock = produce new_sample sample.name, of:
        sample.sample_type.name, as: ot_name\\n        op.temporary[:diluted_stock]
        = new_stock\\n        ops_w_undiluted_template.push op\\n    end\\n    \\n
        \   # retrieve operation inputs (doesn't include the stocks replaced by diluted
        stocks above)\\n    ops_w_undiluted_template.retrieve\\n    \\n    # all stocks
        may be diluted already\\n    if ops_w_undiluted_template.empty?\\n        operations.retrieve\\n
        \       return\\n    end\\n    \\n    # ensure concentrations\\n    check_concentration
        ops_w_undiluted_template, input\\n    \\n    # dilute stocks\\n    show do\\n
        \     title \\\"Make 1 ng/\xB5L Template Stocks\\\"\\n      \\n      check
        \\\"Grab #{ops_w_undiluted_template.length} 1.5 mL tubes, label them with
        #{ops_w_undiluted_template.map { |op| op.temporary[:diluted_stock].id }.join(\\\",
        \\\")}\\\"\\n      check \\\"Add template stocks and water into newly labeled
        1.5 mL tubes following the table below\\\"\\n      \\n      table ops_w_undiluted_template\\n
        \         .start_table\\n          .custom_column(heading: \\\"Newly-labeled
        tube\\\") { |op| op.temporary[:diluted_stock].id }\\n          .input_item(input,
        heading: \\\"Template stock, 1 uL\\\", checkable: true)\\n          .custom_column(heading:
        \\\"Water volume\\\", checkable: true) { |op| op.input(input).item.get(:concentration).to_f
        - 1 }\\n          .end_table\\n      check \\\"Vortex and then spin down for
        a few seconds\\\"\\n    end\\n    \\n    # Add association from which item
        the 1ng/ul dilution came from\\n    ops_w_undiluted_template.map { |op| op.temporary[:diluted_stock].associate(:diluted_from,
        op.input(input).item.id) }\\n    \\n    # return input stocks\\n    release
        ops_w_undiluted_template.map { |op| op.input(input).item }, interactive: true,
        method: \\\"boxes\\\"\\n    \\n    # retrieve the rest of the inputs\\n    operations.reject
        { |op| ops_w_undiluted_template.include? op }.retrieve\\n    \\n    # set
        diluted stocks as inputs\\n    ops_w_undiluted_template.each { |op| op.input(input).set
        item: op.temporary[:diluted_stock] }\\n  end\\n  \\n  \\n  # TODO dilute from
        stock if item is aliquot\\n  # Callback for check_volume.\\n  # takes in lists
        of all ops that have input aliquots with insufficient volume, sorted by item,\\n
        \ # and takes in the inputs which were checked for those ops.\\n  # Deletes
        bad items and remakes each from primer stock\\n  def make_aliquots_from_stock
        bad_ops_by_item, inputs\\n    # bad_ops_by_item is accessible by bad_ops_by_item[item]
        = [op1, op2, op3...]\\n    # where each op has a bad volume reading for the
        given item\\n    \\n    # Construct list of all stocks needed for making aliquots.
        Error ops for which no primer stock is available\\n    # for every non-errored
        op that has low item volume,\\n    # replace the old aliquot item with a new
        one. \\n    aliquots_to_make = 0\\n    stocks = []\\n    ops_by_fresh_item
        = Hash.new(0)\\n    stock_table = [[\\\"Primer Stock ID\\\", \\\"Primer Aliquot
        ID\\\"]]\\n    transfer_table = [[\\\"Old Aliquot ID\\\", \\\"New Aliquot
        ID\\\"]]\\n    bad_ops_by_item.each do |item, ops|\\n      stock = item.sample.in(\\\"Primer
        Stock\\\").first ######## items is a string?\\n      if stock.nil?\\n        ops.each
        { |op| op.error :no_primer, \\\"You need to order a primer stock for primer
        sample #{item.sample.id}.\\\" }\\n        bad_ops_by_item.except! item\\n
        \     else\\n        stocks.push stock\\n        aliquots_to_make += 1\\n
        \       item.mark_as_deleted\\n        fresh_item = produce new_sample item.sample.name,
        of: item.sample.sample_type.name, as: item.object_type.name\\n        bad_ops_by_item.except!
        item\\n        ops_by_fresh_item[fresh_item] = ops\\n        ops.each do |op|
        \\n          input = inputs.find { |input| op.input(input).item == item }\\n
        \         op.input(input).set item: fresh_item\\n        end\\n        stock_table.push
        [stock.id, {content: fresh_item.id, check: true}]\\n        if item.get(:contaminated)
        != \\\"Yes\\\"\\n          transfer_table.push [item.id, {content: fresh_item.id,
        check: true}]    \\n        end\\n      end\\n    end\\n    \\n    bad_ops_by_item.merge!
        ops_by_fresh_item\\n    take stocks, interactive: true\\n    \\n    # label
        new aliquot tubes and dilute\\n    show do \\n      title \\\"Grab 1.5 mL
        tubes\\\"\\n      \\n      note \\\"Grab #{aliquots_to_make} 1.5 mL tubes\\\"\\n
        \     note \\\"Label each tube with the following ids: #{bad_ops_by_item.keys.map
        { |item| item.id }.sort.to_sentence}\\\"\\n      note \\\"Using the 100 uL
        pipette, pipette 90uL of water into each tube\\\"\\n    end\\n  \\n    # make
        new aliquots\\n    show do \\n      title \\\"Transfer primer stock into primer
        aliquot\\\"\\n      \\n      note \\\"Pipette 10 uL of the primer stock into
        the primer aliquot according to the following table:\\\"\\n      table stock_table\\n
        \   end\\n    \\n    \\n    if transfer_table.length \\u003e 1\\n      show
        do\\n        title \\\"Transfer Residual Primer\\\"\\n        \\n        note
        \\\"Transfer primer residue from the low volume aliquots into the fresh aliquots
        according to the following table:\\\"\\n        table transfer_table\\n      end\\n
        \   end\\n    \\n    release stocks, interactive: true\\n  end\\n  \\n  #
        build a pcrs hash that groups pcr by T Anneal\\n  def build_pcrs_hash\\n    \\n
        \   pcr_operations = operations.map do |op|\\n      PcrOperation.new({\\n
        \       extension_time: op.output(FRAGMENT).sample.properties[\\\"Length\\\"]
        * SEC_PER_KB / 1000,\\n        anneal_temp: min(op.input(FWD).sample.properties[\\\"T
        Anneal\\\"], op.input(REV).sample.properties[\\\"T Anneal\\\"]),\\n        unique_id:
        op.id\\n      })\\n    end\\n\\n    result_hash = batch(pcr_operations)\\n
        \   pcr_reactions = []\\n    result_hash.each do |thermocycler_group, row_groups|\\n
        \     reaction = {}\\n      extension_time = thermocycler_group.max_extension
        + 60\\n      reaction[:mm], reaction[:ss] = (extension_time.to_i).divmod(60)\\n
        \     reaction[:mm] = \\\"0#{reaction[:mm]}\\\" if reaction[:mm].between?(0,
        9)\\n      reaction[:ss] = \\\"0#{reaction[:ss]}\\\" if reaction[:ss].between?(0,
        9)\\n      \\n      reaction[:ops_by_bin] = {}\\n      sorted_rows = row_groups.to_a.sort
        { |a,b| a.min_anneal \\u003c=\\u003e b.min_anneal }\\n      sorted_rows.each
        do |row_group|\\n          reaction[:ops_by_bin][row_group.min_anneal.round(1)]
        = [].extend(OperationList)\\n          row_group.members.sort { |a,b| a.anneal_temp
        \\u003c=\\u003e b.anneal_temp }.each do |pcr_op|\\n            reaction[:ops_by_bin][row_group.min_anneal.round(1)]
        \\u003c\\u003c (Operation.find(pcr_op.unique_id))\\n          end\\n      end\\n
        \     \\n      # trim bin if we cant fit all rows into one thermocycler\\n
        \     while reaction[:ops_by_bin].keys.size \\u003e 8\\n        extra_ops
        = reaction[:ops_by_bin][reaction[:ops_by_bin].keys.last]\\n        extra_ops.each
        do |op|\\n            op.error :batching_issue, \\\"We weren't able to batch
        this operation into a running thermocycler for this Job, try again.\\\"\\n
        \           show do note \\\"failed batching\\\" end\\n        end\\n        reaction[:ops_by_bin].except(reaction[:ops_by_bin].keys.last)\\n
        \     end\\n      \\n      reaction[:bins] = reaction[:ops_by_bin].keys\\n
        \     reaction[:stripwells] = []\\n      reaction[:ops_by_bin].each do |bin,
        ops|\\n          ops.make\\n          reaction[:stripwells] += ops.output_collections[FRAGMENT]#ops.map
        { |op| op.output(FRAGMENT).collection }.uniq\\n      end\\n      pcr_reactions
        \\u003c\\u003c reaction\\n    end\\n    pcr_reactions\\n  end\\n  \\n  # generate
        a table for stripwells\\n  def build_stripwell_table pcrs\\n    stripwells
        = pcrs.collect { |pcr| pcr[:stripwells] }.flatten\\n    stripwell_tab = [[\\\"Stripwell\\\",
        \\\"Wells to pipette\\\"]] + stripwells.map { |sw| [\\\"#{sw.id} (#{sw.num_samples
        \\u003c= 6 ? 6 : 12} wells)\\\", { content: sw.non_empty_string, check: true
        }] }\\n  end\\n  \\n  # prepare and label stripwells for PCR\\n    def prepare_stripwells
        stripwell_tab\\n    show do\\n      title \\\"Label and prepare stripwells\\\"\\n
        \     \\n      note \\\"Label stripwells, and pipette 19 uL of molecular grade
        water into each based on the following table:\\\"\\n      table stripwell_tab\\n
        \     stripwell_tab\\n    end\\n  end\\n  \\n  # add templates to stripwells
        for pcr\\n  def load_templates pcrs\\n    pcrs.each_with_index do |pcr, idx|\\n
        \     show do\\n        title \\\"Load templates for PCR ##{idx + 1}\\\"\\n
        \       \\n        pcr[:ops_by_bin].each do |bin, ops|\\n          table ops\\n
        \             .start_table\\n              .output_collection(FRAGMENT, heading:
        \\\"Stripwell\\\")\\n              .custom_column(heading: \\\"Well\\\") {
        |op| op.output(FRAGMENT).column + 1 }\\n              .input_item(TEMPLATE,
        heading: \\\"Template, 1 uL\\\", checkable: true)\\n              .end_table\\n
        \       end\\n        warning \\\"Use a fresh pipette tip for each transfer.\\\".upcase\\n
        \     end\\n    end\\n  end\\n  \\n  # add primers to stripwells\\n  def load_primers
        pcrs\\n    pcrs.each_with_index do |pcr, idx|\\n      show do\\n        title
        \\\"Load primers for PCR ##{idx + 1}\\\"\\n        \\n        pcr[:ops_by_bin].each
        do |bin, ops|\\n          table ops.start_table\\n              .output_collection(FRAGMENT,
        heading: \\\"Stripwell\\\")\\n              .custom_column(heading: \\\"Well\\\")
        { |op| op.output(FRAGMENT).column + 1 }\\n              .input_item(FWD, heading:
        \\\"Forward Primer, 2.5 uL\\\", checkable: true)\\n              .input_item(REV,
        heading: \\\"Reverse Primer, 2.5 uL\\\", checkable: true)\\n              .end_table\\n
        \       end\\n        warning \\\"Use a fresh pipette tip for each transfer.\\\".upcase\\n
        \     end\\n    end\\n  end\\n  \\n  # add kapa master mix to stripwells\\n
        \ def add_mix stripwell_tab, kapa_stock_item\\n      show do\\n          title
        \\\"Add Master Mix\\\"\\n          \\n          note \\\"Pipette 25 L of master
        mix (#{kapa_stock_item}) into stripwells based on the following table:\\\"\\n
        \         table stripwell_tab\\n          warning \\\"USE A NEW PIPETTE TIP
        FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\\\"\\n          check \\\"Cap
        each stripwell. Press each one very hard to make sure it is sealed.\\\"\\n
        \     end\\n  end\\n  \\n  # run the thermocycler and update the positions
        of the stripwells\\n  def start_pcr pcrs\\n      pcrs.each_with_index do |pcr,
        idx|\\n        is_gradient = pcr[:bins].length \\u003e 1\\n        # log_bin_info
        pcr # use for debugging bad binning behavior\\n        resp = show do\\n          if
        !is_gradient\\n            title \\\"Start PCR ##{idx + 1} at #{pcr[:bins].first}
        C\\\"\\n            \\n            check \\\"Place the stripwell(s) #{pcr[:stripwells].collect
        { |sw| \\\"#{sw}\\\" }.join(\\\", \\\")} into an available thermal cycler
        and close the lid.\\\"\\n            get \\\"text\\\", var: \\\"name\\\",
        label: \\\"Enter the name of the thermocycler used\\\", default: \\\"TC1\\\"\\n
        \           check \\\"Click 'Home' then click 'Saved Protocol'. Choose 'YY'
        and then 'CLONEPCR'.\\\"\\n            check \\\"Set the anneal temperature
        to \\u003cb\\u003e#{pcr[:bins].first} C\\u003c/b\\u003e. This is the 3rd temperature.\\\"\\n
        \         else\\n            title \\\"Start PCR ##{idx + 1} (gradient) over
        range #{pcr[:bins].first}-#{pcr[:bins].last} C\\\"\\n            check \\\"Click
        'Home' then click 'Saved Protocol'. Choose 'YY' and then 'CLONEPCR'.\\\"\\n
        \           check \\\"Click on annealing temperature -\\u003e options, and
        check the gradient checkbox.\\\"\\n            check \\\"Set the annealing
        temperature range to be #{pcr[:bins].first}-#{pcr[:bins].last} C.\\\"\\n            note
        \\\"Cancel this PCR batch if something doesn't look right, for example if
        the thermocycler does not allow this temperature range.\\\"\\n            select
        [\\\"yes\\\", \\\"no\\\"], var: \\\"batching_bad\\\", label: \\\"Cancel this
        batch?\\\", default: 1\\n            note \\\"The following stripwells are
        ordered front to back.\\\"\\n            \\n            pcr[:stripwells].map.with_index
        do |sw, idx|\\n              temp = pcr[:ops_by_bin].keys[idx].to_f\\n              check
        \\\"Place the stripwell #{sw} into a row of the thermocycler with the temperature
        as close as possible to \\u003cb\\u003e#{temp} C\\u003c/b\\u003e\\\"\\n            end\\n
        \           get \\\"text\\\", var: \\\"name\\\", label: \\\"Enter the name
        of the thermocycler used\\\", default: \\\"TC1\\\"\\n          end\\n          check
        \\\"Set the 4th time (extension time) to be #{pcr[:mm]}:#{pcr[:ss]}.\\\"\\n
        \         check \\\"Press 'Run' and select 50 uL.\\\"\\n        end\\n        \\n
        \       impossible_pcr_handler(pcr) if resp.get_response(:batching_bad) ==
        \\\"yes\\\"\\n        \\n        # set the location of the stripwell\\n        pcr[:stripwells].flatten.each
        do |sw|\\n          sw.move resp[:name]\\n        end\\n      end\\n  end\\n
        \ \\n  def impossible_pcr_handler(pcr)\\n      pcr[:ops_by_bin].each do |bin,
        ops|\\n          ops.each do |op|\\n            op.error :batching_issue,
        \\\"We weren't able to batch this operation into a running thermocycler for
        this Job, try again.\\\"\\n          end\\n      end\\n      pcr[:stripwells].each
        do |sw|\\n          sw.mark_as_deleted\\n      end\\n      \\n      show do\\n
        \       title 'Reaction Canceled'\\n        note \\\"All operations in this
        pcr reaction are canceled, try them again in a seperate job.\\\"\\n        note
        \\\"The other Reactions will go forward as planned.\\\"\\n      end\\n  end\\n\\n
        \ def log_bin_info pcr\\n    show do\\n      title \\\"bin info\\\"\\n      note
        \\\"ops_by_bin\\\"\\n      pcr[:ops_by_bin].each do |bin, ops|\\n        opids
        = ops.map { |op| op.id }\\n        check \\\"#{bin.to_s}  =\\u003e  #{opids.to_s}\\\"\\n
        \     end\\n\\n      note \\\"bins\\\"\\n      pcr[:bins].each do |bin|\\n
        \       check \\\"#{bin.to_s}\\\"\\n      end\\n    end\\n  end\\nend\",\"parent_id\":1460,\"parent_class\":\"OperationType\",\"created_at\":\"2018-10-31T13:38:11.000-07:00\",\"updated_at\":\"2018-10-31T13:38:11.000-07:00\",\"user_id\":192}]"}
    headers:
      Cache-Control: ['max-age=0, private, must-revalidate']
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      Date: ['Thu, 01 Nov 2018 04:13:08 GMT']
      ETag: [W/"1c9c3a3782770c01a7dd4af9f5cf70a0"]
      Server: [nginx/1.10.3 (Ubuntu)]
      Set-Cookie: [XSRF-TOKEN=rLcgiY%2Fz3Fy9D6mBjIIoeFRGOwjxv8yBpS%2BqKy6h0TP3h3RgKUD52A%2FfTEred%2FZvKSNR61JETLDbU4QFho2Dug%3D%3D;
          path=/, _aquarium_NURSERY_production_session=RnZiSDBQdHpUNFN5ODlxb3RXY0xxT3V1dXdOZDY3Z08ramFYRG1sUTlOSjhqS1BmMzJ3YktGWCtIVjUyRy9GalNuOXBiZFR2R2Y5SzJFenpVbFFJNndRZkdtRUVCNFY2VDMycFVTVXU4UFlhQW5NcFBsN1NKaThnZGtRbVdiQStnR001bXVNY3U0a1NYNlYzUUc3eGY2YUxtbzN6eEZEcHlrcjB3VkkxcHNaZ2dqZFN4TjdWZ1M5Q3hNQ0VwUlR6N0grM1Q5WWdzbTlyTzEwZGJLNWxPQytLSDRxN1k5eXlJWjg5VVQrOHJIblh2NDB5UzRwUk1NL3lmS1NneWgrcVNLd3hHc2xSMng5THhaVFk0N2xvTVRKUXcrWkhCMWVtaDFCUXMvRVRHZTA2ZDBEY2RjZnNhOWdkUnFMYXNRaEVwWXhEQ2xEelM0Tkk1UVlxM24rSzBOTnc4M016Q01OTmdoN2ZMdWl6eEovSm9qUDdocU9RNlIzekhFOWJTTVRsQ21ENk9hYlRYUjBuNlZZOFNGYlBtWnpDOEUreVJLM3pQa2IzWlN2TU9oVT0tLW91YnExZWkwNno5dkFOOHM1NUlleHc9PQ%3D%3D--27d5cbebdc5ccd506ef1f1b4efee225be3cb0254;
          path=/; HttpOnly]
      Vary: [Origin]
      X-Content-Type-Options: [nosniff]
      X-Frame-Options: [SAMEORIGIN]
      X-Request-Id: [a38424b3-0f3f-4813-83b1-a47cc7ddf428]
      X-Runtime: ['0.048473']
      X-XSS-Protection: [1; mode=block]
    status: {code: 200, message: OK}
- request:
    body: '{"model": "Code", "method": "where", "arguments": {}, "options": {"offset":
      -1, "limit": 11, "reverse": true}}'
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['110']
      Content-Type: [application/json]
      Cookie: [XSRF-TOKEN=xZ6egEhh%2BlChVfXVPVD8YDggenvqtv9YVI1kUABHZSqerspp7tLf1BOFEB5vpSJ3RUUQmElNf2kq8Up%2BqGs3ow%3D%3D;
          _aquarium_NURSERY_production_session=WEdBOGo4U21nWnJkZDByZ2ErSE1FeFpEVkE1OVM4ZFJPTFNNcnd5NlhQOWQyQ2lETk1rVDFnYmNwbFBiWnlnMTFkSzQ1ZFkxUklGcE0rMmNnMmZHVm1PWk9LLzNUVTBCd1liZkxDMVBBeXBmaUEwZHJaTjhvWFNsVFpVQ2Zmd3RyQlNWRlV5NytET3BqNUVraGtldXBFQzh2eEx2emF2cDRxM2lJSFM4OEJIZlpXaUNYblMxREZWc0E5ZnJTMlBEVWhkOFVGNDBWbDVacXEvcC92L0cveklUSmdRN0lYalRGbHJMalc1VnZvWkh4SjJvdzUxU25UdXNzQmFPSERadVFEVmZ3Q1dPaEVFZnlwVVpZR2c1Y2F1VVZTN3lrdWV0TDV6Um9vYUxKWHQ2a01tdlAvMEhhUTdKUW5tM3pHRUFiK0lsWjI5SnFTWDJiYVlGclY0RlppQ21MZVRuOUh0T1hvbnZIbHFZWjZVNzdLVGl0aTFFa2tyVytVeHpZMXM3aWZJMDFycENoblZEblBwTEtGcWRKcFVtMFZzWFJ1TkEyNmVlVkdaWFhPYz0tLTZoVW9XMzJuV0doLys5Y3UxNngxOFE9PQ%3D%3D--1cac2424c270f93e630e78a91a59326644cf5ee8;
          remember_token=SLLRrvtYchvNLhWHJR3FVg; remember_token_NURSERY_production=SLLRrvtYchvNLhWHJR3FVg]
      User-Agent: [python-requests/2.20.0]
    method: POST
    uri: http://52.27.43.242:81/json
  response:
    body: {string: "[{\"id\":89429,\"name\":\"protocol\",\"content\":\"needs \\\"Cloning
        Libs/Cloning\\\"\\nneeds 'PCR Libs/GradientPcrBatching'\\nneeds 'Standard
        Libs/Debug'\\nneeds 'Standard Libs/Feedback'\\n\\nclass Protocol\\n    \\n
        \ # I/O\\n  FWD = \\\"Forward Primer\\\"\\n  REV = \\\"Reverse Primer\\\"\\n
        \ TEMPLATE = \\\"Template\\\"\\n  FRAGMENT = \\\"Fragment\\\"\\n  \\n  # other\\n
        \ SEC_PER_KB = 30 # sec, extension timer per KB for KAPA\\n  \\n  # get the
        gradient PCR magic\\n  include Cloning\\n  include GradientPcrBatching\\n
        \ include Debug\\n  include Feedback\\n\\n  def main\\n     \\n    # grab
        all necessary items\\n    dilute_stocks_and_retrieve TEMPLATE\\n    kapa_stock_item
        = find(:sample, name: \\\"Kapa HF Master Mix\\\")[0].in(\\\"Enzyme Stock\\\")[0]\\n
        \   take [kapa_stock_item], interactive: true,  method: \\\"boxes\\\"\\n    \\n
        \   #check the volumes of input primers for all operations, and ensure they
        are sufficient\\n    operations.each { |op| op.temporary[:primer_vol] = 2.5
        }\\n    check_volumes [FWD, REV], :primer_vol, :make_aliquots_from_stock,
        check_contam: true\\n    \\n    # build a pcrs hash that groups pcr by T Anneal\\n
        \   pcrs = build_pcrs_hash\\n\\n    # show the result of the binning algorithm\\n
        \   pcrs.each_with_index do |pcr, idx|\\n      show { title \\\"pcr #{idx}\\\"}\\n
        \     log_bin_info pcr\\n    end if debug\\n\\n    # generate a table for
        stripwells\\n    stripwell_tab = build_stripwell_table pcrs\\n    \\n    #
        prepare and label stripwells for PCR\\n    prepare_stripwells stripwell_tab\\n
        \   \\n    # add templates to stripwells for pcr\\n    load_templates pcrs\\n
        \   \\n    # add primers to stripwells\\n    load_primers pcrs\\n\\n    #
        add kapa master mix to stripwells\\n    add_mix stripwell_tab, kapa_stock_item\\n
        \   \\n    # run the thermocycler\\n    start_pcr pcrs\\n    \\n    # store
        \\n    operations.running.store io: \\\"input\\\", interactive: true, method:
        \\\"boxes\\\"\\n    release [kapa_stock_item], interactive: true\\n    \\n
        \   get_protocol_feedback\\n    \\n    return {batches: pcrs}\\n  end\\n  \\n
        \ # dilute to 1ng/uL stocks if necessary\\n  def dilute_stocks_and_retrieve
        input\\n  \\n    # only use inputs that haven't been diluted and that don't
        have diluted stocks already\\n    ops_w_undiluted_template = operations.reject
        { true }\\n    operations.each do |op|\\n        next if op.input(input).object_type.name.include?(\\\"1
        ng/\xB5L\\\") || op.input(input).object_type.name.include?(\\\"50X PCR Template\\\")
        || op.input(input).object_type.name.include?(\\\"Unverified PCR Fragment\\\")\\n
        \       \\n        sample = op.input(input).sample\\n        ot_name = op.input(input).object_type.name.include?(\\\"Unverified\\\")
        ? \\\"1 ng/\xB5L Plasmid Stock\\\" : \\\"1 ng/\xB5L \\\" + sample.sample_type.name
        + \\\" Stock\\\"\\n        new_stock = produce new_sample sample.name, of:
        sample.sample_type.name, as: ot_name\\n        op.temporary[:diluted_stock]
        = new_stock\\n        ops_w_undiluted_template.push op\\n    end\\n    \\n
        \   # retrieve operation inputs (doesn't include the stocks replaced by diluted
        stocks above)\\n    ops_w_undiluted_template.retrieve\\n    \\n    # all stocks
        may be diluted already\\n    if ops_w_undiluted_template.empty?\\n        operations.retrieve\\n
        \       return\\n    end\\n    \\n    # ensure concentrations\\n    check_concentration
        ops_w_undiluted_template, input\\n    \\n    # dilute stocks\\n    show do\\n
        \     title \\\"Make 1 ng/\xB5L Template Stocks\\\"\\n      \\n      check
        \\\"Grab #{ops_w_undiluted_template.length} 1.5 mL tubes, label them with
        #{ops_w_undiluted_template.map { |op| op.temporary[:diluted_stock].id }.join(\\\",
        \\\")}\\\"\\n      check \\\"Add template stocks and water into newly labeled
        1.5 mL tubes following the table below\\\"\\n      \\n      table ops_w_undiluted_template\\n
        \         .start_table\\n          .custom_column(heading: \\\"Newly-labeled
        tube\\\") { |op| op.temporary[:diluted_stock].id }\\n          .input_item(input,
        heading: \\\"Template stock, 1 uL\\\", checkable: true)\\n          .custom_column(heading:
        \\\"Water volume\\\", checkable: true) { |op| op.input(input).item.get(:concentration).to_f
        - 1 }\\n          .end_table\\n      check \\\"Vortex and then spin down for
        a few seconds\\\"\\n    end\\n    \\n    # Add association from which item
        the 1ng/ul dilution came from\\n    ops_w_undiluted_template.map { |op| op.temporary[:diluted_stock].associate(:diluted_from,
        op.input(input).item.id) }\\n    \\n    # return input stocks\\n    release
        ops_w_undiluted_template.map { |op| op.input(input).item }, interactive: true,
        method: \\\"boxes\\\"\\n    \\n    # retrieve the rest of the inputs\\n    operations.reject
        { |op| ops_w_undiluted_template.include? op }.retrieve\\n    \\n    # set
        diluted stocks as inputs\\n    ops_w_undiluted_template.each { |op| op.input(input).set
        item: op.temporary[:diluted_stock] }\\n  end\\n  \\n  \\n  # TODO dilute from
        stock if item is aliquot\\n  # Callback for check_volume.\\n  # takes in lists
        of all ops that have input aliquots with insufficient volume, sorted by item,\\n
        \ # and takes in the inputs which were checked for those ops.\\n  # Deletes
        bad items and remakes each from primer stock\\n  def make_aliquots_from_stock
        bad_ops_by_item, inputs\\n    # bad_ops_by_item is accessible by bad_ops_by_item[item]
        = [op1, op2, op3...]\\n    # where each op has a bad volume reading for the
        given item\\n    \\n    # Construct list of all stocks needed for making aliquots.
        Error ops for which no primer stock is available\\n    # for every non-errored
        op that has low item volume,\\n    # replace the old aliquot item with a new
        one. \\n    aliquots_to_make = 0\\n    stocks = []\\n    ops_by_fresh_item
        = Hash.new(0)\\n    stock_table = [[\\\"Primer Stock ID\\\", \\\"Primer Aliquot
        ID\\\"]]\\n    transfer_table = [[\\\"Old Aliquot ID\\\", \\\"New Aliquot
        ID\\\"]]\\n    bad_ops_by_item.each do |item, ops|\\n      stock = item.sample.in(\\\"Primer
        Stock\\\").first ######## items is a string?\\n      if stock.nil?\\n        ops.each
        { |op| op.error :no_primer, \\\"You need to order a primer stock for primer
        sample #{item.sample.id}.\\\" }\\n        bad_ops_by_item.except! item\\n
        \     else\\n        stocks.push stock\\n        aliquots_to_make += 1\\n
        \       item.mark_as_deleted\\n        fresh_item = produce new_sample item.sample.name,
        of: item.sample.sample_type.name, as: item.object_type.name\\n        bad_ops_by_item.except!
        item\\n        ops_by_fresh_item[fresh_item] = ops\\n        ops.each do |op|
        \\n          input = inputs.find { |input| op.input(input).item == item }\\n
        \         op.input(input).set item: fresh_item\\n        end\\n        stock_table.push
        [stock.id, {content: fresh_item.id, check: true}]\\n        if item.get(:contaminated)
        != \\\"Yes\\\"\\n          transfer_table.push [item.id, {content: fresh_item.id,
        check: true}]    \\n        end\\n      end\\n    end\\n    \\n    bad_ops_by_item.merge!
        ops_by_fresh_item\\n    take stocks, interactive: true\\n    \\n    # label
        new aliquot tubes and dilute\\n    show do \\n      title \\\"Grab 1.5 mL
        tubes\\\"\\n      \\n      note \\\"Grab #{aliquots_to_make} 1.5 mL tubes\\\"\\n
        \     note \\\"Label each tube with the following ids: #{bad_ops_by_item.keys.map
        { |item| item.id }.sort.to_sentence}\\\"\\n      note \\\"Using the 100 uL
        pipette, pipette 90uL of water into each tube\\\"\\n    end\\n  \\n    # make
        new aliquots\\n    show do \\n      title \\\"Transfer primer stock into primer
        aliquot\\\"\\n      \\n      note \\\"Pipette 10 uL of the primer stock into
        the primer aliquot according to the following table:\\\"\\n      table stock_table\\n
        \   end\\n    \\n    \\n    if transfer_table.length \\u003e 1\\n      show
        do\\n        title \\\"Transfer Residual Primer\\\"\\n        \\n        note
        \\\"Transfer primer residue from the low volume aliquots into the fresh aliquots
        according to the following table:\\\"\\n        table transfer_table\\n      end\\n
        \   end\\n    \\n    release stocks, interactive: true\\n  end\\n  \\n  #
        build a pcrs hash that groups pcr by T Anneal\\n  def build_pcrs_hash\\n    \\n
        \   pcr_operations = operations.map do |op|\\n      PcrOperation.new({\\n
        \       extension_time: op.output(FRAGMENT).sample.properties[\\\"Length\\\"]
        * SEC_PER_KB / 1000,\\n        anneal_temp: min(op.input(FWD).sample.properties[\\\"T
        Anneal\\\"], op.input(REV).sample.properties[\\\"T Anneal\\\"]),\\n        unique_id:
        op.id\\n      })\\n    end\\n\\n    result_hash = batch(pcr_operations)\\n
        \   pcr_reactions = []\\n    result_hash.each do |thermocycler_group, row_groups|\\n
        \     reaction = {}\\n      extension_time = thermocycler_group.max_extension
        + 60\\n      reaction[:mm], reaction[:ss] = (extension_time.to_i).divmod(60)\\n
        \     reaction[:mm] = \\\"0#{reaction[:mm]}\\\" if reaction[:mm].between?(0,
        9)\\n      reaction[:ss] = \\\"0#{reaction[:ss]}\\\" if reaction[:ss].between?(0,
        9)\\n      \\n      reaction[:ops_by_bin] = {}\\n      sorted_rows = row_groups.to_a.sort
        { |a,b| a.min_anneal \\u003c=\\u003e b.min_anneal }\\n      sorted_rows.each
        do |row_group|\\n          reaction[:ops_by_bin][row_group.min_anneal.round(1)]
        = [].extend(OperationList)\\n          row_group.members.sort { |a,b| a.anneal_temp
        \\u003c=\\u003e b.anneal_temp }.each do |pcr_op|\\n            reaction[:ops_by_bin][row_group.min_anneal.round(1)]
        \\u003c\\u003c (Operation.find(pcr_op.unique_id))\\n          end\\n      end\\n
        \     \\n      # trim bin if we cant fit all rows into one thermocycler\\n
        \     while reaction[:ops_by_bin].keys.size \\u003e 8\\n        extra_ops
        = reaction[:ops_by_bin][reaction[:ops_by_bin].keys.last]\\n        extra_ops.each
        do |op|\\n            op.error :batching_issue, \\\"We weren't able to batch
        this operation into a running thermocycler for this Job, try again.\\\"\\n
        \           show do note \\\"failed batching\\\" end\\n        end\\n        reaction[:ops_by_bin].except(reaction[:ops_by_bin].keys.last)\\n
        \     end\\n      \\n      reaction[:bins] = reaction[:ops_by_bin].keys\\n
        \     reaction[:stripwells] = []\\n      reaction[:ops_by_bin].each do |bin,
        ops|\\n          ops.make\\n          reaction[:stripwells] += ops.output_collections[FRAGMENT]#ops.map
        { |op| op.output(FRAGMENT).collection }.uniq\\n      end\\n      pcr_reactions
        \\u003c\\u003c reaction\\n    end\\n    pcr_reactions\\n  end\\n  \\n  # generate
        a table for stripwells\\n  def build_stripwell_table pcrs\\n    stripwells
        = pcrs.collect { |pcr| pcr[:stripwells] }.flatten\\n    stripwell_tab = [[\\\"Stripwell\\\",
        \\\"Wells to pipette\\\"]] + stripwells.map { |sw| [\\\"#{sw.id} (#{sw.num_samples
        \\u003c= 6 ? 6 : 12} wells)\\\", { content: sw.non_empty_string, check: true
        }] }\\n  end\\n  \\n  # prepare and label stripwells for PCR\\n    def prepare_stripwells
        stripwell_tab\\n    show do\\n      title \\\"Label and prepare stripwells\\\"\\n
        \     \\n      note \\\"Label stripwells, and pipette 19 uL of molecular grade
        water into each based on the following table:\\\"\\n      table stripwell_tab\\n
        \     stripwell_tab\\n    end\\n  end\\n  \\n  # add templates to stripwells
        for pcr\\n  def load_templates pcrs\\n    pcrs.each_with_index do |pcr, idx|\\n
        \     show do\\n        title \\\"Load templates for PCR ##{idx + 1}\\\"\\n
        \       \\n        pcr[:ops_by_bin].each do |bin, ops|\\n          table ops\\n
        \             .start_table\\n              .output_collection(FRAGMENT, heading:
        \\\"Stripwell\\\")\\n              .custom_column(heading: \\\"Well\\\") {
        |op| op.output(FRAGMENT).column + 1 }\\n              .input_item(TEMPLATE,
        heading: \\\"Template, 1 uL\\\", checkable: true)\\n              .end_table\\n
        \       end\\n        warning \\\"Use a fresh pipette tip for each transfer.\\\".upcase\\n
        \     end\\n    end\\n  end\\n  \\n  # add primers to stripwells\\n  def load_primers
        pcrs\\n    pcrs.each_with_index do |pcr, idx|\\n      show do\\n        title
        \\\"Load primers for PCR ##{idx + 1}\\\"\\n        \\n        pcr[:ops_by_bin].each
        do |bin, ops|\\n          table ops.start_table\\n              .output_collection(FRAGMENT,
        heading: \\\"Stripwell\\\")\\n              .custom_column(heading: \\\"Well\\\")
        { |op| op.output(FRAGMENT).column + 1 }\\n              .input_item(FWD, heading:
        \\\"Forward Primer, 2.5 uL\\\", checkable: true)\\n              .input_item(REV,
        heading: \\\"Reverse Primer, 2.5 uL\\\", checkable: true)\\n              .end_table\\n
        \       end\\n        warning \\\"Use a fresh pipette tip for each transfer.\\\".upcase\\n
        \     end\\n    end\\n  end\\n  \\n  # add kapa master mix to stripwells\\n
        \ def add_mix stripwell_tab, kapa_stock_item\\n      show do\\n          title
        \\\"Add Master Mix\\\"\\n          \\n          note \\\"Pipette 25 L of master
        mix (#{kapa_stock_item}) into stripwells based on the following table:\\\"\\n
        \         table stripwell_tab\\n          warning \\\"USE A NEW PIPETTE TIP
        FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\\\"\\n          check \\\"Cap
        each stripwell. Press each one very hard to make sure it is sealed.\\\"\\n
        \     end\\n  end\\n  \\n  # run the thermocycler and update the positions
        of the stripwells\\n  def start_pcr pcrs\\n      pcrs.each_with_index do |pcr,
        idx|\\n        is_gradient = pcr[:bins].length \\u003e 1\\n        # log_bin_info
        pcr # use for debugging bad binning behavior\\n        resp = show do\\n          if
        !is_gradient\\n            title \\\"Start PCR ##{idx + 1} at #{pcr[:bins].first}
        C\\\"\\n            \\n            check \\\"Place the stripwell(s) #{pcr[:stripwells].collect
        { |sw| \\\"#{sw}\\\" }.join(\\\", \\\")} into an available thermal cycler
        and close the lid.\\\"\\n            get \\\"text\\\", var: \\\"name\\\",
        label: \\\"Enter the name of the thermocycler used\\\", default: \\\"TC1\\\"\\n
        \           check \\\"Click 'Home' then click 'Saved Protocol'. Choose 'YY'
        and then 'CLONEPCR'.\\\"\\n            check \\\"Set the anneal temperature
        to \\u003cb\\u003e#{pcr[:bins].first} C\\u003c/b\\u003e. This is the 3rd temperature.\\\"\\n
        \         else\\n            title \\\"Start PCR ##{idx + 1} (gradient) over
        range #{pcr[:bins].first}-#{pcr[:bins].last} C\\\"\\n            check \\\"Click
        'Home' then click 'Saved Protocol'. Choose 'YY' and then 'CLONEPCR'.\\\"\\n
        \           check \\\"Click on annealing temperature -\\u003e options, and
        check the gradient checkbox.\\\"\\n            check \\\"Set the annealing
        temperature range to be #{pcr[:bins].first}-#{pcr[:bins].last} C.\\\"\\n            note
        \\\"Cancel this PCR batch if something doesn't look right, for example if
        the thermocycler does not allow this temperature range.\\\"\\n            select
        [\\\"yes\\\", \\\"no\\\"], var: \\\"batching_bad\\\", label: \\\"Cancel this
        batch?\\\", default: 1\\n            note \\\"The following stripwells are
        ordered front to back.\\\"\\n            \\n            pcr[:stripwells].map.with_index
        do |sw, idx|\\n              temp = pcr[:ops_by_bin].keys[idx].to_f\\n              check
        \\\"Place the stripwell #{sw} into a row of the thermocycler with the temperature
        as close as possible to \\u003cb\\u003e#{temp} C\\u003c/b\\u003e\\\"\\n            end\\n
        \           get \\\"text\\\", var: \\\"name\\\", label: \\\"Enter the name
        of the thermocycler used\\\", default: \\\"TC1\\\"\\n          end\\n          check
        \\\"Set the 4th time (extension time) to be #{pcr[:mm]}:#{pcr[:ss]}.\\\"\\n
        \         check \\\"Press 'Run' and select 50 uL.\\\"\\n        end\\n        \\n
        \       impossible_pcr_handler(pcr) if resp.get_response(:batching_bad) ==
        \\\"yes\\\"\\n        \\n        # set the location of the stripwell\\n        pcr[:stripwells].flatten.each
        do |sw|\\n          sw.move resp[:name]\\n        end\\n      end\\n  end\\n
        \ \\n  def impossible_pcr_handler(pcr)\\n      pcr[:ops_by_bin].each do |bin,
        ops|\\n          ops.each do |op|\\n            op.error :batching_issue,
        \\\"We weren't able to batch this operation into a running thermocycler for
        this Job, try again.\\\"\\n          end\\n      end\\n      pcr[:stripwells].each
        do |sw|\\n          sw.mark_as_deleted\\n      end\\n      \\n      show do\\n
        \       title 'Reaction Canceled'\\n        note \\\"All operations in this
        pcr reaction are canceled, try them again in a seperate job.\\\"\\n        note
        \\\"The other Reactions will go forward as planned.\\\"\\n      end\\n  end\\n\\n
        \ def log_bin_info pcr\\n    show do\\n      title \\\"bin info\\\"\\n      note
        \\\"ops_by_bin\\\"\\n      pcr[:ops_by_bin].each do |bin, ops|\\n        opids
        = ops.map { |op| op.id }\\n        check \\\"#{bin.to_s}  =\\u003e  #{opids.to_s}\\\"\\n
        \     end\\n\\n      note \\\"bins\\\"\\n      pcr[:bins].each do |bin|\\n
        \       check \\\"#{bin.to_s}\\\"\\n      end\\n    end\\n  end\\nend\",\"parent_id\":1460,\"parent_class\":\"OperationType\",\"created_at\":\"2018-10-31T13:38:11.000-07:00\",\"updated_at\":\"2018-10-31T13:38:11.000-07:00\",\"user_id\":192},{\"id\":89428,\"name\":\"protocol\",\"content\":\"needs
        \\\"Cloning Libs/Cloning\\\"\\nneeds 'PCR Libs/GradientPcrBatching'\\nneeds
        'Standard Libs/Debug'\\nneeds 'Standard Libs/Feedback'\\n\\nclass Protocol\\n
        \   \\n  # I/O\\n  FWD = \\\"Forward Primer\\\"\\n  REV = \\\"Reverse Primer\\\"\\n
        \ TEMPLATE = \\\"Template\\\"\\n  FRAGMENT = \\\"Fragment\\\"\\n  \\n  # other\\n
        \ SEC_PER_KB = 30 # sec, extension timer per KB for KAPA\\n  \\n  # get the
        gradient PCR magic\\n  include Cloning\\n  include GradientPcrBatching\\n
        \ include Debug\\n  include Feedback\\n\\n  def main\\n     \\n    # grab
        all necessary items\\n    dilute_stocks_and_retrieve TEMPLATE\\n    kapa_stock_item
        = find(:sample, name: \\\"Kapa HF Master Mix\\\")[0].in(\\\"Enzyme Stock\\\")[0]\\n
        \   take [kapa_stock_item], interactive: true,  method: \\\"boxes\\\"\\n    \\n
        \   #check the volumes of input primers for all operations, and ensure they
        are sufficient\\n    operations.each { |op| op.temporary[:primer_vol] = 2.5
        }\\n    check_volumes [FWD, REV], :primer_vol, :make_aliquots_from_stock,
        check_contam: true\\n    \\n    # build a pcrs hash that groups pcr by T Anneal\\n
        \   pcrs = build_pcrs_hash\\n\\n    # show the result of the binning algorithm\\n
        \   pcrs.each_with_index do |pcr, idx|\\n      show { title \\\"pcr #{idx}\\\"}\\n
        \     log_bin_info pcr\\n    end if debug\\n\\n    # generate a table for
        stripwells\\n    stripwell_tab = build_stripwell_table pcrs\\n    \\n    #
        prepare and label stripwells for PCR\\n    prepare_stripwells stripwell_tab\\n
        \   \\n    # add templates to stripwells for pcr\\n    load_templates pcrs\\n
        \   \\n    # add primers to stripwells\\n    load_primers pcrs\\n\\n    #
        add kapa master mix to stripwells\\n    add_mix stripwell_tab, kapa_stock_item\\n
        \   \\n    # run the thermocycler\\n    start_pcr pcrs\\n    \\n    # store
        \\n    operations.running.store io: \\\"input\\\", interactive: true, method:
        \\\"boxes\\\"\\n    release [kapa_stock_item], interactive: true\\n    \\n
        \   get_protocol_feedback\\n    \\n    return {batches: pcrs}\\n  end\\n  \\n
        \ # dilute to 1ng/uL stocks if necessary\\n  def dilute_stocks_and_retrieve
        input\\n  \\n    # only use inputs that haven't been diluted and that don't
        have diluted stocks already\\n    ops_w_undiluted_template = operations.reject
        { true }\\n    operations.each do |op|\\n        next if op.input(input).object_type.name.include?(\\\"1
        ng/\xB5L\\\") || op.input(input).object_type.name.include?(\\\"50X PCR Template\\\")
        || op.input(input).object_type.name.include?(\\\"Unverified PCR Fragment\\\")\\n
        \       \\n        sample = op.input(input).sample\\n        ot_name = op.input(input).object_type.name.include?(\\\"Unverified\\\")
        ? \\\"1 ng/\xB5L Plasmid Stock\\\" : \\\"1 ng/\xB5L \\\" + sample.sample_type.name
        + \\\" Stock\\\"\\n        new_stock = produce new_sample sample.name, of:
        sample.sample_type.name, as: ot_name\\n        op.temporary[:diluted_stock]
        = new_stock\\n        ops_w_undiluted_template.push op\\n    end\\n    \\n
        \   # retrieve operation inputs (doesn't include the stocks replaced by diluted
        stocks above)\\n    ops_w_undiluted_template.retrieve\\n    \\n    # all stocks
        may be diluted already\\n    if ops_w_undiluted_template.empty?\\n        operations.retrieve\\n
        \       return\\n    end\\n    \\n    # ensure concentrations\\n    check_concentration
        ops_w_undiluted_template, input\\n    \\n    # dilute stocks\\n    show do\\n
        \     title \\\"Make 1 ng/\xB5L Template Stocks\\\"\\n      \\n      check
        \\\"Grab #{ops_w_undiluted_template.length} 1.5 mL tubes, label them with
        #{ops_w_undiluted_template.map { |op| op.temporary[:diluted_stock].id }.join(\\\",
        \\\")}\\\"\\n      check \\\"Add template stocks and water into newly labeled
        1.5 mL tubes following the table below\\\"\\n      \\n      table ops_w_undiluted_template\\n
        \         .start_table\\n          .custom_column(heading: \\\"Newly-labeled
        tube\\\") { |op| op.temporary[:diluted_stock].id }\\n          .input_item(input,
        heading: \\\"Template stock, 1 uL\\\", checkable: true)\\n          .custom_column(heading:
        \\\"Water volume\\\", checkable: true) { |op| op.input(input).item.get(:concentration).to_f
        - 1 }\\n          .end_table\\n      check \\\"Vortex and then spin down for
        a few seconds\\\"\\n    end\\n    \\n    # Add association from which item
        the 1ng/ul dilution came from\\n    ops_w_undiluted_template.map { |op| \\n
        \       op.temporary[:diluted_stock].associate(:diluted_from, op.input(input).item.id)\\n
        \   }\\n    \\n    \\n    \\n    # return input stocks\\n    release ops_w_undiluted_template.map
        { |op| op.input(input).item }, interactive: true, method: \\\"boxes\\\"\\n
        \   \\n    # retrieve the rest of the inputs\\n    operations.reject { |op|
        ops_w_undiluted_template.include? op }.retrieve\\n    \\n    # set diluted
        stocks as inputs\\n    ops_w_undiluted_template.each { |op| op.input(input).set
        item: op.temporary[:diluted_stock] }\\n  end\\n  \\n  \\n  # TODO dilute from
        stock if item is aliquot\\n  # Callback for check_volume.\\n  # takes in lists
        of all ops that have input aliquots with insufficient volume, sorted by item,\\n
        \ # and takes in the inputs which were checked for those ops.\\n  # Deletes
        bad items and remakes each from primer stock\\n  def make_aliquots_from_stock
        bad_ops_by_item, inputs\\n    # bad_ops_by_item is accessible by bad_ops_by_item[item]
        = [op1, op2, op3...]\\n    # where each op has a bad volume reading for the
        given item\\n    \\n    # Construct list of all stocks needed for making aliquots.
        Error ops for which no primer stock is available\\n    # for every non-errored
        op that has low item volume,\\n    # replace the old aliquot item with a new
        one. \\n    aliquots_to_make = 0\\n    stocks = []\\n    ops_by_fresh_item
        = Hash.new(0)\\n    stock_table = [[\\\"Primer Stock ID\\\", \\\"Primer Aliquot
        ID\\\"]]\\n    transfer_table = [[\\\"Old Aliquot ID\\\", \\\"New Aliquot
        ID\\\"]]\\n    bad_ops_by_item.each do |item, ops|\\n      stock = item.sample.in(\\\"Primer
        Stock\\\").first ######## items is a string?\\n      if stock.nil?\\n        ops.each
        { |op| op.error :no_primer, \\\"You need to order a primer stock for primer
        sample #{item.sample.id}.\\\" }\\n        bad_ops_by_item.except! item\\n
        \     else\\n        stocks.push stock\\n        aliquots_to_make += 1\\n
        \       item.mark_as_deleted\\n        fresh_item = produce new_sample item.sample.name,
        of: item.sample.sample_type.name, as: item.object_type.name\\n        bad_ops_by_item.except!
        item\\n        ops_by_fresh_item[fresh_item] = ops\\n        ops.each do |op|
        \\n          input = inputs.find { |input| op.input(input).item == item }\\n
        \         op.input(input).set item: fresh_item\\n        end\\n        stock_table.push
        [stock.id, {content: fresh_item.id, check: true}]\\n        if item.get(:contaminated)
        != \\\"Yes\\\"\\n          transfer_table.push [item.id, {content: fresh_item.id,
        check: true}]    \\n        end\\n      end\\n    end\\n    \\n    bad_ops_by_item.merge!
        ops_by_fresh_item\\n    take stocks, interactive: true\\n    \\n    # label
        new aliquot tubes and dilute\\n    show do \\n      title \\\"Grab 1.5 mL
        tubes\\\"\\n      \\n      note \\\"Grab #{aliquots_to_make} 1.5 mL tubes\\\"\\n
        \     note \\\"Label each tube with the following ids: #{bad_ops_by_item.keys.map
        { |item| item.id }.sort.to_sentence}\\\"\\n      note \\\"Using the 100 uL
        pipette, pipette 90uL of water into each tube\\\"\\n    end\\n  \\n    # make
        new aliquots\\n    show do \\n      title \\\"Transfer primer stock into primer
        aliquot\\\"\\n      \\n      note \\\"Pipette 10 uL of the primer stock into
        the primer aliquot according to the following table:\\\"\\n      table stock_table\\n
        \   end\\n    \\n    \\n    if transfer_table.length \\u003e 1\\n      show
        do\\n        title \\\"Transfer Residual Primer\\\"\\n        \\n        note
        \\\"Transfer primer residue from the low volume aliquots into the fresh aliquots
        according to the following table:\\\"\\n        table transfer_table\\n      end\\n
        \   end\\n    \\n    release stocks, interactive: true\\n  end\\n  \\n  #
        build a pcrs hash that groups pcr by T Anneal\\n  def build_pcrs_hash\\n    \\n
        \   pcr_operations = operations.map do |op|\\n      PcrOperation.new({\\n
        \       extension_time: op.output(FRAGMENT).sample.properties[\\\"Length\\\"]
        * SEC_PER_KB / 1000,\\n        anneal_temp: min(op.input(FWD).sample.properties[\\\"T
        Anneal\\\"], op.input(REV).sample.properties[\\\"T Anneal\\\"]),\\n        unique_id:
        op.id\\n      })\\n    end\\n\\n    result_hash = batch(pcr_operations)\\n
        \   pcr_reactions = []\\n    result_hash.each do |thermocycler_group, row_groups|\\n
        \     reaction = {}\\n      extension_time = thermocycler_group.max_extension
        + 60\\n      reaction[:mm], reaction[:ss] = (extension_time.to_i).divmod(60)\\n
        \     reaction[:mm] = \\\"0#{reaction[:mm]}\\\" if reaction[:mm].between?(0,
        9)\\n      reaction[:ss] = \\\"0#{reaction[:ss]}\\\" if reaction[:ss].between?(0,
        9)\\n      \\n      reaction[:ops_by_bin] = {}\\n      sorted_rows = row_groups.to_a.sort
        { |a,b| a.min_anneal \\u003c=\\u003e b.min_anneal }\\n      sorted_rows.each
        do |row_group|\\n          reaction[:ops_by_bin][row_group.min_anneal.round(1)]
        = [].extend(OperationList)\\n          row_group.members.sort { |a,b| a.anneal_temp
        \\u003c=\\u003e b.anneal_temp }.each do |pcr_op|\\n            reaction[:ops_by_bin][row_group.min_anneal.round(1)]
        \\u003c\\u003c (Operation.find(pcr_op.unique_id))\\n          end\\n      end\\n
        \     \\n      # trim bin if we cant fit all rows into one thermocycler\\n
        \     while reaction[:ops_by_bin].keys.size \\u003e 8\\n        extra_ops
        = reaction[:ops_by_bin][reaction[:ops_by_bin].keys.last]\\n        extra_ops.each
        do |op|\\n            op.error :batching_issue, \\\"We weren't able to batch
        this operation into a running thermocycler for this Job, try again.\\\"\\n
        \           show do note \\\"failed batching\\\" end\\n        end\\n        reaction[:ops_by_bin].except(reaction[:ops_by_bin].keys.last)\\n
        \     end\\n      \\n      reaction[:bins] = reaction[:ops_by_bin].keys\\n
        \     reaction[:stripwells] = []\\n      reaction[:ops_by_bin].each do |bin,
        ops|\\n          ops.make\\n          reaction[:stripwells] += ops.output_collections[FRAGMENT]#ops.map
        { |op| op.output(FRAGMENT).collection }.uniq\\n      end\\n      pcr_reactions
        \\u003c\\u003c reaction\\n    end\\n    pcr_reactions\\n  end\\n  \\n  # generate
        a table for stripwells\\n  def build_stripwell_table pcrs\\n    stripwells
        = pcrs.collect { |pcr| pcr[:stripwells] }.flatten\\n    stripwell_tab = [[\\\"Stripwell\\\",
        \\\"Wells to pipette\\\"]] + stripwells.map { |sw| [\\\"#{sw.id} (#{sw.num_samples
        \\u003c= 6 ? 6 : 12} wells)\\\", { content: sw.non_empty_string, check: true
        }] }\\n  end\\n  \\n  # prepare and label stripwells for PCR\\n    def prepare_stripwells
        stripwell_tab\\n    show do\\n      title \\\"Label and prepare stripwells\\\"\\n
        \     \\n      note \\\"Label stripwells, and pipette 19 uL of molecular grade
        water into each based on the following table:\\\"\\n      table stripwell_tab\\n
        \     stripwell_tab\\n    end\\n  end\\n  \\n  # add templates to stripwells
        for pcr\\n  def load_templates pcrs\\n    pcrs.each_with_index do |pcr, idx|\\n
        \     show do\\n        title \\\"Load templates for PCR ##{idx + 1}\\\"\\n
        \       \\n        pcr[:ops_by_bin].each do |bin, ops|\\n          table ops\\n
        \             .start_table\\n              .output_collection(FRAGMENT, heading:
        \\\"Stripwell\\\")\\n              .custom_column(heading: \\\"Well\\\") {
        |op| op.output(FRAGMENT).column + 1 }\\n              .input_item(TEMPLATE,
        heading: \\\"Template, 1 uL\\\", checkable: true)\\n              .end_table\\n
        \       end\\n        warning \\\"Use a fresh pipette tip for each transfer.\\\".upcase\\n
        \     end\\n    end\\n  end\\n  \\n  # add primers to stripwells\\n  def load_primers
        pcrs\\n    pcrs.each_with_index do |pcr, idx|\\n      show do\\n        title
        \\\"Load primers for PCR ##{idx + 1}\\\"\\n        \\n        pcr[:ops_by_bin].each
        do |bin, ops|\\n          table ops.start_table\\n              .output_collection(FRAGMENT,
        heading: \\\"Stripwell\\\")\\n              .custom_column(heading: \\\"Well\\\")
        { |op| op.output(FRAGMENT).column + 1 }\\n              .input_item(FWD, heading:
        \\\"Forward Primer, 2.5 uL\\\", checkable: true)\\n              .input_item(REV,
        heading: \\\"Reverse Primer, 2.5 uL\\\", checkable: true)\\n              .end_table\\n
        \       end\\n        warning \\\"Use a fresh pipette tip for each transfer.\\\".upcase\\n
        \     end\\n    end\\n  end\\n  \\n  # add kapa master mix to stripwells\\n
        \ def add_mix stripwell_tab, kapa_stock_item\\n      show do\\n          title
        \\\"Add Master Mix\\\"\\n          \\n          note \\\"Pipette 25 L of master
        mix (#{kapa_stock_item}) into stripwells based on the following table:\\\"\\n
        \         table stripwell_tab\\n          warning \\\"USE A NEW PIPETTE TIP
        FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\\\"\\n          check \\\"Cap
        each stripwell. Press each one very hard to make sure it is sealed.\\\"\\n
        \     end\\n  end\\n  \\n  # run the thermocycler and update the positions
        of the stripwells\\n  def start_pcr pcrs\\n      pcrs.each_with_index do |pcr,
        idx|\\n        is_gradient = pcr[:bins].length \\u003e 1\\n        # log_bin_info
        pcr # use for debugging bad binning behavior\\n        resp = show do\\n          if
        !is_gradient\\n            title \\\"Start PCR ##{idx + 1} at #{pcr[:bins].first}
        C\\\"\\n            \\n            check \\\"Place the stripwell(s) #{pcr[:stripwells].collect
        { |sw| \\\"#{sw}\\\" }.join(\\\", \\\")} into an available thermal cycler
        and close the lid.\\\"\\n            get \\\"text\\\", var: \\\"name\\\",
        label: \\\"Enter the name of the thermocycler used\\\", default: \\\"TC1\\\"\\n
        \           check \\\"Click 'Home' then click 'Saved Protocol'. Choose 'YY'
        and then 'CLONEPCR'.\\\"\\n            check \\\"Set the anneal temperature
        to \\u003cb\\u003e#{pcr[:bins].first} C\\u003c/b\\u003e. This is the 3rd temperature.\\\"\\n
        \         else\\n            title \\\"Start PCR ##{idx + 1} (gradient) over
        range #{pcr[:bins].first}-#{pcr[:bins].last} C\\\"\\n            check \\\"Click
        'Home' then click 'Saved Protocol'. Choose 'YY' and then 'CLONEPCR'.\\\"\\n
        \           check \\\"Click on annealing temperature -\\u003e options, and
        check the gradient checkbox.\\\"\\n            check \\\"Set the annealing
        temperature range to be #{pcr[:bins].first}-#{pcr[:bins].last} C.\\\"\\n            note
        \\\"Cancel this PCR batch if something doesn't look right, for example if
        the thermocycler does not allow this temperature range.\\\"\\n            select
        [\\\"yes\\\", \\\"no\\\"], var: \\\"batching_bad\\\", label: \\\"Cancel this
        batch?\\\", default: 1\\n            note \\\"The following stripwells are
        ordered front to back.\\\"\\n            \\n            pcr[:stripwells].map.with_index
        do |sw, idx|\\n              temp = pcr[:ops_by_bin].keys[idx].to_f\\n              check
        \\\"Place the stripwell #{sw} into a row of the thermocycler with the temperature
        as close as possible to \\u003cb\\u003e#{temp} C\\u003c/b\\u003e\\\"\\n            end\\n
        \           get \\\"text\\\", var: \\\"name\\\", label: \\\"Enter the name
        of the thermocycler used\\\", default: \\\"TC1\\\"\\n          end\\n          check
        \\\"Set the 4th time (extension time) to be #{pcr[:mm]}:#{pcr[:ss]}.\\\"\\n
        \         check \\\"Press 'Run' and select 50 uL.\\\"\\n        end\\n        \\n
        \       impossible_pcr_handler(pcr) if resp.get_response(:batching_bad) ==
        \\\"yes\\\"\\n        \\n        # set the location of the stripwell\\n        pcr[:stripwells].flatten.each
        do |sw|\\n          sw.move resp[:name]\\n        end\\n      end\\n  end\\n
        \ \\n  def impossible_pcr_handler(pcr)\\n      pcr[:ops_by_bin].each do |bin,
        ops|\\n          ops.each do |op|\\n            op.error :batching_issue,
        \\\"We weren't able to batch this operation into a running thermocycler for
        this Job, try again.\\\"\\n          end\\n      end\\n      pcr[:stripwells].each
        do |sw|\\n          sw.mark_as_deleted\\n      end\\n      \\n      show do\\n
        \       title 'Reaction Canceled'\\n        note \\\"All operations in this
        pcr reaction are canceled, try them again in a seperate job.\\\"\\n        note
        \\\"The other Reactions will go forward as planned.\\\"\\n      end\\n  end\\n\\n
        \ def log_bin_info pcr\\n    show do\\n      title \\\"bin info\\\"\\n      note
        \\\"ops_by_bin\\\"\\n      pcr[:ops_by_bin].each do |bin, ops|\\n        opids
        = ops.map { |op| op.id }\\n        check \\\"#{bin.to_s}  =\\u003e  #{opids.to_s}\\\"\\n
        \     end\\n\\n      note \\\"bins\\\"\\n      pcr[:bins].each do |bin|\\n
        \       check \\\"#{bin.to_s}\\\"\\n      end\\n    end\\n  end\\nend\",\"parent_id\":1460,\"parent_class\":\"OperationType\",\"created_at\":\"2018-10-31T13:37:06.000-07:00\",\"updated_at\":\"2018-10-31T13:37:06.000-07:00\",\"user_id\":192},{\"id\":89427,\"name\":\"protocol\",\"content\":\"needs
        \\\"Cloning Libs/Cloning\\\"\\nneeds 'PCR Libs/GradientPcrBatching'\\nneeds
        'Standard Libs/Debug'\\nneeds 'Standard Libs/Feedback'\\n\\nclass Protocol\\n
        \   \\n  # I/O\\n  FWD = \\\"Forward Primer\\\"\\n  REV = \\\"Reverse Primer\\\"\\n
        \ TEMPLATE = \\\"Template\\\"\\n  FRAGMENT = \\\"Fragment\\\"\\n  \\n  # other\\n
        \ SEC_PER_KB = 30 # sec, extension timer per KB for KAPA\\n  \\n  # get the
        gradient PCR magic\\n  include Cloning\\n  include GradientPcrBatching\\n
        \ include Debug\\n  include Feedback\\n\\n  def main\\n     \\n    # grab
        all necessary items\\n    dilute_stocks_and_retrieve TEMPLATE\\n    kapa_stock_item
        = find(:sample, name: \\\"Kapa HF Master Mix\\\")[0].in(\\\"Enzyme Stock\\\")[0]\\n
        \   take [kapa_stock_item], interactive: true,  method: \\\"boxes\\\"\\n    \\n
        \   #check the volumes of input primers for all operations, and ensure they
        are sufficient\\n    operations.each { |op| op.temporary[:primer_vol] = 2.5
        }\\n    check_volumes [FWD, REV], :primer_vol, :make_aliquots_from_stock,
        check_contam: true\\n    \\n    # build a pcrs hash that groups pcr by T Anneal\\n
        \   pcrs = build_pcrs_hash\\n\\n    # show the result of the binning algorithm\\n
        \   pcrs.each_with_index do |pcr, idx|\\n      show { title \\\"pcr #{idx}\\\"}\\n
        \     log_bin_info pcr\\n    end if debug\\n\\n    # generate a table for
        stripwells\\n    stripwell_tab = build_stripwell_table pcrs\\n    \\n    #
        prepare and label stripwells for PCR\\n    prepare_stripwells stripwell_tab\\n
        \   \\n    # add templates to stripwells for pcr\\n    load_templates pcrs\\n
        \   \\n    # add primers to stripwells\\n    load_primers pcrs\\n\\n    #
        add kapa master mix to stripwells\\n    add_mix stripwell_tab, kapa_stock_item\\n
        \   \\n    # run the thermocycler\\n    start_pcr pcrs\\n    \\n    # store
        \\n    operations.running.store io: \\\"input\\\", interactive: true, method:
        \\\"boxes\\\"\\n    release [kapa_stock_item], interactive: true\\n    \\n
        \   get_protocol_feedback\\n    \\n    return {batches: pcrs}\\n  end\\n  \\n
        \ # dilute to 1ng/uL stocks if necessary\\n  def dilute_stocks_and_retrieve
        input\\n  \\n    # only use inputs that haven't been diluted and that don't
        have diluted stocks already\\n    ops_w_undiluted_template = operations.reject
        { true }\\n    operations.each do |op|\\n        next if op.input(input).object_type.name.include?(\\\"1
        ng/\xB5L\\\") || op.input(input).object_type.name.include?(\\\"50X PCR Template\\\")
        || op.input(input).object_type.name.include?(\\\"Unverified PCR Fragment\\\")\\n
        \       \\n        sample = op.input(input).sample\\n        ot_name = op.input(input).object_type.name.include?(\\\"Unverified\\\")
        ? \\\"1 ng/\xB5L Plasmid Stock\\\" : \\\"1 ng/\xB5L \\\" + sample.sample_type.name
        + \\\" Stock\\\"\\n        new_stock = produce new_sample sample.name, of:
        sample.sample_type.name, as: ot_name\\n        op.temporary[:diluted_stock]
        = new_stock\\n        ops_w_undiluted_template.push op\\n    end\\n    \\n
        \   # retrieve operation inputs (doesn't include the stocks replaced by diluted
        stocks above)\\n    ops_w_undiluted_template.retrieve\\n    \\n    # all stocks
        may be diluted already\\n    if ops_w_undiluted_template.empty?\\n        operations.retrieve\\n
        \       return\\n    end\\n    \\n    # ensure concentrations\\n    check_concentration
        ops_w_undiluted_template, input\\n    \\n    # dilute stocks\\n    show do\\n
        \     title \\\"Make 1 ng/\xB5L Template Stocks\\\"\\n      \\n      check
        \\\"Grab #{ops_w_undiluted_template.length} 1.5 mL tubes, label them with
        #{ops_w_undiluted_template.map { |op| op.temporary[:diluted_stock].id }.join(\\\",
        \\\")}\\\"\\n      check \\\"Add template stocks and water into newly labeled
        1.5 mL tubes following the table below\\\"\\n      \\n      table ops_w_undiluted_template\\n
        \         .start_table\\n          .custom_column(heading: \\\"Newly-labeled
        tube\\\") { |op| op.temporary[:diluted_stock].id }\\n          .input_item(input,
        heading: \\\"Template stock, 1 uL\\\", checkable: true)\\n          .custom_column(heading:
        \\\"Water volume\\\", checkable: true) { |op| op.input(input).item.get(:concentration).to_f
        - 1 }\\n          .end_table\\n      check \\\"Vortex and then spin down for
        a few seconds\\\"\\n    end\\n    \\n    # Add association from which item
        the 1ng/ul dilution came from\\n    show do\\n        ops_w_undiluted_template.map
        { |op| \\n            note \\\"#{op.temporary[:diluted_stock]} was diluted
        from #{op.input(input).item}\\\"\\n            \\n        }\\n    end\\n    \\n
        \   \\n    \\n    # return input stocks\\n    release ops_w_undiluted_template.map
        { |op| op.input(input).item }, interactive: true, method: \\\"boxes\\\"\\n
        \   \\n    # retrieve the rest of the inputs\\n    operations.reject { |op|
        ops_w_undiluted_template.include? op }.retrieve\\n    \\n    # set diluted
        stocks as inputs\\n    ops_w_undiluted_template.each { |op| op.input(input).set
        item: op.temporary[:diluted_stock] }\\n  end\\n  \\n  \\n  # TODO dilute from
        stock if item is aliquot\\n  # Callback for check_volume.\\n  # takes in lists
        of all ops that have input aliquots with insufficient volume, sorted by item,\\n
        \ # and takes in the inputs which were checked for those ops.\\n  # Deletes
        bad items and remakes each from primer stock\\n  def make_aliquots_from_stock
        bad_ops_by_item, inputs\\n    # bad_ops_by_item is accessible by bad_ops_by_item[item]
        = [op1, op2, op3...]\\n    # where each op has a bad volume reading for the
        given item\\n    \\n    # Construct list of all stocks needed for making aliquots.
        Error ops for which no primer stock is available\\n    # for every non-errored
        op that has low item volume,\\n    # replace the old aliquot item with a new
        one. \\n    aliquots_to_make = 0\\n    stocks = []\\n    ops_by_fresh_item
        = Hash.new(0)\\n    stock_table = [[\\\"Primer Stock ID\\\", \\\"Primer Aliquot
        ID\\\"]]\\n    transfer_table = [[\\\"Old Aliquot ID\\\", \\\"New Aliquot
        ID\\\"]]\\n    bad_ops_by_item.each do |item, ops|\\n      stock = item.sample.in(\\\"Primer
        Stock\\\").first ######## items is a string?\\n      if stock.nil?\\n        ops.each
        { |op| op.error :no_primer, \\\"You need to order a primer stock for primer
        sample #{item.sample.id}.\\\" }\\n        bad_ops_by_item.except! item\\n
        \     else\\n        stocks.push stock\\n        aliquots_to_make += 1\\n
        \       item.mark_as_deleted\\n        fresh_item = produce new_sample item.sample.name,
        of: item.sample.sample_type.name, as: item.object_type.name\\n        bad_ops_by_item.except!
        item\\n        ops_by_fresh_item[fresh_item] = ops\\n        ops.each do |op|
        \\n          input = inputs.find { |input| op.input(input).item == item }\\n
        \         op.input(input).set item: fresh_item\\n        end\\n        stock_table.push
        [stock.id, {content: fresh_item.id, check: true}]\\n        if item.get(:contaminated)
        != \\\"Yes\\\"\\n          transfer_table.push [item.id, {content: fresh_item.id,
        check: true}]    \\n        end\\n      end\\n    end\\n    \\n    bad_ops_by_item.merge!
        ops_by_fresh_item\\n    take stocks, interactive: true\\n    \\n    # label
        new aliquot tubes and dilute\\n    show do \\n      title \\\"Grab 1.5 mL
        tubes\\\"\\n      \\n      note \\\"Grab #{aliquots_to_make} 1.5 mL tubes\\\"\\n
        \     note \\\"Label each tube with the following ids: #{bad_ops_by_item.keys.map
        { |item| item.id }.sort.to_sentence}\\\"\\n      note \\\"Using the 100 uL
        pipette, pipette 90uL of water into each tube\\\"\\n    end\\n  \\n    # make
        new aliquots\\n    show do \\n      title \\\"Transfer primer stock into primer
        aliquot\\\"\\n      \\n      note \\\"Pipette 10 uL of the primer stock into
        the primer aliquot according to the following table:\\\"\\n      table stock_table\\n
        \   end\\n    \\n    \\n    if transfer_table.length \\u003e 1\\n      show
        do\\n        title \\\"Transfer Residual Primer\\\"\\n        \\n        note
        \\\"Transfer primer residue from the low volume aliquots into the fresh aliquots
        according to the following table:\\\"\\n        table transfer_table\\n      end\\n
        \   end\\n    \\n    release stocks, interactive: true\\n  end\\n  \\n  #
        build a pcrs hash that groups pcr by T Anneal\\n  def build_pcrs_hash\\n    \\n
        \   pcr_operations = operations.map do |op|\\n      PcrOperation.new({\\n
        \       extension_time: op.output(FRAGMENT).sample.properties[\\\"Length\\\"]
        * SEC_PER_KB / 1000,\\n        anneal_temp: min(op.input(FWD).sample.properties[\\\"T
        Anneal\\\"], op.input(REV).sample.properties[\\\"T Anneal\\\"]),\\n        unique_id:
        op.id\\n      })\\n    end\\n\\n    result_hash = batch(pcr_operations)\\n
        \   pcr_reactions = []\\n    result_hash.each do |thermocycler_group, row_groups|\\n
        \     reaction = {}\\n      extension_time = thermocycler_group.max_extension
        + 60\\n      reaction[:mm], reaction[:ss] = (extension_time.to_i).divmod(60)\\n
        \     reaction[:mm] = \\\"0#{reaction[:mm]}\\\" if reaction[:mm].between?(0,
        9)\\n      reaction[:ss] = \\\"0#{reaction[:ss]}\\\" if reaction[:ss].between?(0,
        9)\\n      \\n      reaction[:ops_by_bin] = {}\\n      sorted_rows = row_groups.to_a.sort
        { |a,b| a.min_anneal \\u003c=\\u003e b.min_anneal }\\n      sorted_rows.each
        do |row_group|\\n          reaction[:ops_by_bin][row_group.min_anneal.round(1)]
        = [].extend(OperationList)\\n          row_group.members.sort { |a,b| a.anneal_temp
        \\u003c=\\u003e b.anneal_temp }.each do |pcr_op|\\n            reaction[:ops_by_bin][row_group.min_anneal.round(1)]
        \\u003c\\u003c (Operation.find(pcr_op.unique_id))\\n          end\\n      end\\n
        \     \\n      # trim bin if we cant fit all rows into one thermocycler\\n
        \     while reaction[:ops_by_bin].keys.size \\u003e 8\\n        extra_ops
        = reaction[:ops_by_bin][reaction[:ops_by_bin].keys.last]\\n        extra_ops.each
        do |op|\\n            op.error :batching_issue, \\\"We weren't able to batch
        this operation into a running thermocycler for this Job, try again.\\\"\\n
        \           show do note \\\"failed batching\\\" end\\n        end\\n        reaction[:ops_by_bin].except(reaction[:ops_by_bin].keys.last)\\n
        \     end\\n      \\n      reaction[:bins] = reaction[:ops_by_bin].keys\\n
        \     reaction[:stripwells] = []\\n      reaction[:ops_by_bin].each do |bin,
        ops|\\n          ops.make\\n          reaction[:stripwells] += ops.output_collections[FRAGMENT]#ops.map
        { |op| op.output(FRAGMENT).collection }.uniq\\n      end\\n      pcr_reactions
        \\u003c\\u003c reaction\\n    end\\n    pcr_reactions\\n  end\\n  \\n  # generate
        a table for stripwells\\n  def build_stripwell_table pcrs\\n    stripwells
        = pcrs.collect { |pcr| pcr[:stripwells] }.flatten\\n    stripwell_tab = [[\\\"Stripwell\\\",
        \\\"Wells to pipette\\\"]] + stripwells.map { |sw| [\\\"#{sw.id} (#{sw.num_samples
        \\u003c= 6 ? 6 : 12} wells)\\\", { content: sw.non_empty_string, check: true
        }] }\\n  end\\n  \\n  # prepare and label stripwells for PCR\\n    def prepare_stripwells
        stripwell_tab\\n    show do\\n      title \\\"Label and prepare stripwells\\\"\\n
        \     \\n      note \\\"Label stripwells, and pipette 19 uL of molecular grade
        water into each based on the following table:\\\"\\n      table stripwell_tab\\n
        \     stripwell_tab\\n    end\\n  end\\n  \\n  # add templates to stripwells
        for pcr\\n  def load_templates pcrs\\n    pcrs.each_with_index do |pcr, idx|\\n
        \     show do\\n        title \\\"Load templates for PCR ##{idx + 1}\\\"\\n
        \       \\n        pcr[:ops_by_bin].each do |bin, ops|\\n          table ops\\n
        \             .start_table\\n              .output_collection(FRAGMENT, heading:
        \\\"Stripwell\\\")\\n              .custom_column(heading: \\\"Well\\\") {
        |op| op.output(FRAGMENT).column + 1 }\\n              .input_item(TEMPLATE,
        heading: \\\"Template, 1 uL\\\", checkable: true)\\n              .end_table\\n
        \       end\\n        warning \\\"Use a fresh pipette tip for each transfer.\\\".upcase\\n
        \     end\\n    end\\n  end\\n  \\n  # add primers to stripwells\\n  def load_primers
        pcrs\\n    pcrs.each_with_index do |pcr, idx|\\n      show do\\n        title
        \\\"Load primers for PCR ##{idx + 1}\\\"\\n        \\n        pcr[:ops_by_bin].each
        do |bin, ops|\\n          table ops.start_table\\n              .output_collection(FRAGMENT,
        heading: \\\"Stripwell\\\")\\n              .custom_column(heading: \\\"Well\\\")
        { |op| op.output(FRAGMENT).column + 1 }\\n              .input_item(FWD, heading:
        \\\"Forward Primer, 2.5 uL\\\", checkable: true)\\n              .input_item(REV,
        heading: \\\"Reverse Primer, 2.5 uL\\\", checkable: true)\\n              .end_table\\n
        \       end\\n        warning \\\"Use a fresh pipette tip for each transfer.\\\".upcase\\n
        \     end\\n    end\\n  end\\n  \\n  # add kapa master mix to stripwells\\n
        \ def add_mix stripwell_tab, kapa_stock_item\\n      show do\\n          title
        \\\"Add Master Mix\\\"\\n          \\n          note \\\"Pipette 25 L of master
        mix (#{kapa_stock_item}) into stripwells based on the following table:\\\"\\n
        \         table stripwell_tab\\n          warning \\\"USE A NEW PIPETTE TIP
        FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\\\"\\n          check \\\"Cap
        each stripwell. Press each one very hard to make sure it is sealed.\\\"\\n
        \     end\\n  end\\n  \\n  # run the thermocycler and update the positions
        of the stripwells\\n  def start_pcr pcrs\\n      pcrs.each_with_index do |pcr,
        idx|\\n        is_gradient = pcr[:bins].length \\u003e 1\\n        # log_bin_info
        pcr # use for debugging bad binning behavior\\n        resp = show do\\n          if
        !is_gradient\\n            title \\\"Start PCR ##{idx + 1} at #{pcr[:bins].first}
        C\\\"\\n            \\n            check \\\"Place the stripwell(s) #{pcr[:stripwells].collect
        { |sw| \\\"#{sw}\\\" }.join(\\\", \\\")} into an available thermal cycler
        and close the lid.\\\"\\n            get \\\"text\\\", var: \\\"name\\\",
        label: \\\"Enter the name of the thermocycler used\\\", default: \\\"TC1\\\"\\n
        \           check \\\"Click 'Home' then click 'Saved Protocol'. Choose 'YY'
        and then 'CLONEPCR'.\\\"\\n            check \\\"Set the anneal temperature
        to \\u003cb\\u003e#{pcr[:bins].first} C\\u003c/b\\u003e. This is the 3rd temperature.\\\"\\n
        \         else\\n            title \\\"Start PCR ##{idx + 1} (gradient) over
        range #{pcr[:bins].first}-#{pcr[:bins].last} C\\\"\\n            check \\\"Click
        'Home' then click 'Saved Protocol'. Choose 'YY' and then 'CLONEPCR'.\\\"\\n
        \           check \\\"Click on annealing temperature -\\u003e options, and
        check the gradient checkbox.\\\"\\n            check \\\"Set the annealing
        temperature range to be #{pcr[:bins].first}-#{pcr[:bins].last} C.\\\"\\n            note
        \\\"Cancel this PCR batch if something doesn't look right, for example if
        the thermocycler does not allow this temperature range.\\\"\\n            select
        [\\\"yes\\\", \\\"no\\\"], var: \\\"batching_bad\\\", label: \\\"Cancel this
        batch?\\\", default: 1\\n            note \\\"The following stripwells are
        ordered front to back.\\\"\\n            \\n            pcr[:stripwells].map.with_index
        do |sw, idx|\\n              temp = pcr[:ops_by_bin].keys[idx].to_f\\n              check
        \\\"Place the stripwell #{sw} into a row of the thermocycler with the temperature
        as close as possible to \\u003cb\\u003e#{temp} C\\u003c/b\\u003e\\\"\\n            end\\n
        \           get \\\"text\\\", var: \\\"name\\\", label: \\\"Enter the name
        of the thermocycler used\\\", default: \\\"TC1\\\"\\n          end\\n          check
        \\\"Set the 4th time (extension time) to be #{pcr[:mm]}:#{pcr[:ss]}.\\\"\\n
        \         check \\\"Press 'Run' and select 50 uL.\\\"\\n        end\\n        \\n
        \       impossible_pcr_handler(pcr) if resp.get_response(:batching_bad) ==
        \\\"yes\\\"\\n        \\n        # set the location of the stripwell\\n        pcr[:stripwells].flatten.each
        do |sw|\\n          sw.move resp[:name]\\n        end\\n      end\\n  end\\n
        \ \\n  def impossible_pcr_handler(pcr)\\n      pcr[:ops_by_bin].each do |bin,
        ops|\\n          ops.each do |op|\\n            op.error :batching_issue,
        \\\"We weren't able to batch this operation into a running thermocycler for
        this Job, try again.\\\"\\n          end\\n      end\\n      pcr[:stripwells].each
        do |sw|\\n          sw.mark_as_deleted\\n      end\\n      \\n      show do\\n
        \       title 'Reaction Canceled'\\n        note \\\"All operations in this
        pcr reaction are canceled, try them again in a seperate job.\\\"\\n        note
        \\\"The other Reactions will go forward as planned.\\\"\\n      end\\n  end\\n\\n
        \ def log_bin_info pcr\\n    show do\\n      title \\\"bin info\\\"\\n      note
        \\\"ops_by_bin\\\"\\n      pcr[:ops_by_bin].each do |bin, ops|\\n        opids
        = ops.map { |op| op.id }\\n        check \\\"#{bin.to_s}  =\\u003e  #{opids.to_s}\\\"\\n
        \     end\\n\\n      note \\\"bins\\\"\\n      pcr[:bins].each do |bin|\\n
        \       check \\\"#{bin.to_s}\\\"\\n      end\\n    end\\n  end\\nend\",\"parent_id\":1460,\"parent_class\":\"OperationType\",\"created_at\":\"2018-10-31T13:35:28.000-07:00\",\"updated_at\":\"2018-10-31T13:35:28.000-07:00\",\"user_id\":192},{\"id\":89426,\"name\":\"protocol\",\"content\":\"#
        Devin Strickland\\n# dvn.strcklnd@gmail.com\\n#\\n# makes 96-well Primer Plate
        collection item from IDT spreadsheet (saved as .csv)\\n\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\nneeds \\\"Standard Libs/Debug\\\"\\nneeds \\\"Standard
        Libs/MatrixTools\\\"\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\nneeds
        \\\"Next Gen Prep/PrimerPlateHelper\\\"\\n\\nclass Protocol\\n\\n    include
        UploadHelper, Debug, MatrixTools, AssociationManagement\\n    include PrimerPlateHelper\\n\\n
        \   # I/O\\n    CONCENTRATION = \\\"Concentration\\\"\\n\\n    # upload stuff\\n
        \   DIRNAME = \\\"Unknown\\\"\\n    TRIES = 3\\n    NUM_FILES = 1\\n\\n    #
        IDT file format stuff\\n    NAME = \\\"Sequence Name\\\"\\n    POS = \\\"Well
        Position\\\"\\n    SEQ = \\\"Sequence\\\"\\n\\n    # Sample\\n    PROJECT
        = \\\"Primer plate\\\" # project description in Sample definition\\n    PRIMER
        = \\\"Primer\\\" # type of Sample\\n    PRIMER_PLATE = \\\"96-Well Primer
        Plate\\\"\\n\\n    MY_DEBUG = true\\n\\n    def main\\n        \\n        operations.each
        do |op|\\n            \\n            if debug \\u0026\\u0026 MY_DEBUG\\n                upload
        = nil\\n                vendor_description = CSV.parse(CSV_DEBUG)\\n            else\\n
        \               uploads = uploadData(DIRNAME, NUM_FILES, TRIES)\\n                upload
        = uploads.first\\n                vendor_description = CSV.read(open(upload.url))\\n
        \           end\\n            \\n            vendor_description = format_data(vendor_description)\\n
        \           \\n            find_or_create_primers(vendor_description)\\n            \\n
        \           primer_plate = Collection.new_collection(PRIMER_PLATE)\\n            \\n
        \           matrix = WellMatrix.create_empty(96, Collection::EMPTY)\\n            \\n
        \           vendor_description.each do |md|\\n                matrix.set(md[POS],
        md[\\\"Sample\\\"].id)\\n            end\\n            \\n            primer_plate.associate_matrix(matrix.to_array)\\n
        \           associate_data(primer_plate, 'vendor_description', upload)\\n
        \           associate_data(primer_plate, 'concentration', op.input(CONCENTRATION).val)\\n
        \           \\n            show {\\n                title \\\"Primer Plate
        Creation Successful!\\\"\\n                note \\\"Please label the #{PRIMER_PLATE}
        with Item ID #{primer_plate}.\\\"\\n            }\\n            \\n        end\\n
        \       \\n        operations.store\\n        \\n        return {}\\n\\n    end\\n\\n
        \   def find_or_create_primers(vendor_description)\\n        sample_type =
        SampleType.find_by_name(PRIMER)\\n            \\n        vendor_description.each
        do |md|\\n            sample = Sample.where(name: md[NAME], sample_type: sample_type).first\\n
        \           if sample\\n                found_sequence = sample.properties[\\\"Overhang
        Sequence\\\"].to_s + sample.properties[\\\"Anneal Sequence\\\"].to_s\\n                unless
        found_sequence =~ /^#{md[SEQ]}$/i\\n                    raise \\\"Aq entry
        found for #{md[NAME]}, but sequences do not match.\\\"\\n                end\\n
        \           else\\n                desc = \\\"Created automatically as part
        of Sales Order ##{md[\\\"Sales Order #\\\"]}.\\\"\\n                sample_attr
        = {\\n                    sample_type_id: sample_type.id,\\n                    description:
        desc,\\n                    name: md[NAME],\\n                    project:
        PROJECT,\\n                    field_values: [\\n                      { name:
        \\\"Anneal Sequence\\\", value: md[SEQ] },\\n                      { name:
        \\\"Overhang Sequence\\\", value: \\\"\\\" },\\n                      { name:
        \\\"T Anneal\\\", value: md[\\\"Tm\\\"] }\\n                    ]\\n                }\\n
        \               sample = Sample.creator(sample_attr, op.plan.user)\\n                inspect
        sample\\n                inspect sample.properties[\\\"Overhang Sequence\\\"].to_s\\n
        \               inspect sample.properties[\\\"Anneal Sequence\\\"].to_s\\n
        \               inspect sample.properties[\\\"T Anneal\\\"].to_s\\n            end\\n
        \           md[\\\"Sample\\\"] = sample\\n        end\\n    end\\n\\n    def
        format_data(vendor_description)\\n        headers = vendor_description.shift\\n
        \       formatted = []\\n        \\n        vendor_description.each do |row|\\n
        \           row = row.map do |cell|\\n                cell.gsub(\\\"\\\\\\\"\\\",\\\"\\\").gsub('\\\\xEF\\\\xBB\\\\xBF','').gsub(\\\"[\\\",\\\"\\\").gsub(\\\"]\\\",\\\"\\\").strip
        if cell.respond_to?(:strip)\\n            end\\n            row = Hash[headers.zip(row)]\\n
        \           \\n            if row['Sequence'].blank? || row[NAME].blank?\\n
        \               raise \\\"Name or Sequence Missing:\\\\n#{row}\\\"\\n            end\\n
        \           \\n            row['Sequence'] = row['Sequence'].gsub(/\\\\s+/,
        '')\\n            formatted.append(row)\\n        end\\n        \\n        formatted\\n
        \   end\\n\\nend\\n\",\"parent_id\":1320,\"parent_class\":\"OperationType\",\"created_at\":\"2018-10-31T10:59:20.000-07:00\",\"updated_at\":\"2018-10-31T10:59:20.000-07:00\",\"user_id\":185},{\"id\":89425,\"name\":\"protocol\",\"content\":\"#
        Devin Strickland\\n# dvn.strcklnd@gmail.com\\n#\\n# makes 96-well Primer Plate
        collection item from IDT spreadsheet (saved as .csv)\\n\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\nneeds \\\"Standard Libs/Debug\\\"\\nneeds \\\"Standard
        Libs/MatrixTools\\\"\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\nneeds
        \\\"Next Gen Prep/PrimerPlateHelper\\\"\\n\\nclass Protocol\\n\\n    include
        UploadHelper, Debug, MatrixTools, AssociationManagement\\n    include PrimerPlateHelper\\n\\n
        \   # I/O\\n    CONCENTRATION = \\\"Concentration\\\"\\n\\n    # upload stuff\\n
        \   DIRNAME = \\\"Unknown\\\"\\n    TRIES = 3\\n    NUM_FILES = 1\\n\\n    #
        IDT file format stuff\\n    NAME = \\\"Sequence Name\\\"\\n    POS = \\\"Well
        Position\\\"\\n    SEQ = \\\"Sequence\\\"\\n\\n    # Sample\\n    PROJECT
        = \\\"Primer plate\\\" # project description in Sample definition\\n    PRIMER
        = \\\"Primer\\\" # type of Sample\\n    PRIMER_PLATE = \\\"96-Well Primer
        Plate\\\"\\n\\n    MY_DEBUG = true\\n\\n    def main\\n        \\n        operations.each
        do |op|\\n            \\n            if debug \\u0026\\u0026 MY_DEBUG\\n                upload
        = nil\\n                vendor_description = CSV.parse(CSV_DEBUG)\\n            else\\n
        \               uploads = uploadData(DIRNAME, NUM_FILES, TRIES)\\n                upload
        = uploads.first\\n                vendor_description = CSV.read(open(upload.url))\\n
        \           end\\n            \\n            vendor_description = format_data(vendor_description)\\n
        \           \\n            find_or_create_primers(vendor_description)\\n            \\n
        \           primer_plate = Collection.new_collection(PRIMER_PLATE)\\n            \\n
        \           matrix = WellMatrix.create_empty(96, Collection::EMPTY)\\n            \\n
        \           vendor_description.each do |md|\\n                matrix.set(md[POS],
        md[\\\"Sample\\\"].id)\\n            end\\n            \\n            primer_plate.associate_matrix(matrix.to_array)\\n
        \           associate_data(primer_plate, :vendor_description, upload)\\n            associate_data(primer_plate,
        :concentration, op.input(CONCENTRATION).val)\\n            \\n            show
        {\\n                title \\\"Primer Plate Creation Successful!\\\"\\n                note
        \\\"Please label the #{PRIMER_PLATE} with Item ID #{primer_plate}.\\\"\\n
        \           }\\n            \\n        end\\n        \\n        operations.store\\n
        \       \\n        return {}\\n\\n    end\\n\\n    def find_or_create_primers(vendor_description)\\n
        \       sample_type = SampleType.find_by_name(PRIMER)\\n            \\n        vendor_description.each
        do |md|\\n            sample = Sample.where(name: md[NAME], sample_type: sample_type).first\\n
        \           if sample\\n                found_sequence = sample.properties[\\\"Overhang
        Sequence\\\"].to_s + sample.properties[\\\"Anneal Sequence\\\"].to_s\\n                unless
        found_sequence =~ /^#{md[SEQ]}$/i\\n                    raise \\\"Aq entry
        found for #{md[NAME]}, but sequences do not match.\\\"\\n                end\\n
        \           else\\n                desc = \\\"Created automatically as part
        of Sales Order ##{md[\\\"Sales Order #\\\"]}.\\\"\\n                sample_attr
        = {\\n                    sample_type_id: sample_type.id,\\n                    description:
        desc,\\n                    name: md[NAME],\\n                    project:
        PROJECT,\\n                    field_values: [\\n                      { name:
        \\\"Anneal Sequence\\\", value: md[SEQ] },\\n                      { name:
        \\\"Overhang Sequence\\\", value: \\\"\\\" },\\n                      { name:
        \\\"T Anneal\\\", value: md[\\\"Tm\\\"] }\\n                    ]\\n                }\\n
        \               sample = Sample.creator(sample_attr, op.plan.user)\\n                inspect
        sample\\n                inspect sample.properties[\\\"Overhang Sequence\\\"].to_s\\n
        \               inspect sample.properties[\\\"Anneal Sequence\\\"].to_s\\n
        \               inspect sample.properties[\\\"T Anneal\\\"].to_s\\n            end\\n
        \           md[\\\"Sample\\\"] = sample\\n        end\\n    end\\n\\n    def
        format_data(vendor_description)\\n        headers = vendor_description.shift\\n
        \       formatted = []\\n        \\n        vendor_description.each do |row|\\n
        \           row = row.map do |cell|\\n                cell.gsub(\\\"\\\\\\\"\\\",\\\"\\\").gsub('\\\\xEF\\\\xBB\\\\xBF','').gsub(\\\"[\\\",\\\"\\\").gsub(\\\"]\\\",\\\"\\\").strip
        if cell.respond_to?(:strip)\\n            end\\n            row = Hash[headers.zip(row)]\\n
        \           \\n            if row['Sequence'].blank? || row[NAME].blank?\\n
        \               raise \\\"Name or Sequence Missing:\\\\n#{row}\\\"\\n            end\\n
        \           \\n            row['Sequence'] = row['Sequence'].gsub(/\\\\s+/,
        '')\\n            formatted.append(row)\\n        end\\n        \\n        formatted\\n
        \   end\\n\\nend\\n\",\"parent_id\":1320,\"parent_class\":\"OperationType\",\"created_at\":\"2018-10-31T10:46:12.000-07:00\",\"updated_at\":\"2018-10-31T10:46:12.000-07:00\",\"user_id\":185},{\"id\":89424,\"name\":\"protocol\",\"content\":\"#
        Devin Strickland\\n# dvn.strcklnd@gmail.com\\n#\\n# makes 96-well Primer Plate
        collection item from IDT spreadsheet (saved as .csv)\\n\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\nneeds \\\"Standard Libs/Debug\\\"\\nneeds \\\"Standard
        Libs/MatrixTools\\\"\\nneeds \\\"Next Gen Prep/PrimerPlateHelper\\\"\\n\\nclass
        Protocol\\n\\n    include UploadHelper, Debug, MatrixTools\\n    include PrimerPlateHelper\\n\\n
        \   # I/O\\n    CONCENTRATION = \\\"Concentration\\\"\\n\\n    # upload stuff\\n
        \   DIRNAME = \\\"Unknown\\\"\\n    TRIES = 3\\n    NUM_FILES = 1\\n\\n    #
        IDT file format stuff\\n    NAME = \\\"Sequence Name\\\"\\n    POS = \\\"Well
        Position\\\"\\n    SEQ = \\\"Sequence\\\"\\n\\n    # Sample\\n    PROJECT
        = \\\"Primer plate\\\" # project description in Sample definition\\n    PRIMER
        = \\\"Primer\\\" # type of Sample\\n    PRIMER_PLATE = \\\"96-Well Primer
        Plate\\\"\\n\\n    MY_DEBUG = true\\n\\n    def main\\n        \\n        operations.each
        do |op|\\n            \\n            if debug \\u0026\\u0026 MY_DEBUG\\n                uploads
        = [nil]\\n                mfr_description = CSV.parse(CSV_DEBUG)\\n            else\\n
        \               uploads = uploadData(DIRNAME, NUM_FILES, TRIES)\\n                mfr_description
        = CSV.read(open(uploads[0].url))\\n            end\\n            \\n            mfr_description
        = format_data(mfr_description)\\n            \\n            find_or_create_primers(mfr_description)\\n
        \           \\n            primer_plate = Collection.new_collection(PRIMER_PLATE)\\n
        \           \\n            matrix = WellMatrix.create_empty(96, Collection::EMPTY)\\n
        \           \\n            mfr_description.each do |md|\\n                matrix.set(md[POS],
        md[\\\"Sample\\\"].id)\\n            end\\n            \\n            primer_plate.associate_matrix(matrix.to_array)\\n
        \           \\n            primer_plate.associate(:upload, uploads[0])\\n
        \           primer_plate.associate(:concentration, op.input(CONCENTRATION).val)\\n
        \           \\n            show {\\n                title \\\"Primer Plate
        Creation Successful!\\\"\\n                note \\\"Please label the #{PRIMER_PLATE}
        with Item ID #{primer_plate}.\\\"\\n            }\\n            \\n        end\\n
        \       \\n        operations.store\\n        \\n        return {}\\n\\n    end\\n\\n
        \   def find_or_create_primers(mfr_description)\\n        sample_type = SampleType.find_by_name(PRIMER)\\n
        \           \\n        mfr_description.each do |md|\\n            sample =
        Sample.where(name: md[NAME], sample_type: sample_type).first\\n            if
        sample\\n                found_sequence = sample.properties[\\\"Overhang Sequence\\\"].to_s
        + sample.properties[\\\"Anneal Sequence\\\"].to_s\\n                unless
        found_sequence =~ /^#{md[SEQ]}$/i\\n                    raise \\\"Aq entry
        found for #{md[NAME]}, but sequences do not match.\\\"\\n                end\\n
        \           else\\n                desc = \\\"Created automatically as part
        of Sales Order ##{md[\\\"Sales Order #\\\"]}.\\\"\\n                sample_attr
        = {\\n                    sample_type_id: sample_type.id,\\n                    description:
        desc,\\n                    name: md[NAME],\\n                    project:
        PROJECT,\\n                    field_values: [\\n                      { name:
        \\\"Anneal Sequence\\\", value: md[SEQ] },\\n                      { name:
        \\\"Overhang Sequence\\\", value: \\\"\\\" },\\n                      { name:
        \\\"T Anneal\\\", value: md[\\\"Tm\\\"] }\\n                    ]\\n                }\\n
        \               sample = Sample.creator(sample_attr, op.plan.user)\\n                inspect
        sample\\n                inspect sample.properties[\\\"Overhang Sequence\\\"].to_s\\n
        \               inspect sample.properties[\\\"Anneal Sequence\\\"].to_s\\n
        \               inspect sample.properties[\\\"T Anneal\\\"].to_s\\n            end\\n
        \           md[\\\"Sample\\\"] = sample\\n        end\\n    end\\n\\n    def
        format_data(mfr_description)\\n        headers = mfr_description.shift\\n
        \       formatted = []\\n        \\n        mfr_description.each do |row|\\n
        \           row = row.map do |cell|\\n                cell.gsub(\\\"\\\\\\\"\\\",\\\"\\\").gsub('\\\\xEF\\\\xBB\\\\xBF','').gsub(\\\"[\\\",\\\"\\\").gsub(\\\"]\\\",\\\"\\\").strip
        if cell.respond_to?(:strip)\\n            end\\n            row = Hash[headers.zip(row)]\\n
        \           \\n            if row['Sequence'].blank? || row[NAME].blank?\\n
        \               raise \\\"Name or Sequence Missing:\\\\n#{row}\\\"\\n            end\\n
        \           \\n            row['Sequence'] = row['Sequence'].gsub(/\\\\s+/,
        '')\\n            formatted.append(row)\\n        end\\n        \\n        formatted\\n
        \   end\\n\\nend\\n\",\"parent_id\":1320,\"parent_class\":\"OperationType\",\"created_at\":\"2018-10-31T10:31:02.000-07:00\",\"updated_at\":\"2018-10-31T10:31:02.000-07:00\",\"user_id\":185},{\"id\":89423,\"name\":\"protocol\",\"content\":\"#
        Devin Strickland\\n# dvn.strcklnd@gmail.com\\n#\\n# makes 96-well Primer Plate
        collection item from IDT spreadsheet (saved as .csv)\\n\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\nneeds \\\"Standard Libs/Debug\\\"\\nneeds \\\"Standard
        Libs/MatrixTools\\\"\\nneeds \\\"Next Gen Prep/PrimerPlateHelper\\\"\\n\\nclass
        Protocol\\n\\n    include UploadHelper, Debug, MatrixTools\\n    include PrimerPlateHelper\\n\\n
        \   # I/O\\n    CONCENTRATION = \\\"Concentration\\\"\\n\\n    # upload stuff\\n
        \   DIRNAME = \\\"Unknown\\\"\\n    TRIES = 3\\n    NUM_FILES = 1\\n\\n    #
        IDT file format stuff\\n    NAME = \\\"Sequence Name\\\"\\n    POS = \\\"Well
        Position\\\"\\n    SEQ = \\\"Sequence\\\"\\n\\n    # Sample\\n    PROJECT
        = \\\"Primer plate\\\" # project description in Sample definition\\n    PRIMER
        = \\\"Primer\\\" # type of Sample\\n    PRIMER_PLATE = \\\"96-Well Primer
        Plate\\\"\\n\\n    MY_DEBUG = true\\n\\n    def main\\n        \\n        operations.each
        do |op|\\n            \\n            if debug \\u0026\\u0026 MY_DEBUG\\n                uploads
        = [nil]\\n                mfr_description = CSV.parse(CSV_DEBUG)\\n            else\\n
        \               uploads = uploadData(DIRNAME, NUM_FILES, TRIES)\\n                mfr_description
        = CSV.read(open(uploads[0].url))\\n            end\\n            \\n            mfr_description
        = format_data(mfr_description)\\n            \\n            find_or_create_primers(mfr_description)\\n
        \           \\n            primer_plate = Collection.new_collection(PRIMER_PLATE)\\n
        \           \\n            matrix = WellMatrix.create_empty(96, Collection::EMPTY)\\n
        \           \\n            mfr_description.each do |md|\\n                matrix.set(md[POS],
        md[\\\"Sample\\\"].id)\\n            end\\n            \\n            primer_plate.associate_matrix(matrix.to_array)\\n
        \           \\n            primer_plate.associate(:csv_upload, uploads[0])\\n
        \           primer_plate.associate(:concentration, op.input(CONCENTRATION).val)\\n
        \           \\n            show {\\n                title \\\"Primer Plate
        Creation Successful!\\\"\\n                note \\\"Please label the #{PRIMER_PLATE}
        with Item ID #{primer_plate}.\\\"\\n            }\\n            \\n        end\\n
        \       \\n        operations.store\\n        \\n        return {}\\n\\n    end\\n\\n
        \   def find_or_create_primers(mfr_description)\\n        sample_type = SampleType.find_by_name(PRIMER)\\n
        \           \\n        mfr_description.each do |md|\\n            sample =
        Sample.where(name: md[NAME], sample_type: sample_type).first\\n            if
        sample\\n                found_sequence = sample.properties[\\\"Overhang Sequence\\\"].to_s
        + sample.properties[\\\"Anneal Sequence\\\"].to_s\\n                unless
        found_sequence =~ /^#{md[SEQ]}$/i\\n                    raise \\\"Aq entry
        found for #{md[NAME]}, but sequences do not match.\\\"\\n                end\\n
        \           else\\n                desc = \\\"Created automatically as part
        of Sales Order ##{md[\\\"Sales Order #\\\"]}.\\\"\\n                sample_attr
        = {\\n                    sample_type_id: sample_type.id,\\n                    description:
        desc,\\n                    name: md[NAME],\\n                    project:
        PROJECT,\\n                    field_values: [\\n                      { name:
        \\\"Anneal Sequence\\\", value: md[SEQ] },\\n                      { name:
        \\\"Overhang Sequence\\\", value: \\\"\\\" },\\n                      { name:
        \\\"T Anneal\\\", value: md[\\\"Tm\\\"] }\\n                    ]\\n                }\\n
        \               sample = Sample.creator(sample_attr, op.plan.user)\\n                inspect
        sample\\n                inspect sample.properties[\\\"Overhang Sequence\\\"].to_s\\n
        \               inspect sample.properties[\\\"Anneal Sequence\\\"].to_s\\n
        \               inspect sample.properties[\\\"T Anneal\\\"].to_s\\n            end\\n
        \           md[\\\"Sample\\\"] = sample\\n        end\\n    end\\n\\n    def
        format_data(mfr_description)\\n        headers = mfr_description.shift\\n
        \       formatted = []\\n        \\n        mfr_description.each do |row|\\n
        \           row = row.map do |cell|\\n                cell.gsub(\\\"\\\\\\\"\\\",\\\"\\\").gsub('\\\\xEF\\\\xBB\\\\xBF','').gsub(\\\"[\\\",\\\"\\\").gsub(\\\"]\\\",\\\"\\\").strip
        if cell.respond_to?(:strip)\\n            end\\n            row = Hash[headers.zip(row)]\\n
        \           \\n            if row['Sequence'].blank? || row[NAME].blank?\\n
        \               raise \\\"Name or Sequence Missing:\\\\n#{row}\\\"\\n            end\\n
        \           \\n            row['Sequence'] = row['Sequence'].gsub(/\\\\s+/,
        '')\\n            formatted.append(row)\\n        end\\n        \\n        formatted\\n
        \   end\\n\\nend\\n\",\"parent_id\":1320,\"parent_class\":\"OperationType\",\"created_at\":\"2018-10-31T10:21:47.000-07:00\",\"updated_at\":\"2018-10-31T10:21:47.000-07:00\",\"user_id\":185},{\"id\":89422,\"name\":\"source\",\"content\":\"module
        Enrich_cDNA_Fragments\\n    include Units\\n    def library_type(collection)\\n
        \       # This may have an issue with distiguishing different sample types
        in the same collection\\n        sample_type = Sample.where({\\\"id\\\": collection.matrix.flatten.select
        {|s_id| s_id != -1}}).to_a.map {|s| s.sample_type.name }.uniq.first\\n        library_type
        = (sample_type == \\\"Yeast Strain\\\") ? \\\"cDNA\\\" : \\\"DNA\\\"\\n        return
        library_type\\n    end\\n\\n    def gather_defrost_amplification_materials(collections_to_defrost)\\n
        \       # Gather the frozen plate so that it is defrosted by the time all
        the reagents are prepped\\n        take collections_to_defrost, interactive:
        true\\n        \\n        num_ops = operations.length\\n        reagents_hash
        = {\\n            'PCR Master Mix (PMM)'=\\u003e '1-2 tube(s)',\\n            'PCR
        Primer Cocktail (PPC)'=\\u003e'1-2 tube(s)',\\n            'Resuspension Buffer
        (RSB)' =\\u003e'1-2 tube(s)',\\n            'Freshly prepared 80% Ethanol'=\\u003e
        reagent_vol_with_extra(num_ops, 400),\\n            'AMPure XP Beads'=\\u003e
        reagent_vol_with_extra(num_ops, 50)\\n        }\\n        show do\\n            title
        \\\"Gather the following materials:\\\"\\n            separator\\n            note
        \\\"Let the following reagents thaw at room temperature, then immediately
        place on ice\\\"\\n            reagents_hash.each {|k, v| (k.include? 'PCR')
        ? (check \\\"#{k}\\\") : nil}\\n            note \\\"\\\\n\\\"\\n            note
        \\\"Gather the following materials:\\\"\\n            etoh_vol = reagents_hash['Freshly
        prepared 80% Ethanol']\\n            check \\\"Make 80% EtOH =\\u003e #{etoh_vol
        * 0.8}#{MICROLITERS} of 100% EtOH + #{etoh_vol * 0.2}#{MICROLITERS} of MG
        H2O\\\"\\n            check \\\"\\u003cb\\u003e1\\u003c/b\\u003e - 96 Well
        PCR Plate(s)\\\"\\n            check \\\"\\u003cb\\u003e1\\u003c/b\\u003e
        - 96 Well MIDI 0.8mL Plate(s)\\\"\\n            check \\\"\\u003cb\\u003e3\\u003c/b\\u003e
        - Adhesive Seals\\\"\\n        end\\n    end\\n    \\n    def make_pcr_master_mix()\\n
        \       num_ops = operations.length\\n        pmm_vol = 25 * num_ops\\n        ppc_vol
        = 5 * num_ops\\n        master_mix_vol = pmm_vol + ppc_vol\\n        (master_mix_vol
        \\u003e 1501) ? tubes = 2 : tubes = 1\\n        (master_mix_vol \\u003e 1501)
        ? aliquot = [pmm_vol/2, ppc_vol/2] : aliquot = [pmm_vol, ppc_vol]\\n        show
        do \\n          title \\\"Create PCR Master Mix\\\"\\n          separator\\n
        \         check \\\"Ensure that #{'PCR Master Mix (PMM)'} \\u0026 #{'PCR Primer
        Cocktail (PPC)'} are defrosted\\\"\\n          check \\\"Gather \\u003cb\\u003e#{tubes}\\u003c/b\\u003e
        1.5mL microfuge tube(s) \\u0026 label: \\u003cb\\u003eMM\\u003c/b\\u003e.\\\"\\n
        \         check \\\"In each of the microfuge tube(s), aliquot \\u003cb\\u003e#{aliquot[0]}#{MICROLITERS}
        of PMM\\u003c/b\\u003e \\u0026 \\u003cb\\u003e#{aliquot[1]}#{MICROLITERS}
        of PPC\\u003c/b\\u003e\\\"\\n          bullet \\\"Mix throughly by pipetting,
        use a multichannel pipette where possible.\\\"\\n        end\\n    end\\n
        \   \\n    def add_pcr_master_mix(collection)\\n        library_type = library_type(collection)\\n
        \       if collection.get_non_empty.length \\u003e 18\\n            sw, sw_vol_mat,
        rc_list = multichannel_vol_stripwell(collection)\\n            show do\\n
        \               title \\\"Aliquot PCR Master Mix for Multichannel\\\"\\n                separator\\n
        \               note \\\"Follow the table to aliquot the PCR Master Mix into
        a stripwell for the next step:\\\"\\n                bullet \\\"The maximum
        volume in a stripwell well is 300#{MICROLITERS}\\\"\\n                table
        highlight_alpha_rc(sw, rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*30}#{MICROLITERS}\\\"}\\n
        \           end\\n            sw.mark_as_deleted\\n            sw.save\\n
        \       end\\n        show do\\n            title \\\"Aliquoting PCR MM to
        Indexed #{library_type} Libraries\\\"\\n            separator\\n            check
        \\\"Ensure samples in plate \\u003cb\\u003e#{collection}\\u003c/b\\u003e are
        thawed.\\\"\\n            note \\\"Follow the table to aliquot the PCR Master
        Mix to the appropriate wells:\\\"\\n            bullet \\\"Mix throughly by
        pipetting 5 times\\\"\\n            table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{30}#{MICROLITERS}\\\"}\\n            check \\\"Finally, seal plate and
        centrifuge briefly at 280 x g for 30 sec\\\"\\n        end\\n    end\\n\\n
        \   def incubate_enrich_pcr_plate(collection)\\n        show do\\n          title
        \\\"Incubate Enrichment PCR Plate #{collection}\\\"\\n          separator\\n
        \         note \\\"Place sealed plate on thermocycler \\u0026 Run: \\u003cb\\u003eEnrich\\u003c/b\\u003e\\\"\\n
        \         note \\\"Thermocycler Conditions:\\\"\\n          bullet \\\"Pre-heat
        lid to 100\xB0C\\\"\\n          bullet \\\"98\xB0C for 30 seconds\\\"\\n          note
        \\\"15 Cycles of:\\\"\\n          bullet \\\"98\xB0C for 10 seconds\\\"\\n
        \         bullet \\\"60\xB0C for 30 seconds\\\"\\n          bullet \\\"72\xB0C
        for 30 seconds\\\"\\n          bullet \\\"72\xB0C for 5 minutes\\\"\\n          note
        \\\"\\\"\\n          bullet \\\"Hold at 4\xB0C\\\"\\n        end\\n    end\\n
        \   def clean_up_enrich_pcr(collection)\\n        library_type = library_type(collection)\\n
        \       if collection.get_non_empty.length \\u003e 19\\n            sw, sw_vol_mat,
        rc_list = multichannel_vol_stripwell(collection)\\n            show do\\n
        \               title \\\"Aliquot AMPure XP Beads for Multichannel\\\"\\n
        \               separator\\n                check \\\"Vortex the AMPure Beads
        for at least 1 minute or until they are well dispersed.\\\"\\n                note
        \\\"Follow the table to aliquot the AMPure XP Beads into a stripwell for the
        next step:\\\"\\n                bullet \\\"The maximum volume in a stripwell
        well is 300#{MICROLITERS}\\\"\\n                table highlight_alpha_rc(sw,
        rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*47.5}#{MICROLITERS}\\\"}\\n            end\\n
        \           sw.mark_as_deleted\\n            sw.save\\n        end\\n        show
        do\\n            title \\\"Adding AMPure XP Beads to 96 Well MIDI Plate\\\"\\n
        \           separator\\n            check \\\"Gather a new, clean \\u003cb\\u003e96
        Well MIDI 0.8mL Plate\\u003c/b\\u003e and label: \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n
        \           note \\\"Follow the table below to aliquot the \\u003cb\\u003eAMPure
        Beads\\u003c/b\\u003e to the appropriate wells of the new plate:\\\"\\n            bullet
        \\\"Mix by pipetting up and down 10 times.\\\"\\n            table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{47.5}#{MICROLITERS}\\\"}\\n            note \\\"Continue on to the next
        step\\\"\\n        end\\n        show do\\n            title \\\"Transfering
        Enriched #{library_type} Libraries\\\"\\n            separator\\n            check
        \\\"Once the thermocycler has finished, transfer entire contents of plate
        \\u003cb\\u003e#{collection}\\u003c/b\\u003e to the correspoding well of the
        \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n            bullet
        \\\"Mix throughly by pipetting 10 times\\\"\\n            check \\\"Incubate
        plate at room temperature for 15 mins\\\"\\n            check \\\"Centrifuge
        plate at 280 x g for 1 min\\\"\\n            check \\\"Place plate on magnetic
        stand for 5 mins\\\"\\n        end\\n        show do\\n            title \\\"Clean
        Up Enriched #{library_type} Libraries\\\"\\n            separator\\n            warning
        \\\"WITH THE PLATE ON THE MAGNETIC STAND\\\"\\n            check \\\"Remove
        and discard 95#{MICROLITERS} of supernatant from each well of \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n
        \       end\\n        washes = 1\\n        (2).times do\\n            show
        do \\n                title \\\"Washing Enriched #{library_type} Libraries
        (#{washes}/2)\\\"\\n                separator\\n                note \\\"With
        the \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e on the magnetic stand,
        add \\u003cb\\u003e200#{MICROLITERS}\\u003c/b\\u003e of 80% EtOH\\\"\\n                warning
        \\\"DO NOT DISTURB THE BEADS!\\\"\\n                table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{200}#{MICROLITERS}\\\"}\\n                check \\\"Incubate for 30
        secs\\\"\\n            end\\n            show do \\n                title
        \\\"Washing Enriched #{library_type} Libraries\\\"\\n                separator\\n
        \               warning \\\"DO NOT DISTURB THE BEADS!\\\"\\n                check
        \\\"Remove and discard all of the supernatant from each well\\\"\\n            end\\n
        \           \\n            if washes == 2\\n                show do \\n                    title
        \\\"Drying Enriched #{library_type} Libraries\\\"\\n                    separator\\n
        \                   check \\\"Seal plate with a Aera Breathable seal\\\"\\n
        \                   check \\\"Let samples air-dry at room temperature for
        10 mins\\\"\\n                    bullet \\\"Place plate on plate rotator
        to expidite process and ensure drying\\\"\\n                end\\n            end\\n
        \           washes += 1\\n        end\\n        \\n        if collection.get_non_empty.length
        \\u003e 17\\n            sw, sw_vol_mat, rc_list = multichannel_vol_stripwell(collection)\\n
        \           show do\\n                title \\\"Aliquot Resuspension Buffer
        (RSB) for Multichannel\\\"\\n                separator\\n                note
        \\\"Follow the table to aliquot the Resuspension Buffer (RSB) into a stripwell
        for the next step:\\\"\\n                bullet \\\"The maximum volume in
        a stripwell well is 300#{MICROLITERS}\\\"\\n                table highlight_alpha_rc(sw,
        rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*32.5}#{MICROLITERS}\\\"}\\n            end\\n
        \           sw.mark_as_deleted\\n            sw.save\\n        end\\n        \\n
        \       show do\\n            title \\\"Eluting Indexed #{library_type} Libaries\\\"\\n
        \           separator\\n            check \\\"Remove \\u003c/b\\u003eCleanUp_#{collection}\\u003c/b\\u003e
        from magnetic plate.\\\"\\n            note \\\"Follow the table to aliquot
        Resuspension Buffer to the appropriate wells:\\\"\\n            bullet \\\"Mix
        throughly by pipetting until the beads are dispersed!\\\"\\n            table
        highlight_alpha_non_empty(collection){|r,c| \\\"#{32.5}#{MICROLITERS}\\\"}\\n
        \           check \\\"Seal plate \\u0026 incubate at room temperature for
        2 mins\\\"\\n            check \\\"Next, place plate on magnetic stand and
        incubate for 5 mins\\\"\\n            note \\\"Continue to next step while
        incubating.\\\"\\n        end\\n    end\\n    \\n    def transfer_clean_cDNA(collection)\\n
        \       library_type = library_type(collection)\\n        show do\\n            title
        \\\"Transfer clean #{library_type}\\\"\\n            separator\\n            check
        \\\"Gather a new, clean \\u003cb\\u003e96 Well PCR Plate\\u003c/b\\u003e and
        label: \\u003cb\\u003e#{collection}\\u003c/b\\u003e\\\"\\n            warning
        \\\"WITH THE PLATE ON THE MAGNETIC STAND\\\"\\n            check \\\"Transfer
        \\u003cb\\u003e30#{MICROLITERS}\\u003c/b\\u003e from each well of \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e
        to the corresponding  well of the new \\u003cb\\u003e#{collection}\\u003c/b\\u003e\\\"\\n
        \       end\\n        collection.location = \\\"-20\xB0C NGSeq Section\\\"\\n
        \       collection.save\\n    end\\n    \\nend # Module Enrich_cDNA_Fragments\\n\",\"parent_id\":201,\"parent_class\":\"Library\",\"created_at\":\"2018-10-30T21:44:14.000-07:00\",\"updated_at\":\"2018-10-30T21:44:14.000-07:00\",\"user_id\":192},{\"id\":89421,\"name\":\"source\",\"content\":\"module
        Enrich_cDNA_Fragments\\n    include Units\\n    def library_type(collection)\\n
        \       # This may have an issue with distiguishing different sample types
        in the same collection\\n        sample_type = Sample.where({\\\"id\\\": collection.matrix.flatten.select
        {|s_id| s_id != -1}}).to_a.map {|s| s.sample_type.name }.uniq.first\\n        library_type
        = (sample_type == \\\"Yeast Strain\\\") ? \\\"cDNA\\\" : \\\"DNA\\\"\\n        return
        library_type\\n    end\\n\\n    def gather_defrost_amplification_materials(collections_to_defrost)\\n
        \       # Gather the frozen plate so that it is defrosted by the time all
        the reagents are prepped\\n        take collections_to_defrost, interactive:
        true\\n        \\n        num_ops = operations.length\\n        reagents_hash
        = {\\n            'PCR Master Mix (PMM)'=\\u003e '1-2 tube(s)',\\n            'PCR
        Primer Cocktail (PPC)'=\\u003e'1-2 tube(s)',\\n            'Resuspension Buffer
        (RSB)' =\\u003e'1-2 tube(s)',\\n            'Freshly prepared 80% Ethanol'=\\u003e
        reagent_vol_with_extra(num_ops, 400),\\n            'AMPure XP Beads'=\\u003e
        reagent_vol_with_extra(num_ops, 50)\\n        }\\n        show do\\n            title
        \\\"Gather the following materials:\\\"\\n            separator\\n            note
        \\\"Let the following reagents thaw at room temperature, then immediately
        place on ice\\\"\\n            reagents_hash.each {|k, v| (k.include? 'PCR')
        ? (check \\\"#{k}\\\") : nil}\\n            note \\\"\\\\n\\\"\\n            note
        \\\"Gather the following materials:\\\"\\n            etoh_vol = reagents_hash['Freshly
        prepared 80% Ethanol']\\n            check \\\"Make 80% EtOH =\\u003e #{etoh_vol
        * 0.8}#{MICROLITERS} of 100% EtOH + #{etoh_vol * 0.2}#{MICROLITERS} of MG
        H2O\\\"\\n            check \\\"\\u003cb\\u003e1\\u003c/b\\u003e - 96 Well
        PCR Plate(s)\\\"\\n            check \\\"\\u003cb\\u003e1\\u003c/b\\u003e
        - 96 Well MIDI 0.8mL Plate(s)\\\"\\n            check \\\"\\u003cb\\u003e3\\u003c/b\\u003e
        - Adhesive Seals\\\"\\n        end\\n    end\\n    \\n    def make_pcr_master_mix()\\n
        \       num_ops = operations.length\\n        pmm_vol = 25 * num_ops\\n        ppc_vol
        = 5 * num_ops\\n        master_mix_vol = pmm_vol + ppc_vol\\n        (master_mix_vol
        \\u003e 1501) ? tubes = 2 : tubes = 1\\n        (master_mix_vol \\u003e 1501)
        ? aliquot = [pmm_vol/2, ppc_vol/2] : aliquot = [pmm_vol, ppc_vol]\\n        show
        do \\n          title \\\"Create PCR Master Mix\\\"\\n          separator\\n
        \         check \\\"Ensure that #{'PCR Master Mix (PMM)'} \\u0026 #{'PCR Primer
        Cocktail (PPC)'} are defrosted\\\"\\n          check \\\"Gather \\u003cb\\u003e#{tubes}\\u003c/b\\u003e
        1.5mL microfuge tube(s) \\u0026 label: \\u003cb\\u003eMM\\u003c/b\\u003e.\\\"\\n
        \         check \\\"In each of the microfuge tube(s), aliquot \\u003cb\\u003e#{aliquot[0]}#{MICROLITERS}
        of PMM\\u003c/b\\u003e \\u0026 \\u003cb\\u003e#{aliquot[1]}#{MICROLITERS}
        of PPC\\u003c/b\\u003e\\\"\\n          bullet \\\"Mix throughly by pipetting,
        use a multichannel pipette where possible.\\\"\\n        end\\n    end\\n
        \   \\n    def add_pcr_master_mix(collection)\\n        library_type = library_type(collection)\\n
        \       if collection.get_non_empty.length \\u003e 18\\n            sw, sw_vol_mat,
        rc_list = multichannel_vol_stripwell(collection)\\n            show do\\n
        \               title \\\"Aliquot PCR Master Mix for Multichannel\\\"\\n                separator\\n
        \               note \\\"Follow the table to aliquot the PCR Master Mix into
        a stripwell for the next step:\\\"\\n                bullet \\\"The maximum
        volume in a stripwell well is 300#{MICROLITERS}\\\"\\n                table
        highlight_alpha_rc(sw, rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*30}#{MICROLITERS}\\\"}\\n
        \           end\\n            sw.mark_as_deleted\\n            sw.save\\n
        \       end\\n        show do\\n            title \\\"Aliquoting PCR MM to
        Indexed #{library_type} Libraries\\\"\\n            separator\\n            check
        \\\"Ensure samples in plate \\u003cb\\u003e#{collection}\\u003c/b\\u003e are
        thawed.\\\"\\n            note \\\"Follow the table to aliquot the PCR Master
        Mix to the appropriate wells:\\\"\\n            bullet \\\"Mix throughly by
        pipetting 5 times\\\"\\n            table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{30}#{MICROLITERS}\\\"}\\n            check \\\"Finally, seal plate and
        centrifuge briefly at 280 x g for 30 sec\\\"\\n        end\\n    end\\n\\n
        \   def incubate_enrich_pcr_plate(collection)\\n        show do\\n          title
        \\\"Incubate Enrichment PCR Plate #{collection}\\\"\\n          separator\\n
        \         note \\\"Place sealed plate on thermocycler \\u0026 Run: \\u003cb\\u003eEnrich\\u003c/b\\u003e\\\"\\n
        \         note \\\"Thermocycler Conditions:\\\"\\n          bullet \\\"Pre-heat
        lid to 100\xB0C\\\"\\n          bullet \\\"98\xB0C for 30 seconds\\\"\\n          note
        \\\"15 Cycles of:\\\"\\n          bullet \\\"98\xB0C for 10 seconds\\\"\\n
        \         bullet \\\"60\xB0C for 30 seconds\\\"\\n          bullet \\\"72\xB0C
        for 30 seconds\\\"\\n          bullet \\\"72\xB0C for 5 minutes\\\"\\n          note
        \\\"\\\"\\n          bullet \\\"Hold at 4\xB0C\\\"\\n        end\\n    end\\n
        \   def clean_up_enrich_pcr(collection)\\n        library_type = library_type(collection)\\n
        \       if collection.get_non_empty.length \\u003e 19\\n            sw, sw_vol_mat,
        rc_list = multichannel_vol_stripwell(collection)\\n            show do\\n
        \               title \\\"Aliquot AMPure XP Beads for Multichannel\\\"\\n
        \               separator\\n                check \\\"Vortex the AMPure Beads
        for at least 1 minute or until they are well dispersed.\\\"\\n                note
        \\\"Follow the table to aliquot the AMPure XP Beads into a stripwell for the
        next step:\\\"\\n                bullet \\\"The maximum volume in a stripwell
        well is 300#{MICROLITERS}\\\"\\n                table highlight_alpha_rc(sw,
        rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*47.5}#{MICROLITERS}\\\"}\\n            end\\n
        \           sw.mark_as_deleted\\n            sw.save\\n        end\\n        show
        do\\n            title \\\"Adding AMPure XP Beads to 96 Well MIDI Plate\\\"\\n
        \           separator\\n            check \\\"Gather a new, clean \\u003cb\\u003e96
        Well MIDI 0.8mL Plate\\u003c/b\\u003e and label: \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n
        \           note \\\"Follow the table below to aliquot the \\u003cb\\u003eAMPure
        Beads\\u003c/b\\u003e to the appropriate wells of the new plate:\\\"\\n            bullet
        \\\"Mix by pipetting up and down 10 times.\\\"\\n            table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{47.5}#{MICROLITERS}\\\"}\\n            note \\\"Continue on to the next
        step\\\"\\n        end\\n        show do\\n            title \\\"Transfering
        Enriched #{library_type} Libraries\\\"\\n            separator\\n            check
        \\\"Once the thermocycler has finished, transfer entire contents of plate
        \\u003cb\\u003e#{collection}\\u003c/b\\u003e to the correspoding well of the
        \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n            bullet
        \\\"Mix throughly by pipetting 10 times\\\"\\n            check \\\"Incubate
        plate at room temperature for 15 mins\\\"\\n            check \\\"Centrifuge
        plate at 280 x g for 1 min\\\"\\n            check \\\"Place plate on magnetic
        stand for 5 mins\\\"\\n        end\\n        show do\\n            title \\\"Clean
        Up Enriched #{library_type} Libraries\\\"\\n            separator\\n            warning
        \\\"WITH THE PLATE ON THE MAGNETIC STAND\\\"\\n            check \\\"Remove
        and discard 95#{MICROLITERS} of supernatant from each well of \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n
        \       end\\n        washes = 1\\n        (2).times do\\n            show
        do \\n                title \\\"Washing Enriched #{library_type} Libraries
        (#{washes}/2)\\\"\\n                separator\\n                note \\\"With
        the \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e on the magnetic stand,
        add \\u003cb\\u003e200#{MICROLITERS}\\u003c/b\\u003e of 80% EtOH\\\"\\n                warning
        \\\"DO NOT DISTURB THE BEADS!\\\"\\n                table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{200}#{MICROLITERS}\\\"}\\n                check \\\"Incubate for 30
        secs\\\"\\n            end\\n            show do \\n                title
        \\\"Washing Enriched #{library_type} Libraries\\\"\\n                separator\\n
        \               warning \\\"DO NOT DISTURB THE BEADS!\\\"\\n                check
        \\\"Remove and discard all of the supernatant from each well\\\"\\n            end\\n
        \           \\n            if washes == 2\\n                show do \\n                    title
        \\\"Drying Enriched #{library_type} Libraries\\\"\\n                    separator\\n
        \                   check \\\"Seal plate with a Aera Breathable seal\\\"\\n
        \                   check \\\"Let samples air-dry at room temperature for
        10 mins\\\"\\n                    bullet \\\"Place plate on plate rotator
        to expidite process and ensure drying\\\"\\n                end\\n            end\\n
        \           washes += 1\\n        end\\n        \\n        if collection.get_non_empty.length
        \\u003e 19\\n            sw, sw_vol_mat, rc_list = multichannel_vol_stripwell(collection)\\n
        \           show do\\n                title \\\"Aliquot Resuspension Buffer
        (RSB) for Multichannel\\\"\\n                separator\\n                note
        \\\"Follow the table to aliquot the Resuspension Buffer (RSB) into a stripwell
        for the next step:\\\"\\n                bullet \\\"The maximum volume in
        a stripwell well is 300#{MICROLITERS}\\\"\\n                table highlight_alpha_rc(sw,
        rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*32.5}#{MICROLITERS}\\\"}\\n            end\\n
        \           sw.mark_as_deleted\\n            sw.save\\n        end\\n        \\n
        \       show do\\n            title \\\"Eluting Indexed #{library_type} Libaries\\\"\\n
        \           separator\\n            check \\\"Remove \\u003c/b\\u003eCleanUp_#{collection}\\u003c/b\\u003e
        from magnetic plate.\\\"\\n            note \\\"Follow the table to aliquot
        Resuspension Buffer to the appropriate wells:\\\"\\n            bullet \\\"Mix
        throughly by pipetting until the beads are dispersed!\\\"\\n            table
        highlight_alpha_non_empty(collection){|r,c| \\\"#{32.5}#{MICROLITERS}\\\"}\\n
        \           check \\\"Seal plate \\u0026 incubate at room temperature for
        2 mins\\\"\\n            check \\\"Next, place plate on magnetic stand and
        incubate for 5 mins\\\"\\n            note \\\"Continue to next step while
        incubating.\\\"\\n        end\\n    end\\n    \\n    def transfer_clean_cDNA(collection)\\n
        \       library_type = library_type(collection)\\n        show do\\n            title
        \\\"Transfer clean #{library_type}\\\"\\n            separator\\n            check
        \\\"Gather a new, clean \\u003cb\\u003e96 Well PCR Plate\\u003c/b\\u003e and
        label: \\u003cb\\u003e#{collection}\\u003c/b\\u003e\\\"\\n            warning
        \\\"WITH THE PLATE ON THE MAGNETIC STAND\\\"\\n            check \\\"Transfer
        \\u003cb\\u003e30#{MICROLITERS}\\u003c/b\\u003e from each well of \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e
        to the corresponding  well of the new \\u003cb\\u003e#{collection}\\u003c/b\\u003e\\\"\\n
        \       end\\n        collection.location = \\\"-20\xB0C NGSeq Section\\\"\\n
        \       collection.save\\n    end\\n    \\nend # Module Enrich_cDNA_Fragments\\n\",\"parent_id\":201,\"parent_class\":\"Library\",\"created_at\":\"2018-10-30T21:43:27.000-07:00\",\"updated_at\":\"2018-10-30T21:43:27.000-07:00\",\"user_id\":192},{\"id\":89420,\"name\":\"source\",\"content\":\"module
        Enrich_cDNA_Fragments\\n    include Units\\n    def library_type(collection)\\n
        \       # This may have an issue with distiguishing different sample types
        in the same collection\\n        sample_type = Sample.where({\\\"id\\\": collection.matrix.flatten.select
        {|s_id| s_id != -1}}).to_a.map {|s| s.sample_type.name }.uniq.first\\n        library_type
        = (sample_type == \\\"Yeast Strain\\\") ? \\\"cDNA\\\" : \\\"DNA\\\"\\n        return
        library_type\\n    end\\n\\n    def gather_defrost_amplification_materials(collections_to_defrost)\\n
        \       # Gather the frozen plate so that it is defrosted by the time all
        the reagents are prepped\\n        take collections_to_defrost, interactive:
        true\\n        \\n        num_ops = operations.length\\n        reagents_hash
        = {\\n            'PCR Master Mix (PMM)'=\\u003e '1-2 tube(s)',\\n            'PCR
        Primer Cocktail (PPC)'=\\u003e'1-2 tube(s)',\\n            'Resuspension Buffer
        (RSB)' =\\u003e'1-2 tube(s)',\\n            'Freshly prepared 80% Ethanol'=\\u003e
        reagent_vol_with_extra(num_ops, 400),\\n            'AMPure XP Beads'=\\u003e
        reagent_vol_with_extra(num_ops, 50)\\n            \\n        }\\n        show
        do\\n            title \\\"Gather the following materials:\\\"\\n            separator\\n
        \           note \\\"Let the following reagents thaw at room temperature,
        then immediately place on ice\\\"\\n            reagents_hash.each {|k, v|
        (k.include? 'PCR') ? (check \\\"#{k}\\\") : nil}\\n            note \\\"\\\\n\\\"\\n
        \           note \\\"Gather the following materials:\\\"\\n            etoh_vol
        = reagents_hash['Freshly prepared 80% Ethanol']\\n            check \\\"Make
        80% EtOH =\\u003e #{etoh_vol * 0.8}#{MICROLITERS} of 100% EtOH + #{etoh_vol
        * 0.2}#{MICROLITERS} of MG H2O\\\"\\n            check \\\"\\u003cb\\u003e1\\u003c/b\\u003e
        - 96 Well PCR Plate(s)\\\"\\n            check \\\"\\u003cb\\u003e1\\u003c/b\\u003e
        - 96 Well MIDI 0.8mL Plate(s)\\\"\\n            check \\\"\\u003cb\\u003e3\\u003c/b\\u003e
        - Adhesive Seals\\\"\\n        end\\n    end\\n    \\n    def make_pcr_master_mix()\\n
        \       num_ops = operations.length\\n        pmm_vol = 25 * num_ops\\n        ppc_vol
        = 5 * num_ops\\n        master_mix_vol = pmm_vol + ppc_vol\\n        (master_mix_vol
        \\u003e 1501) ? tubes = 2 : tubes = 1\\n        (master_mix_vol \\u003e 1501)
        ? aliquot = [pmm_vol/2, ppc_vol/2] : aliquot = [pmm_vol, ppc_vol]\\n        show
        do \\n          title \\\"Create PCR Master Mix\\\"\\n          separator\\n
        \         check \\\"Ensure that #{'PCR Master Mix (PMM)'} \\u0026 #{'PCR Primer
        Cocktail (PPC)'} are defrosted\\\"\\n          check \\\"Gather \\u003cb\\u003e#{tubes}\\u003c/b\\u003e
        1.5mL microfuge tube(s) \\u0026 label: \\u003cb\\u003eMM\\u003c/b\\u003e.\\\"\\n
        \         check \\\"In each of the microfuge tube(s), aliquot \\u003cb\\u003e#{aliquot[0]}#{MICROLITERS}
        of PMM\\u003c/b\\u003e \\u0026 \\u003cb\\u003e#{aliquot[1]}#{MICROLITERS}
        of PPC\\u003c/b\\u003e\\\"\\n          bullet \\\"Mix throughly by pipetting,
        use a multichannel pipette where possible.\\\"\\n        end\\n    end\\n
        \   \\n    def add_pcr_master_mix(collection)\\n        library_type = library_type(collection)\\n
        \       if collection.get_non_empty.length \\u003e 18\\n            sw, sw_vol_mat,
        rc_list = multichannel_vol_stripwell(collection)\\n            show do\\n
        \               title \\\"Aliquot PCR Master Mix for Multichannel\\\"\\n                separator\\n
        \               note \\\"Follow the table to aliquot the PCR Master Mix into
        a stripwell for the next step:\\\"\\n                bullet \\\"The maximum
        volume in a stripwell well is 300#{MICROLITERS}\\\"\\n                table
        highlight_alpha_rc(sw, rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*30}#{MICROLITERS}\\\"}\\n
        \           end\\n            sw.mark_as_deleted\\n            sw.save\\n
        \       end\\n        show do\\n            title \\\"Aliquoting PCR MM to
        Indexed #{library_type} Libraries\\\"\\n            separator\\n            check
        \\\"Ensure samples in plate \\u003cb\\u003e#{collection}\\u003c/b\\u003e are
        thawed.\\\"\\n            note \\\"Follow the table to aliquot the PCR Master
        Mix to the appropriate wells:\\\"\\n            bullet \\\"Mix throughly by
        pipetting 5 times\\\"\\n            table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{30}#{MICROLITERS}\\\"}\\n            check \\\"Finally, seal plate and
        centrifuge briefly at 280 x g for 30 sec\\\"\\n        end\\n    end\\n\\n
        \   def incubate_enrich_pcr_plate(collection)\\n        show do\\n          title
        \\\"Incubate Enrichment PCR Plate #{collection}\\\"\\n          separator\\n
        \         note \\\"Place sealed plate on thermocycler \\u0026 Run: \\u003cb\\u003eEnrich\\u003c/b\\u003e\\\"\\n
        \         note \\\"Thermocycler Conditions:\\\"\\n          bullet \\\"Pre-heat
        lid to 100\xB0C\\\"\\n          bullet \\\"98\xB0C for 30 seconds\\\"\\n          note
        \\\"15 Cycles of:\\\"\\n          bullet \\\"98\xB0C for 10 seconds\\\"\\n
        \         bullet \\\"60\xB0C for 30 seconds\\\"\\n          bullet \\\"72\xB0C
        for 30 seconds\\\"\\n          bullet \\\"72\xB0C for 5 minutes\\\"\\n          note
        \\\"\\\"\\n          bullet \\\"Hold at 4\xB0C\\\"\\n        end\\n    end\\n
        \   def clean_up_enrich_pcr(collection)\\n        library_type = library_type(collection)\\n
        \       if collection.get_non_empty.length \\u003e 19\\n            sw, sw_vol_mat,
        rc_list = multichannel_vol_stripwell(collection)\\n            show do\\n
        \               title \\\"Aliquot AMPure XP Beads for Multichannel\\\"\\n
        \               separator\\n                check \\\"Vortex the AMPure Beads
        for at least 1 minute or until they are well dispersed.\\\"\\n                note
        \\\"Follow the table to aliquot the AMPure XP Beads into a stripwell for the
        next step:\\\"\\n                bullet \\\"The maximum volume in a stripwell
        well is 300#{MICROLITERS}\\\"\\n                table highlight_alpha_rc(sw,
        rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*47.5}#{MICROLITERS}\\\"}\\n            end\\n
        \           sw.mark_as_deleted\\n            sw.save\\n        end\\n        show
        do\\n            title \\\"Adding AMPure XP Beads to 96 Well MIDI Plate\\\"\\n
        \           separator\\n            check \\\"Gather a new, clean \\u003cb\\u003e96
        Well MIDI 0.8mL Plate\\u003c/b\\u003e and label: \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n
        \           note \\\"Follow the table below to aliquot the \\u003cb\\u003eAMPure
        Beads\\u003c/b\\u003e to the appropriate wells of the new plate:\\\"\\n            bullet
        \\\"Mix by pipetting up and down 10 times.\\\"\\n            table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{47.5}#{MICROLITERS}\\\"}\\n            note \\\"Continue on to the next
        step\\\"\\n        end\\n        show do\\n            title \\\"Transfering
        Enriched #{library_type} Libraries\\\"\\n            separator\\n            check
        \\\"Once the thermocycler has finished, transfer entire contents of plate
        \\u003cb\\u003e#{collection}\\u003c/b\\u003e to the correspoding well of the
        \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n            bullet
        \\\"Mix throughly by pipetting 10 times\\\"\\n            check \\\"Incubate
        plate at room temperature for 15 mins\\\"\\n            check \\\"Centrifuge
        plate at 280 x g for 1 min\\\"\\n            check \\\"Place plate on magnetic
        stand for 5 mins\\\"\\n        end\\n        show do\\n            title \\\"Clean
        Up Enriched #{library_type} Libraries\\\"\\n            separator\\n            warning
        \\\"WITH THE PLATE ON THE MAGNETIC STAND\\\"\\n            check \\\"Remove
        and discard 95#{MICROLITERS} of supernatant from each well of \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n
        \       end\\n        washes = 1\\n        (2).times do\\n            show
        do \\n                title \\\"Washing Enriched #{library_type} Libraries
        (#{washes}/2)\\\"\\n                separator\\n                note \\\"With
        the \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e on the magnetic stand,
        add \\u003cb\\u003e200#{MICROLITERS}\\u003c/b\\u003e of 80% EtOH\\\"\\n                warning
        \\\"DO NOT DISTURB THE BEADS!\\\"\\n                table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{200}#{MICROLITERS}\\\"}\\n                check \\\"Incubate for 30
        secs\\\"\\n            end\\n            show do \\n                title
        \\\"Washing Enriched #{library_type} Libraries\\\"\\n                separator\\n
        \               warning \\\"DO NOT DISTURB THE BEADS!\\\"\\n                check
        \\\"Remove and discard all of the supernatant from each well\\\"\\n            end\\n
        \           \\n            if washes == 2\\n                show do \\n                    title
        \\\"Drying Enriched #{library_type} Libraries\\\"\\n                    separator\\n
        \                   check \\\"Seal plate with a Aera Breathable seal\\\"\\n
        \                   check \\\"Let samples air-dry at room temperature for
        10 mins\\\"\\n                    bullet \\\"Place plate on plate rotator
        to expidite process and ensure drying\\\"\\n                end\\n            end\\n
        \           washes += 1\\n        end\\n        \\n        if collection.get_non_empty.length
        \\u003e 19\\n            sw, sw_vol_mat, rc_list = multichannel_vol_stripwell(collection)\\n
        \           show do\\n                title \\\"Aliquot Resuspension Buffer
        (RSB) for Multichannel\\\"\\n                separator\\n                note
        \\\"Follow the table to aliquot the Resuspension Buffer (RSB) into a stripwell
        for the next step:\\\"\\n                bullet \\\"The maximum volume in
        a stripwell well is 300#{MICROLITERS}\\\"\\n                table highlight_alpha_rc(sw,
        rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*32.5}#{MICROLITERS}\\\"}\\n            end\\n
        \           sw.mark_as_deleted\\n            sw.save\\n        end\\n        \\n
        \       show do\\n            title \\\"Eluting Indexed #{library_type} Libaries\\\"\\n
        \           separator\\n            check \\\"Remove \\u003c/b\\u003eCleanUp_#{collection}\\u003c/b\\u003e
        from magnetic plate.\\\"\\n            note \\\"Follow the table to aliquot
        Resuspension Buffer to the appropriate wells:\\\"\\n            bullet \\\"Mix
        throughly by pipetting until the beads are dispersed!\\\"\\n            table
        highlight_alpha_non_empty(collection){|r,c| \\\"#{32.5}#{MICROLITERS}\\\"}\\n
        \           check \\\"Seal plate \\u0026 incubate at room temperature for
        2 mins\\\"\\n            check \\\"Next, place plate on magnetic stand and
        incubate for 5 mins\\\"\\n            note \\\"Continue to next step while
        incubating.\\\"\\n        end\\n    end\\n    \\n    def transfer_clean_cDNA(collection)\\n
        \       library_type = library_type(collection)\\n        show do\\n            title
        \\\"Transfer clean #{library_type}\\\"\\n            separator\\n            check
        \\\"Gather a new, clean \\u003cb\\u003e96 Well PCR Plate\\u003c/b\\u003e and
        label: \\u003cb\\u003e#{collection}\\u003c/b\\u003e\\\"\\n            warning
        \\\"WITH THE PLATE ON THE MAGNETIC STAND\\\"\\n            check \\\"Transfer
        \\u003cb\\u003e30#{MICROLITERS}\\u003c/b\\u003e from each well of \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e
        to the corresponding  well of the new \\u003cb\\u003e#{collection}\\u003c/b\\u003e\\\"\\n
        \       end\\n        collection.location = \\\"-20\xB0C NGSeq Section\\\"\\n
        \       collection.save\\n    end\\n    \\nend # Module Enrich_cDNA_Fragments\\n\",\"parent_id\":201,\"parent_class\":\"Library\",\"created_at\":\"2018-10-30T21:37:41.000-07:00\",\"updated_at\":\"2018-10-30T21:37:41.000-07:00\",\"user_id\":192},{\"id\":89419,\"name\":\"source\",\"content\":\"module
        Enrich_cDNA_Fragments\\n    include Units\\n    def library_type(collection)\\n
        \       # This may have an issue with distiguishing different sample types
        in the same collection\\n        sample_type = Sample.where({\\\"id\\\": collection.matrix.flatten.select
        {|s_id| s_id != -1}}).to_a.map {|s| s.sample_type.name }.uniq.first\\n        library_type
        = (sample_type == \\\"Yeast Strain\\\") ? \\\"cDNA\\\" : \\\"DNA\\\"\\n        return
        library_type\\n    end\\n\\n    def gather_defrost_amplification_materials(collections_to_defrost)\\n
        \       # Gather the frozen plate so that it is defrosted by the time all
        the reagents are prepped\\n        take collections_to_defrost, interactive:
        true\\n        \\n        num_ops = operations.length\\n        reagents_hash
        = {\\n            'PCR Master Mix (PMM)'=\\u003e '1-2 tube(s)',\\n            'PCR
        Primer Cocktail (PPC)'=\\u003e'1-2 tube(s)',\\n            'Resuspension Buffer
        (RSB)' =\\u003e'1-2 tube(s)',\\n            'Freshly prepared 80% Ethanol'=\\u003e
        reagent_vol_with_extra(num_ops, 400),\\n            'AMPure XP Beads'=\\u003e
        reagent_vol_with_extra(num_ops, 50)\\n            \\n        }\\n        show
        do\\n            title \\\"Gather the following materials:\\\"\\n            separator\\n
        \           note \\\"Let the following reagents thaw at room temperature,
        then immediately place on ice\\\"\\n            reagents_hash.each {|k, v|
        (k.include? 'PCR') ? (check \\\"#{k}\\\") : nil}\\n            note \\\"\\\\n\\\"\\n
        \           note \\\"Gather the following materials:\\\"\\n            etoh_vol
        = reagents_hash['Freshly prepared 80% Ethanol']\\n            check \\\"Make
        80% EtOH =\\u003e #{etoh_vol * 0.8}#{MICROLITERS} of 100% EtOH + #{etoh_vol
        * 0.2}#{MICROLITERS} of MG H2O\\\"\\n            check \\\"\\u003cb\\u003e1\\u003c/b\\u003e
        - 96 Well PCR Plate(s)\\\"\\n            check \\\"\\u003cb\\u003e1\\u003c/b\\u003e
        - 96 Well MIDI 0.8mL Plate(s)\\\"\\n            check \\\"\\u003cb\\u003e3\\u003c/b\\u003e
        - Adhesive Seals\\\"\\n        end\\n    end\\n    \\n    def make_pcr_master_mix()\\n
        \       num_ops = operations.length\\n        pmm_vol = 25 * num_ops\\n        ppc_vol
        = 5 * num_ops\\n        master_mix_vol = pmm_vol + ppc_vol\\n        (master_mix_vol
        \\u003e 1501) ? tubes = 2 : tubes = 1\\n        (master_mix_vol \\u003e 1501)
        ? aliquot = [pmm_vol/2, ppc_vol/2] : aliquot = [pmm_vol, ppc_vol]\\n        show
        do \\n          title \\\"Create PCR Master Mix\\\"\\n          separator\\n
        \         check \\\"Ensure that #{'PCR Master Mix (PMM)'} \\u0026 #{'PCR Primer
        Cocktail (PPC)'} are defrosted\\\"\\n          check \\\"Gather \\u003cb\\u003e#{tubes}\\u003c/b\\u003e
        1.5mL microfuge tube(s) \\u0026 label: \\u003cb\\u003eMM\\u003c/b\\u003e.\\\"\\n
        \         check \\\"In each of the microfuge tube(s), aliquot \\u003cb\\u003e#{aliquot[0]}#{MICROLITERS}
        of PMM\\u003c/b\\u003e \\u0026 \\u003cb\\u003e#{aliquot[1]}#{MICROLITERS}
        of PPC\\u003c/b\\u003e\\\"\\n          bullet \\\"Mix throughly by pipetting.\\\"\\n
        \       end\\n    end\\n    \\n    def add_pcr_master_mix(collection)\\n        library_type
        = library_type(collection)\\n        if collection.get_non_empty.length \\u003e
        18\\n            sw, sw_vol_mat, rc_list = multichannel_vol_stripwell(collection)\\n
        \           show do\\n                title \\\"Aliquot PCR Master Mix for
        Multichannel\\\"\\n                separator\\n                note \\\"Follow
        the table to aliquot the PCR Master Mix into a stripwell for the next step:\\\"\\n
        \               bullet \\\"The maximum volume in a stripwell well is 300#{MICROLITERS}\\\"\\n
        \               table highlight_alpha_rc(sw, rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*30}#{MICROLITERS}\\\"}\\n
        \           end\\n            sw.mark_as_deleted\\n            sw.save\\n
        \       end\\n        show do\\n            title \\\"Aliquoting PCR MM to
        Indexed #{library_type} Libraries\\\"\\n            separator\\n            check
        \\\"Ensure samples in plate \\u003cb\\u003e#{collection}\\u003c/b\\u003e are
        thawed.\\\"\\n            note \\\"Follow the table to aliquot the PCR Master
        Mix to the appropriate wells:\\\"\\n            bullet \\\"Mix throughly by
        pipetting 5 times\\\"\\n            table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{30}#{MICROLITERS}\\\"}\\n            check \\\"Finally, seal plate and
        centrifuge briefly at 280 x g for 30 sec\\\"\\n        end\\n    end\\n\\n
        \   def incubate_enrich_pcr_plate(collection)\\n        show do\\n          title
        \\\"Incubate Enrichment PCR Plate #{collection}\\\"\\n          separator\\n
        \         note \\\"Place sealed plate on thermocycler \\u0026 Run: \\u003cb\\u003eEnrich\\u003c/b\\u003e\\\"\\n
        \         note \\\"Thermocycler Conditions:\\\"\\n          bullet \\\"Pre-heat
        lid to 100\xB0C\\\"\\n          bullet \\\"98\xB0C for 30 seconds\\\"\\n          note
        \\\"15 Cycles of:\\\"\\n          bullet \\\"98\xB0C for 10 seconds\\\"\\n
        \         bullet \\\"60\xB0C for 30 seconds\\\"\\n          bullet \\\"72\xB0C
        for 30 seconds\\\"\\n          bullet \\\"72\xB0C for 5 minutes\\\"\\n          note
        \\\"\\\"\\n          bullet \\\"Hold at 4\xB0C\\\"\\n        end\\n    end\\n
        \   def clean_up_enrich_pcr(collection)\\n        library_type = library_type(collection)\\n
        \       if collection.get_non_empty.length \\u003e 19\\n            sw, sw_vol_mat,
        rc_list = multichannel_vol_stripwell(collection)\\n            show do\\n
        \               title \\\"Aliquot AMPure XP Beads for Multichannel\\\"\\n
        \               separator\\n                check \\\"Vortex the AMPure Beads
        for at least 1 minute or until they are well dispersed.\\\"\\n                note
        \\\"Follow the table to aliquot the AMPure XP Beads into a stripwell for the
        next step:\\\"\\n                bullet \\\"The maximum volume in a stripwell
        well is 300#{MICROLITERS}\\\"\\n                table highlight_alpha_rc(sw,
        rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*47.5}#{MICROLITERS}\\\"}\\n            end\\n
        \           sw.mark_as_deleted\\n            sw.save\\n        end\\n        show
        do\\n            title \\\"Adding AMPure XP Beads to 96 Well MIDI Plate\\\"\\n
        \           separator\\n            check \\\"Gather a new, clean \\u003cb\\u003e96
        Well MIDI 0.8mL Plate\\u003c/b\\u003e and label: \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n
        \           note \\\"Follow the table below to aliquot the \\u003cb\\u003eAMPure
        Beads\\u003c/b\\u003e to the appropriate wells of the new plate:\\\"\\n            bullet
        \\\"Mix by pipetting up and down 10 times.\\\"\\n            table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{47.5}#{MICROLITERS}\\\"}\\n            note \\\"Continue on to the next
        step\\\"\\n        end\\n        show do\\n            title \\\"Transfering
        Enriched #{library_type} Libraries\\\"\\n            separator\\n            check
        \\\"Once the thermocycler has finished, transfer entire contents of plate
        \\u003cb\\u003e#{collection}\\u003c/b\\u003e to the correspoding well of the
        \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n            bullet
        \\\"Mix throughly by pipetting 10 times\\\"\\n            check \\\"Incubate
        plate at room temperature for 15 mins\\\"\\n            check \\\"Centrifuge
        plate at 280 x g for 1 min\\\"\\n            check \\\"Place plate on magnetic
        stand for 5 mins\\\"\\n        end\\n        show do\\n            title \\\"Clean
        Up Enriched #{library_type} Libraries\\\"\\n            separator\\n            warning
        \\\"WITH THE PLATE ON THE MAGNETIC STAND\\\"\\n            check \\\"Remove
        and discard 95#{MICROLITERS} of supernatant from each well of \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e\\\"\\n
        \       end\\n        washes = 1\\n        (2).times do\\n            show
        do \\n                title \\\"Washing Enriched #{library_type} Libraries
        (#{washes}/2)\\\"\\n                separator\\n                note \\\"With
        the \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e on the magnetic stand,
        add \\u003cb\\u003e200#{MICROLITERS}\\u003c/b\\u003e of 80% EtOH\\\"\\n                warning
        \\\"DO NOT DISTURB THE BEADS!\\\"\\n                table highlight_alpha_non_empty(collection){|r,c|
        \\\"#{200}#{MICROLITERS}\\\"}\\n                check \\\"Incubate for 30
        secs\\\"\\n            end\\n            show do \\n                title
        \\\"Washing Enriched #{library_type} Libraries\\\"\\n                separator\\n
        \               warning \\\"DO NOT DISTURB THE BEADS!\\\"\\n                check
        \\\"Remove and discard all of the supernatant from each well\\\"\\n            end\\n
        \           \\n            if washes == 2\\n                show do \\n                    title
        \\\"Drying Enriched #{library_type} Libraries\\\"\\n                    separator\\n
        \                   check \\\"Seal plate with a Aera Breathable seal\\\"\\n
        \                   check \\\"Let samples air-dry at room temperature for
        10 mins\\\"\\n                    bullet \\\"Place plate on plate rotator
        to expidite process and ensure drying\\\"\\n                end\\n            end\\n
        \           washes += 1\\n        end\\n        \\n        if collection.get_non_empty.length
        \\u003e 19\\n            sw, sw_vol_mat, rc_list = multichannel_vol_stripwell(collection)\\n
        \           show do\\n                title \\\"Aliquot Resuspension Buffer
        (RSB) for Multichannel\\\"\\n                separator\\n                note
        \\\"Follow the table to aliquot the Resuspension Buffer (RSB) into a stripwell
        for the next step:\\\"\\n                bullet \\\"The maximum volume in
        a stripwell well is 300#{MICROLITERS}\\\"\\n                table highlight_alpha_rc(sw,
        rc_list){|r,c| \\\"#{sw_vol_mat[r][c]*32.5}#{MICROLITERS}\\\"}\\n            end\\n
        \           sw.mark_as_deleted\\n            sw.save\\n        end\\n        \\n
        \       show do\\n            title \\\"Eluting Indexed #{library_type} Libaries\\\"\\n
        \           separator\\n            check \\\"Remove \\u003c/b\\u003eCleanUp_#{collection}\\u003c/b\\u003e
        from magnetic plate.\\\"\\n            note \\\"Follow the table to aliquot
        Resuspension Buffer to the appropriate wells:\\\"\\n            bullet \\\"Mix
        throughly by pipetting until the beads are dispersed!\\\"\\n            table
        highlight_alpha_non_empty(collection){|r,c| \\\"#{32.5}#{MICROLITERS}\\\"}\\n
        \           check \\\"Seal plate \\u0026 incubate at room temperature for
        2 mins\\\"\\n            check \\\"Next, place plate on magnetic stand and
        incubate for 5 mins\\\"\\n            note \\\"Continue to next step while
        incubating.\\\"\\n        end\\n    end\\n    \\n    def transfer_clean_cDNA(collection)\\n
        \       library_type = library_type(collection)\\n        show do\\n            title
        \\\"Transfer clean #{library_type}\\\"\\n            separator\\n            check
        \\\"Gather a new, clean \\u003cb\\u003e96 Well PCR Plate\\u003c/b\\u003e and
        label: \\u003cb\\u003e#{collection}\\u003c/b\\u003e\\\"\\n            warning
        \\\"WITH THE PLATE ON THE MAGNETIC STAND\\\"\\n            check \\\"Transfer
        \\u003cb\\u003e30#{MICROLITERS}\\u003c/b\\u003e from each well of \\u003cb\\u003eCleanUp_#{collection}\\u003c/b\\u003e
        to the corresponding  well of the new \\u003cb\\u003e#{collection}\\u003c/b\\u003e\\\"\\n
        \       end\\n        collection.location = \\\"-20\xB0C NGSeq Section\\\"\\n
        \       collection.save\\n    end\\n    \\nend # Module Enrich_cDNA_Fragments\\n\",\"parent_id\":201,\"parent_class\":\"Library\",\"created_at\":\"2018-10-30T21:32:17.000-07:00\",\"updated_at\":\"2018-10-30T21:32:17.000-07:00\",\"user_id\":192}]"}
    headers:
      Cache-Control: ['max-age=0, private, must-revalidate']
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      Date: ['Thu, 01 Nov 2018 04:13:08 GMT']
      ETag: [W/"098f6102b144a254b6e49d30bb88bfc1"]
      Server: [nginx/1.10.3 (Ubuntu)]
      Set-Cookie: [XSRF-TOKEN=DpxR5MaZS0GKO8Yq9JMG%2F1t%2BRgN%2FU%2BX3guUrfpo7kUxVrAUNYCpuxTjrI%2BGmZtjoJhss4NyoZcb8mQVQMhfDxQ%3D%3D;
          path=/, _aquarium_NURSERY_production_session=bklhanRZQ25OUFZGNTQrc2xFZFE1RVd1emwzcmNhd2RqdmNOUzdsNkhhMlpqSmIyOU1iRzVBRHFURHNlK1lxTzd1M2JNVC8zNHdQTjZPT0loOVBXb3RLWTQxVkNLSVdobkdyclpEWFNReDU5SmpFcEVjZ29CdzFLRGU5NzRucnhuKytyeUl0OTJHcWlkMm1VeHZCU0NUTHJVZWQ3TzZvTXZza2I2c1R6Wi9WTjdic2tKNFR4bEZoRTZOQ2hmS0hSR0IvdWRrM0d6Q0hrcUErQUIzUmhjaFQ3VUJxM3BhNW5kOHkrRm1tMExaSXpTc0dnOUhPZ0ViNVA4bWZoMWpHbHBJcVVRNFM3bkJQSU5rL1B6b3N5cG5LQXRtUHh0b3llSnY1RmxRa2duYjdvdzZOTkRPVENhU1N4c3o2d3lMQlUwNG9sdW9oNXNRU3FFMFJlZ3kxSmZrU3loNitIUlBld01jV01jNGdiSVloUEFBcFBJdk5tenI5NlF4dmNiNm9WdjRZd2szQW56a1dMTUR1UFdhNjh1Ulp2TmJzYngrQS90WWMxdTd5WGxBWT0tLS9HWTRXYlpSaGFqVFJiZEZDaDJpZkE9PQ%3D%3D--19719d267b5e49e1bd80ddfbf109417a32ebf8c1;
          path=/; HttpOnly]
      Vary: [Origin]
      X-Content-Type-Options: [nosniff]
      X-Frame-Options: [SAMEORIGIN]
      X-Request-Id: [6bc35b63-fe84-40c7-808e-3abfad87bfd0]
      X-Runtime: ['0.060586']
      X-XSS-Protection: [1; mode=block]
    status: {code: 200, message: OK}
- request:
    body: '{"model": "Library", "id": 201}'
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['31']
      Content-Type: [application/json]
      Cookie: [XSRF-TOKEN=xZ6egEhh%2BlChVfXVPVD8YDggenvqtv9YVI1kUABHZSqerspp7tLf1BOFEB5vpSJ3RUUQmElNf2kq8Up%2BqGs3ow%3D%3D;
          _aquarium_NURSERY_production_session=WEdBOGo4U21nWnJkZDByZ2ErSE1FeFpEVkE1OVM4ZFJPTFNNcnd5NlhQOWQyQ2lETk1rVDFnYmNwbFBiWnlnMTFkSzQ1ZFkxUklGcE0rMmNnMmZHVm1PWk9LLzNUVTBCd1liZkxDMVBBeXBmaUEwZHJaTjhvWFNsVFpVQ2Zmd3RyQlNWRlV5NytET3BqNUVraGtldXBFQzh2eEx2emF2cDRxM2lJSFM4OEJIZlpXaUNYblMxREZWc0E5ZnJTMlBEVWhkOFVGNDBWbDVacXEvcC92L0cveklUSmdRN0lYalRGbHJMalc1VnZvWkh4SjJvdzUxU25UdXNzQmFPSERadVFEVmZ3Q1dPaEVFZnlwVVpZR2c1Y2F1VVZTN3lrdWV0TDV6Um9vYUxKWHQ2a01tdlAvMEhhUTdKUW5tM3pHRUFiK0lsWjI5SnFTWDJiYVlGclY0RlppQ21MZVRuOUh0T1hvbnZIbHFZWjZVNzdLVGl0aTFFa2tyVytVeHpZMXM3aWZJMDFycENoblZEblBwTEtGcWRKcFVtMFZzWFJ1TkEyNmVlVkdaWFhPYz0tLTZoVW9XMzJuV0doLys5Y3UxNngxOFE9PQ%3D%3D--1cac2424c270f93e630e78a91a59326644cf5ee8;
          remember_token=SLLRrvtYchvNLhWHJR3FVg; remember_token_NURSERY_production=SLLRrvtYchvNLhWHJR3FVg]
      User-Agent: [python-requests/2.20.0]
    method: POST
    uri: http://52.27.43.242:81/json
  response:
    body: {string: '{"id":201,"name":"Enrich_cDNA_Fragments","category":"Illumina
        NGS Libs","created_at":"2018-09-28T10:27:59.000-07:00","updated_at":"2018-09-28T10:28:13.000-07:00"}'}
    headers:
      Cache-Control: ['max-age=0, private, must-revalidate']
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      Date: ['Thu, 01 Nov 2018 04:13:08 GMT']
      ETag: [W/"2457128173bf7ed36564ab13d4b632c2"]
      Server: [nginx/1.10.3 (Ubuntu)]
      Set-Cookie: [XSRF-TOKEN=2lhBajUgJrE9Hw83cYfGHOOKiaa%2B%2FzItKbDtyxXTOsyBaBWDk5MDNY%2FP6vwjchgLnu%2FjRR0EshxXzMPlvf9oRQ%3D%3D;
          path=/, _aquarium_NURSERY_production_session=QkpJOHZtZ1BzemJpRXR6R0g3OXNPVy83TlhZeWg3MUI3YkdGOG4wNnJTMStvajN2OVhZZGVFb0tFc3BOUzdhclcvV2tOUGdBM1paTUFUNzVEcWFWUW1OVWNCOHlDM1NEK3laeE1UY09YclZGaUd3VHBCNWx2QU53TEM5S2tESFJlYWxnR1R1TFFUWWhYUnY4WGZmNWNhcXlqcWNhN211VnNKaGd3enRwbEtZbWtyaUZ2VDFOUngvb0NnWlcrMExubi9ETzFqMkt6Yml4QVp1elU3ZVdDNGR0dE56bW5DNTJiekRoYWRYU1JjZVFpNWllNVRRQjVnVWg3MU9xQmZqZUdwQU1WNGZEeXR2MCs1RE1SQWVxTmhoM0d2K2t6WEw2UnFGVTV2aU41c1RQTXh3OHNKa3p4bU15Y3RmZlFUMCtKK0NqNkpJUjBiNVFIYUxpdnhpSmVyVEhpSGlkeitPcHp5OUlEMWZsbmNZK0RmY01hZGNqWnJRM1plVSt6U1oxYkdNdDFWT04yVlc1amV5U29TblhnSUQvUlU3MzFVTHB1UEN6TTBueWk0ND0tLUFKYlJ5bUZZenNRcXJpdXhnZmNSY3c9PQ%3D%3D--3ee2a3318eb0549e80e6602f6b7be86460cd965d;
          path=/; HttpOnly]
      Vary: [Origin]
      X-Content-Type-Options: [nosniff]
      X-Frame-Options: [SAMEORIGIN]
      X-Request-Id: [e19bdcb3-139d-4878-802c-3ee7392a41ff]
      X-Runtime: ['0.003789']
      X-XSS-Protection: [1; mode=block]
    status: {code: 200, message: OK}
- request:
    body: '{"model": "Library", "id": 201}'
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['31']
      Content-Type: [application/json]
      Cookie: [XSRF-TOKEN=xZ6egEhh%2BlChVfXVPVD8YDggenvqtv9YVI1kUABHZSqerspp7tLf1BOFEB5vpSJ3RUUQmElNf2kq8Up%2BqGs3ow%3D%3D;
          _aquarium_NURSERY_production_session=WEdBOGo4U21nWnJkZDByZ2ErSE1FeFpEVkE1OVM4ZFJPTFNNcnd5NlhQOWQyQ2lETk1rVDFnYmNwbFBiWnlnMTFkSzQ1ZFkxUklGcE0rMmNnMmZHVm1PWk9LLzNUVTBCd1liZkxDMVBBeXBmaUEwZHJaTjhvWFNsVFpVQ2Zmd3RyQlNWRlV5NytET3BqNUVraGtldXBFQzh2eEx2emF2cDRxM2lJSFM4OEJIZlpXaUNYblMxREZWc0E5ZnJTMlBEVWhkOFVGNDBWbDVacXEvcC92L0cveklUSmdRN0lYalRGbHJMalc1VnZvWkh4SjJvdzUxU25UdXNzQmFPSERadVFEVmZ3Q1dPaEVFZnlwVVpZR2c1Y2F1VVZTN3lrdWV0TDV6Um9vYUxKWHQ2a01tdlAvMEhhUTdKUW5tM3pHRUFiK0lsWjI5SnFTWDJiYVlGclY0RlppQ21MZVRuOUh0T1hvbnZIbHFZWjZVNzdLVGl0aTFFa2tyVytVeHpZMXM3aWZJMDFycENoblZEblBwTEtGcWRKcFVtMFZzWFJ1TkEyNmVlVkdaWFhPYz0tLTZoVW9XMzJuV0doLys5Y3UxNngxOFE9PQ%3D%3D--1cac2424c270f93e630e78a91a59326644cf5ee8;
          remember_token=SLLRrvtYchvNLhWHJR3FVg; remember_token_NURSERY_production=SLLRrvtYchvNLhWHJR3FVg]
      User-Agent: [python-requests/2.20.0]
    method: POST
    uri: http://52.27.43.242:81/json
  response:
    body: {string: '{"id":201,"name":"Enrich_cDNA_Fragments","category":"Illumina
        NGS Libs","created_at":"2018-09-28T10:27:59.000-07:00","updated_at":"2018-09-28T10:28:13.000-07:00"}'}
    headers:
      Cache-Control: ['max-age=0, private, must-revalidate']
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      Date: ['Thu, 01 Nov 2018 04:13:08 GMT']
      ETag: [W/"2457128173bf7ed36564ab13d4b632c2"]
      Server: [nginx/1.10.3 (Ubuntu)]
      Set-Cookie: [XSRF-TOKEN=XwYNDgpjf6aBh7qf9Ymm%2FEs0%2FY0D%2B4TlMuodG2inPHEENlnnrNBaIjNXX1SnfHjrNlGXbqAABNRMljM1wItu%2BA%3D%3D;
          path=/, _aquarium_NURSERY_production_session=emRWUmprdHJzWkVsaXVZV09MOG1kTG1qZUJQRml6WlRlMlNlZ290Vm10KzROVUZIZ1p5dlBRcHpmN1BSWTJ3bng5YU1OQzhKNSt6Nm1EODBJaDgwNDN6ZjZuUE9wa0R6NEpDdEZ0QTY5VmpoNGlJM0kwRHdXNGs1VW81SkxGcFhuWFlKbm5keVZOWmNia3NRYlhGVjlNM0IwSlhtWjcvdXoxSmR5UlVlT0x4bkt1OGdlVGJ4eVc3RFk4OTFVMktQS0EzK0xHdm4zQ2g2dkJ3ZHVlUzdCdllFYUh5MEYrUzErdzNXd0Z4T3pRYVMvdGFqK3ZXME1RbUt6Sm9LaTE2OGR2clRGUDBrQ1d6bTcraXdLdlVvd3hBcDg1aU1QZE5XdjJTRTN1aTdnVkJYeVJraUI4L0VIeW90dEZ4amdwTUUxYlI4M25OSnU5L0hWWUwrRm5CelBjTmNTZkx0V0JZbkpiZGNiZEg5a2EyenI0YXMxUGtRbE1HVW9EYVlkdTBGWmEvK2hiM21lS3RuS3VyUEREaHlYcytXeFNaN2dIc200eWtnQlNYV3hYRT0tLWxqcWtMRWM1TUdrV0RSTUNleEsvOGc9PQ%3D%3D--e3dea9e94fee3d41ba530fde1e42b47c6741b50c;
          path=/; HttpOnly]
      Vary: [Origin]
      X-Content-Type-Options: [nosniff]
      X-Frame-Options: [SAMEORIGIN]
      X-Request-Id: [b1dbbb35-b522-4b71-abb4-81e21bb950e6]
      X-Runtime: ['0.004204']
      X-XSS-Protection: [1; mode=block]
    status: {code: 200, message: OK}
- request:
    body: '{"model": "Library", "id": 201}'
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['31']
      Content-Type: [application/json]
      Cookie: [XSRF-TOKEN=xZ6egEhh%2BlChVfXVPVD8YDggenvqtv9YVI1kUABHZSqerspp7tLf1BOFEB5vpSJ3RUUQmElNf2kq8Up%2BqGs3ow%3D%3D;
          _aquarium_NURSERY_production_session=WEdBOGo4U21nWnJkZDByZ2ErSE1FeFpEVkE1OVM4ZFJPTFNNcnd5NlhQOWQyQ2lETk1rVDFnYmNwbFBiWnlnMTFkSzQ1ZFkxUklGcE0rMmNnMmZHVm1PWk9LLzNUVTBCd1liZkxDMVBBeXBmaUEwZHJaTjhvWFNsVFpVQ2Zmd3RyQlNWRlV5NytET3BqNUVraGtldXBFQzh2eEx2emF2cDRxM2lJSFM4OEJIZlpXaUNYblMxREZWc0E5ZnJTMlBEVWhkOFVGNDBWbDVacXEvcC92L0cveklUSmdRN0lYalRGbHJMalc1VnZvWkh4SjJvdzUxU25UdXNzQmFPSERadVFEVmZ3Q1dPaEVFZnlwVVpZR2c1Y2F1VVZTN3lrdWV0TDV6Um9vYUxKWHQ2a01tdlAvMEhhUTdKUW5tM3pHRUFiK0lsWjI5SnFTWDJiYVlGclY0RlppQ21MZVRuOUh0T1hvbnZIbHFZWjZVNzdLVGl0aTFFa2tyVytVeHpZMXM3aWZJMDFycENoblZEblBwTEtGcWRKcFVtMFZzWFJ1TkEyNmVlVkdaWFhPYz0tLTZoVW9XMzJuV0doLys5Y3UxNngxOFE9PQ%3D%3D--1cac2424c270f93e630e78a91a59326644cf5ee8;
          remember_token=SLLRrvtYchvNLhWHJR3FVg; remember_token_NURSERY_production=SLLRrvtYchvNLhWHJR3FVg]
      User-Agent: [python-requests/2.20.0]
    method: POST
    uri: http://52.27.43.242:81/json
  response:
    body: {string: '{"id":201,"name":"Enrich_cDNA_Fragments","category":"Illumina
        NGS Libs","created_at":"2018-09-28T10:27:59.000-07:00","updated_at":"2018-09-28T10:28:13.000-07:00"}'}
    headers:
      Cache-Control: ['max-age=0, private, must-revalidate']
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      Date: ['Thu, 01 Nov 2018 04:13:08 GMT']
      ETag: [W/"2457128173bf7ed36564ab13d4b632c2"]
      Server: [nginx/1.10.3 (Ubuntu)]
      Set-Cookie: [XSRF-TOKEN=%2B4pl9U1bjTC3DIM5rSuokdFtK0lrwjUsDZ1BszUg3XagujEc6%2BiotAXcZvL%2F3naGrAhBqsg5tR1z4W%2BdnQyP%2Fw%3D%3D;
          path=/, _aquarium_NURSERY_production_session=bERieVVBOWhQR0N2U2pSQzNsQ1E3TEV6OENOV2IyYlpQNEV0bllUT1BHQkNiUlFWZTQyVmhZb3U5T2p5T0Q0STZlekFweHJ0NUE0NWZwaGY2OHVZWG13NEF1ams4TCtQWFl3dm5hQkRHenBMWlFDQVpUUXN5OVNremExZm0zTnBhL3YycDZUSnFwak8yWEpCa3N5bElSQ29GdGM4aWJvV01VZ29vaDYwT09reGlkVW1udW9wY2VVeGhzOEppTDlQRm9yT3ZzcURxZjFiZVdkNlBnWTBuZzlqK0Z3VjdVakpnR25Nb2l3elhESFVIK1o4eVQ3MTdiNnZHcXZzblU0a3pBNytDUjIwbVE3ODRNY2FURFhFZm5JTXVWS0dCY0djYW1DVGdTVUlWeFBUaUF3SkF6QmFrM0huMXIyLzdlOXd3MGFqYTBkN0Q0OEQvR3FqYytGRzRoR0dQOHd1ekJHUDczRHdhVVltdXRDeGp6Nm5GS2QyRFlvWHlIZ211TGJGWWlzemFtcHhMOENpWWpkZ3FESXJuT29nMTZHdnI3UGJobzhWaHRjS09QTT0tLXF0UXdNblJqdGNCNk9PZ2tVV0I2S2c9PQ%3D%3D--2063e917100c5532a7667ca3fb62b0a03ee4cee9;
          path=/; HttpOnly]
      Vary: [Origin]
      X-Content-Type-Options: [nosniff]
      X-Frame-Options: [SAMEORIGIN]
      X-Request-Id: [f2d7eb6f-c43c-480a-ac55-e8ef7420758f]
      X-Runtime: ['0.003333']
      X-XSS-Protection: [1; mode=block]
    status: {code: 200, message: OK}
- request:
    body: '{"model": "Library", "id": 201}'
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['31']
      Content-Type: [application/json]
      Cookie: [XSRF-TOKEN=xZ6egEhh%2BlChVfXVPVD8YDggenvqtv9YVI1kUABHZSqerspp7tLf1BOFEB5vpSJ3RUUQmElNf2kq8Up%2BqGs3ow%3D%3D;
          _aquarium_NURSERY_production_session=WEdBOGo4U21nWnJkZDByZ2ErSE1FeFpEVkE1OVM4ZFJPTFNNcnd5NlhQOWQyQ2lETk1rVDFnYmNwbFBiWnlnMTFkSzQ1ZFkxUklGcE0rMmNnMmZHVm1PWk9LLzNUVTBCd1liZkxDMVBBeXBmaUEwZHJaTjhvWFNsVFpVQ2Zmd3RyQlNWRlV5NytET3BqNUVraGtldXBFQzh2eEx2emF2cDRxM2lJSFM4OEJIZlpXaUNYblMxREZWc0E5ZnJTMlBEVWhkOFVGNDBWbDVacXEvcC92L0cveklUSmdRN0lYalRGbHJMalc1VnZvWkh4SjJvdzUxU25UdXNzQmFPSERadVFEVmZ3Q1dPaEVFZnlwVVpZR2c1Y2F1VVZTN3lrdWV0TDV6Um9vYUxKWHQ2a01tdlAvMEhhUTdKUW5tM3pHRUFiK0lsWjI5SnFTWDJiYVlGclY0RlppQ21MZVRuOUh0T1hvbnZIbHFZWjZVNzdLVGl0aTFFa2tyVytVeHpZMXM3aWZJMDFycENoblZEblBwTEtGcWRKcFVtMFZzWFJ1TkEyNmVlVkdaWFhPYz0tLTZoVW9XMzJuV0doLys5Y3UxNngxOFE9PQ%3D%3D--1cac2424c270f93e630e78a91a59326644cf5ee8;
          remember_token=SLLRrvtYchvNLhWHJR3FVg; remember_token_NURSERY_production=SLLRrvtYchvNLhWHJR3FVg]
      User-Agent: [python-requests/2.20.0]
    method: POST
    uri: http://52.27.43.242:81/json
  response:
    body: {string: '{"id":201,"name":"Enrich_cDNA_Fragments","category":"Illumina
        NGS Libs","created_at":"2018-09-28T10:27:59.000-07:00","updated_at":"2018-09-28T10:28:13.000-07:00"}'}
    headers:
      Cache-Control: ['max-age=0, private, must-revalidate']
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      Date: ['Thu, 01 Nov 2018 04:13:08 GMT']
      ETag: [W/"2457128173bf7ed36564ab13d4b632c2"]
      Server: [nginx/1.10.3 (Ubuntu)]
      Set-Cookie: [XSRF-TOKEN=6pXhcHYdxfL%2FVhv64YKxA%2FF%2BCmJirUG2ypptfbc1hv%2BxpbWZ0K7gdk2G%2FjGzd28UjBtggcFWwYe05kNTHxnUdg%3D%3D;
          path=/, _aquarium_NURSERY_production_session=eTFwTjJpWWEyTDd2ZUwvYndpbi9BR3JDMFZlcnFVNmpiNyticWM5eGV5NDYxSVB5WWV1b1dzTG53SXNlbFlMY0F1dGZkdHVzT3VoelRGWk9Yeitvd2dBTlNHZ1NFRkhOd1JiMU9UWTZuazVLeDVrVm9qbDE0VHJJcjJjUjVUa0hDSUZQVXorTVA4eHQ3cHc0OHhjWjBSMnUxNUZ3ZTY0YkpGcFd2OWNPMGwrZjJVUDdEZ3hNbDhDUHIxalZMOGRvUU9tRzhqejFBN2VzMXdydzE2TXdrTHpjMCt6R25lV002VWptSDAzVmZHd2tpdDl6U3FveVVLSGlEM1lrTHRDeE1FaE45YkJ3TW40YVloa0lmY09HUWJxMmlqV1hDdUs4MTNvc1I4dXA0aFp5OW1WMFBpV1h6cWpGZWxZcHFZN3BEdGd6VFF5NXNOcXc1RWYxME9zSmN3bmZkK0syU0ZWcHNLN2E4Y1d5aW01MWFvVjVpeDVBajBXblJEa0k1REZQZHlaZVAxbDQyUk0xMktCTlJwVlhZTExBMXo3YWwvWVM2SkZYb3RYNlpNYz0tLWVZcnBxUGx0bkE5cDNlUFBRYWxuV2c9PQ%3D%3D--81560d08896db73e93136df52f05738f929442b9;
          path=/; HttpOnly]
      Vary: [Origin]
      X-Content-Type-Options: [nosniff]
      X-Frame-Options: [SAMEORIGIN]
      X-Request-Id: [4fa68e61-9957-482c-9102-3d417ebd9f96]
      X-Runtime: ['0.002928']
      X-XSS-Protection: [1; mode=block]
    status: {code: 200, message: OK}
- request:
    body: '{"model": "Code", "method": "where", "arguments": {}, "options": {"offset":
      -1, "limit": 1, "reverse": true}}'
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['109']
      Content-Type: [application/json]
      Cookie: [XSRF-TOKEN=FnznZis4%2FqM3BE%2FxdqCWGmlEWsOpa0GHdB1Bl%2FVHMGSNx%2FqwxnfZiMdQtGYQLIDsgGj2QKWiO7yYJvaFjgkD8g%3D%3D;
          _aquarium_NURSERY_production_session=OFZUMzJkYXpIQjczRUlNaTMrbUc1eW02YjcwTHMrd3JGZU5VTG5NeW1qMFdIV1hXbHBlSFZFWkhDSWdZNy9SYVZZNFIydUNyMWVpYkpBeVVXM202OWxCdnBJai9qTkU5TWx1bTRKaDUyZ3EwRTVqRlZqZEEvTzFaTFN3U2VYTGt3Q2xkUzUwbHJ1di9nK2NEdHJmODdhYXhYdEVsckhnVktsb3l5MzIrV2VhVkwydFQwSVY0ZC9sZ3NnUjc2MXpvTVNtWFVYVTlOektyTG9YRjlsRGFUeENlNW5idGhFTzd5czhaY1NuUTJUdHZoYzF1MjVKTGtSU2pOdHFkTENrdlNrbG5JTTR6Q1NxWXJ5NTJwUHpHL1B3NzMrZjJNWkcyb3JWNDA5NFhhN0dkSk9mM2ZlN1pEa2ZaMjUyQlJtbDAyRTUyZ0g4K0hQa1NaeERuUFpsWkdiYUJYMVp3Vzh3a0Rnek9CdEVYLytHSHpsSTVrdStENGpxSDJtZ3BIakx5NXl6WTBzSmF1Skc3NThxS2NLaU5JNTNhc1BpQS91c3IrTU9ZTEFWQ3Nkaz0tLTlPN3Uwbm12N0tGVlZsd1JSUEczUWc9PQ%3D%3D--f48ba8c65ab798caf2b08d61aa8533f63ae2200c;
          remember_token=SLLRrvtYchvNLhWHJR3FVg; remember_token_NURSERY_production=SLLRrvtYchvNLhWHJR3FVg]
      User-Agent: [python-requests/2.20.0]
    method: POST
    uri: http://52.27.43.242:81/json
  response:
    body: {string: "[{\"id\":90792,\"name\":\"protocol\",\"content\":\"# Author: Pei
        Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass Protocol\\r\\n
        \ include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather all reserved
        samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein   = []\\r\\n
        \   op_in_before    = []\\r\\n    op_in_after     = []\\r\\n    \\r\\n    #amount_before
        \  = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein  = []\\r\\n
        \   \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       = []\\r\\n    #pbs_protein
        \    = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n    operations.running.each
        do |op|\\r\\n        # generate randon OD values for debug\\r\\n        #op.set_input_data(\\\"Protein\\\",
        :od_value, Random.rand(0.8..1.0)) if debug\\r\\n        #op.set_input_data(\\\"Before
        IPTG\\\", :od_value, Random.rand(0.8..1.0)) if debug\\r\\n        #op.set_input_data(\\\"After
        IPTG\\\", :od_value, Random.rand(0.8..1.0)) if debug\\r\\n        # \\r\\n
        \       op_count = op_count + 1\\r\\n        op_in_protein   \\u003c\\u003c
        op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before    \\u003c\\u003c
        op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after     \\u003c\\u003c
        op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n        #tmp_before
        \ = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f * 100).floor\\r\\n
        \       #tmp_after   = (op.input_data(\\\"After IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\", :od_value).to_f
        * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c tmp_before\\r\\n
        \       #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Grab the protein ladder from a box label \\u003cb\\u003eprotein purification\\u003c/b\\u003e
        in -20\xB0C freezer (B1-165).\\\"\\r\\n        check \\\"Pipette 10 \xB5l
        of the protein ladder to well position 1 (the leftmost well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20 mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gel for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        bullet \\\"Retrieve
        #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n        bullet \\\"Make
        sure that the excess blue dye has been removed from the gel matrix background
        and the protein bands can be distinguished. (as an example shown in the picture
        below).\\\"\\r\\n        bullet \\\"Store the gel in the box saturated with
        water.\\\"\\r\\n        bullet \\\"If the background is still in dark blue,
        wash gels for another 1 hour or leave it on the shaker overnight. Grab a manager
        to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:21:56.000-08:00\",\"updated_at\":\"2018-11-07T21:21:56.000-08:00\",\"user_id\":200}]"}
    headers:
      Cache-Control: ['max-age=0, private, must-revalidate']
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      Date: ['Thu, 08 Nov 2018 07:24:58 GMT']
      ETag: [W/"23baa4c3a55daee2caa26995218c231b"]
      Server: [nginx/1.10.3 (Ubuntu)]
      Set-Cookie: [XSRF-TOKEN=j32WCUaH3llGaPMRybertI8K4vi3EwCagMoWajlWmj0Uxovfq8j5crY8CIavO71CZiZOe7vaeqFs8aF4Qhipqw%3D%3D;
          path=/, _aquarium_NURSERY_production_session=bXFaR2VuWWc2aFJVYVpGYVdRS3ZSSHdRSzM4STZaR3l2S2w4OTFwTGpZekZXdFc2TGEwRHoxaDNscC9JYWxWbGN0VXJnZENDTkRXQUViVDNQMFU1Q254dDl1SUIxWEZwOUJ0Uk1XZ1ZQa1NpN0FJUkxtd0YzZUVITEV5bi83cDhPYmdlZnVuU1dkSi93cC9SMWk1WFNiWEhoeXZEdFZQTmhzRjBzU08xSVcvdGNXWmgveFVKSHhGWUU1YkN5TzVEK0dyMTZ5UUIrd2tmUC9ERmZSUVlvQjBCaEZnTjRneVNGbmpQMWJQZERwTUhmYlZTWVA4WG8xdGtHWmdhUnRaZ2lYeTJkbTRITW82aktBbEhaSnhpNDJZd1hZMlltRzhrTmozVkcvai9EeWx5UUQrTENURVdIbXRMNzk3dWZiQnhscXp3RVo3TGtUV3RDWDRRSmxvSEZWYWIyakNlY2FMZlpNbVFoZEZXSU93VkxQa0VUby8yVitJMllZb3VGOGhkVXgwWmdHU0xXWVAwdEV4UG43aEZycnlyZFh0V001cGRvYUtrWlliR0VuQT0tLTI4UmQ1bFU1dmYwNjJ4QmxsNmo5YVE9PQ%3D%3D--6ede67a3222ade292d9f3b6a774d04ea58414666;
          path=/; HttpOnly]
      Vary: [Origin]
      X-Content-Type-Options: [nosniff]
      X-Frame-Options: [SAMEORIGIN]
      X-Request-Id: [410c5b4d-bb4b-4248-b887-271a26a4d343]
      X-Runtime: ['0.047848']
      X-XSS-Protection: [1; mode=block]
    status: {code: 200, message: OK}
- request:
    body: '{"model": "Code", "method": "where", "arguments": {}, "options": {"offset":
      -1, "limit": 11, "reverse": true}}'
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['110']
      Content-Type: [application/json]
      Cookie: [XSRF-TOKEN=FnznZis4%2FqM3BE%2FxdqCWGmlEWsOpa0GHdB1Bl%2FVHMGSNx%2FqwxnfZiMdQtGYQLIDsgGj2QKWiO7yYJvaFjgkD8g%3D%3D;
          _aquarium_NURSERY_production_session=OFZUMzJkYXpIQjczRUlNaTMrbUc1eW02YjcwTHMrd3JGZU5VTG5NeW1qMFdIV1hXbHBlSFZFWkhDSWdZNy9SYVZZNFIydUNyMWVpYkpBeVVXM202OWxCdnBJai9qTkU5TWx1bTRKaDUyZ3EwRTVqRlZqZEEvTzFaTFN3U2VYTGt3Q2xkUzUwbHJ1di9nK2NEdHJmODdhYXhYdEVsckhnVktsb3l5MzIrV2VhVkwydFQwSVY0ZC9sZ3NnUjc2MXpvTVNtWFVYVTlOektyTG9YRjlsRGFUeENlNW5idGhFTzd5czhaY1NuUTJUdHZoYzF1MjVKTGtSU2pOdHFkTENrdlNrbG5JTTR6Q1NxWXJ5NTJwUHpHL1B3NzMrZjJNWkcyb3JWNDA5NFhhN0dkSk9mM2ZlN1pEa2ZaMjUyQlJtbDAyRTUyZ0g4K0hQa1NaeERuUFpsWkdiYUJYMVp3Vzh3a0Rnek9CdEVYLytHSHpsSTVrdStENGpxSDJtZ3BIakx5NXl6WTBzSmF1Skc3NThxS2NLaU5JNTNhc1BpQS91c3IrTU9ZTEFWQ3Nkaz0tLTlPN3Uwbm12N0tGVlZsd1JSUEczUWc9PQ%3D%3D--f48ba8c65ab798caf2b08d61aa8533f63ae2200c;
          remember_token=SLLRrvtYchvNLhWHJR3FVg; remember_token_NURSERY_production=SLLRrvtYchvNLhWHJR3FVg]
      User-Agent: [python-requests/2.20.0]
    method: POST
    uri: http://52.27.43.242:81/json
  response:
    body: {string: "[{\"id\":90792,\"name\":\"protocol\",\"content\":\"# Author: Pei
        Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass Protocol\\r\\n
        \ include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather all reserved
        samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein   = []\\r\\n
        \   op_in_before    = []\\r\\n    op_in_after     = []\\r\\n    \\r\\n    #amount_before
        \  = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein  = []\\r\\n
        \   \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       = []\\r\\n    #pbs_protein
        \    = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n    operations.running.each
        do |op|\\r\\n        # generate randon OD values for debug\\r\\n        #op.set_input_data(\\\"Protein\\\",
        :od_value, Random.rand(0.8..1.0)) if debug\\r\\n        #op.set_input_data(\\\"Before
        IPTG\\\", :od_value, Random.rand(0.8..1.0)) if debug\\r\\n        #op.set_input_data(\\\"After
        IPTG\\\", :od_value, Random.rand(0.8..1.0)) if debug\\r\\n        # \\r\\n
        \       op_count = op_count + 1\\r\\n        op_in_protein   \\u003c\\u003c
        op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before    \\u003c\\u003c
        op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after     \\u003c\\u003c
        op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n        #tmp_before
        \ = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f * 100).floor\\r\\n
        \       #tmp_after   = (op.input_data(\\\"After IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\", :od_value).to_f
        * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c tmp_before\\r\\n
        \       #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Grab the protein ladder from a box label \\u003cb\\u003eprotein purification\\u003c/b\\u003e
        in -20\xB0C freezer (B1-165).\\\"\\r\\n        check \\\"Pipette 10 \xB5l
        of the protein ladder to well position 1 (the leftmost well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20 mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gel for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        bullet \\\"Retrieve
        #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n        bullet \\\"Make
        sure that the excess blue dye has been removed from the gel matrix background
        and the protein bands can be distinguished. (as an example shown in the picture
        below).\\\"\\r\\n        bullet \\\"Store the gel in the box saturated with
        water.\\\"\\r\\n        bullet \\\"If the background is still in dark blue,
        wash gels for another 1 hour or leave it on the shaker overnight. Grab a manager
        to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:21:56.000-08:00\",\"updated_at\":\"2018-11-07T21:21:56.000-08:00\",\"user_id\":200},{\"id\":90791,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Grab the protein ladder from a box label \\u003cb\\u003eprotein purification\\u003c/b\\u003e
        in -20 \\\"\\r\\n        check \\\"Pipette 10 \xB5l of the protein ladder
        to well position 1 (the leftmost well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20 mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gel for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        bullet \\\"Retrieve
        #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n        bullet \\\"Make
        sure that the excess blue dye has been removed from the gel matrix background
        and the protein bands can be distinguished. (as an example shown in the picture
        below).\\\"\\r\\n        bullet \\\"Store the gel in the box saturated with
        water.\\\"\\r\\n        bullet \\\"If the background is still in dark blue,
        wash gels for another 1 hour or leave it on the shaker overnight. Grab a manager
        to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:20:34.000-08:00\",\"updated_at\":\"2018-11-07T21:20:34.000-08:00\",\"user_id\":200},{\"id\":90790,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n
        \ include Feedback\\n  def main\\n    op_count = operations.size\\n\\n    #
        1 batch           -\\u003e 3 inputs: before, after, iptg\\n    # 1 gel             -\\u003e
        max. 3 batches [marker, batch1, batch2, batch3]\\n    # 1 clamping frame  -\\u003e
        max. 2 gels\\n    # 1 tank            -\\u003e max. 2 frames\\n    \\n    gel_count
        = (op_count/3).floor\\n    remainder = op_count % 3\\n    if remainder !=
        0\\n        gel_count = gel_count + 1\\n    end\\n    \\n    before = operations.size\\n
        \   \\n    #insert virtual operations according to gel_count\\n    #(0...op_count).each
        do |l|\\n    #    insert_operation 3*l, VirtualOperation.new\\n    #    insert_operation
        3*l+1, VirtualOperation.new\\n    #end\\n    \\n    operations.make\\n    \\n
        \   op_out_gel = []\\n    operations.output_collections[\\\"SDS Gel\\\"].each
        do |op_collection|\\n        op_out_gel \\u003c\\u003c op_collection.id\\n
        \   end\\n    \\n    clamping_frame_count = (op_count/6).floor\\n    remainder
        = op_count % 6\\n    if remainder != 0\\n        clamping_frame_count = clamping_frame_count
        + 1\\n    end\\n    \\n    running_buffer=0\\n    water=0\\n    for i in 1..clamping_frame_count\\n
        \       if i%2 == 0\\n            running_buffer = running_buffer + 20\\n
        \           water = 10*running_buffer - 20\\n        else\\n            running_buffer
        = running_buffer + 80\\n            water = 10*running_buffer - 80\\n        end\\n
        \   end\\n    \\n    tank_count = (op_count/12).floor\\n    remainder = op_count
        % 12\\n    if remainder != 0\\n        tank_count = tank_count + 1\\n    end\\n\\n
        \   #show do\\n        #title \\\"Gel / Frame / Tank\\\"\\n        #note \\\"#{op_count}
        batches, #{gel_count} gels, #{frame_count} frames, #{tank_count} tanks\\\"\\n
        \   #end\\n    \\n    # Place the casting frame at upright coner with the
        pressure cams in the open position and facing to a flat surface.\\n    # Make
        sure all glass plates are clean!\\n    place_casting_frame(gel_count,clamping_frame_count)\\n
        \       \\n    # Place a short plate on the top of a spacer plate.\\n    #
        Slide the two glass plates into the casting frame, keeping the short plate
        facing to front of the frame.\\n    place_short_plate_slide\\n        \\n
        \   # When the glass plates are in place, engage the pressure cams to secure
        the glass cassette sandwich in the casting frame. Make sure that both plates
        are flushed at the bottom. [Note] Leaking may occur if the plates are not
        flushed at the bottom.\\n        \\n    # Place the casting frame on the casting
        stand by positioning the casting frame onto the casting gasket.\\n    # Assemble
        the casting frame on the casting stand.\\n    place_assemble_frame_into_stand(clamping_frame_count)\\n
        \       \\n    # Load water into glass cassette sandwich for testing leaking.
        Do water test until leaking doesnt occur. If the water level is flowing down,
        it means there's a leaking and reassembly of the glass cassette sandwich is
        needed.\\n    test_leaking\\n        \\n    # If the leaking doesnt occur,
        remove water from the glass cassette sandwich.\\n    remove_cassette\\n    \\n
        \   prepare_aps_solution(gel_count)\\n    # Prepare one 12% resolving gel:
        take one 50mL falcon tube and label design ID, and add:\\n    # - 3.4mL water\\n
        \   # - 4mL acrylamide\\n    # - 2.5mL resolving gel buffer\\n    # - 0.1mL
        10% SDS buffer\\n    prepare_resolving_gel(gel_count)\\n        \\n    # Prepare
        one 10% stacking gel: take one 50mL falcon tube and label design ID, and add\\n
        \   # - 4.1mL water\\n    # - 3.3mL acrylamide\\n    # - 2.5mL stacking buffer\\n
        \   # - 0.1mL 10% SDS buffer\\n        \\n    # Fresh prepare APS solution:\\n
        \   # - Take one Eppendorf\\n    # - Add 0.01g APS powder to 100uL water\\n
        \   # - Shake it well until the powder fully dissolved\\n    \\n        \\n
        \   # Take the tube containing resolving gel buffer\\n    # - add 100ul APS
        solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 7mL to gel cassette sandwich.\\n      \\n    # Add 1mL isopropanol
        on the top of the gel buffer in the gel cassette sandwich.\\n    add_isopropanol\\n
        \       \\n    # Wait for 1hr.\\n    set_timer_1hrs\\n        \\n    # Pour
        off isopropanol, remove the remain isopropanol by a paper towel if needed\\n
        \       \\n    # Take the tube containing stacking gel buffer\\n    # - add
        50ul APS solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 3ml to gel cassette sandwich and insert comb to the cassette\\n
        \   prepare_stacking_gel(gel_count)\\n     \\n    # Wait for 30mins\\n    set_timer_30mins\\n
        \   \\n    place_gel_into_clamping(clamping_frame_count)\\n    \\n    #set_a_running_tank(tank_count)\\n
        \   \\n    place_frames_into_tank(tank_count,clamping_frame_count)\\n    \\n
        \   label_gel_id(op_out_gel)\\n    \\n    running_buffer_preparation(running_buffer,water)
        \  \\n    # Pull comb straight up to remove.\\n    \\n    pour_running_buffer\\n
        \   \\n    \\n    \\n    operations.store\\n\\n    return {}\\n  end\\n  \\n
        \ def place_casting_frame(gel_count,clamping_frame_count)\\n    show do\\n
        \      title \\\"Glass cassette preparation\\\"\\n       check \\\"Grab the
        follwing items:\\\"\\n       bullet \\\"#{gel_count} short plate\\\"\\n       bullet
        \\\"#{gel_count} spacer plate\\\"\\n       bullet \\\"#{gel_count} comb\\\"\\n
        \      bullet \\\"#{gel_count} casting frame\\\"\\n       #bullet \\\"#{clamping_frame_count}
        casting stand\\\"\\n       bullet \\\"#{gel_count} gray foam gasket\\\"\\n
        \      check \\\"Make sure the glass plates are dry and clean. If not, spray
        Ethanol on glass plates and wipe dry with Kimwipes.\\\"\\n       image \\\"Actions/ProteinPurification/casting_tool.jpg\\\"\\n
        \   end\\n  end\\n\\n  def place_short_plate_slide\\n    show do\\n       title
        \\\"Assemble glass cassette sandwich\\\"\\n       bullet \\\"Place a casting
        frame upright with the pressure cams in the open position.\\\"\\n       bullet
        \\\"Grab a spacer plate and place a short plate on top of it.\\\"\\n       bullet
        \\\"Slide the two glass plates into the casting frame. Engage the pressure
        cams to secure the glass cassette in the\\n       casting frame.\\\"\\n       bullet
        \\\"Check the short plate facing to front of the frame and the labeling on
        the spacer plate is up.\\\"\\n       bullet \\\"Check that both plates are
        flush at bottom to avoid leakage.\\\"\\n       bullet \\\"Repeat the steps
        to assemble all the glass cassette sandwiches.\\\"\\n       warning \\\"If
        the plates are misaligned or oriented incorrectly, leaking may occur.\\\"\\n
        \      image \\\"Actions/ProteinPurification/casting_frame.jpg\\\"\\n    end\\n
        \ end\\n    \\n  def place_assemble_frame_into_stand(clamping_frame_count)\\n
        \   show do\\n        title \\\"Casting stand assembly\\\" \\n        check
        \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e casting stand\\\"\\n
        \       check \\\"Place the gray foam gasket on the casting stand.\\\"\\n
        \       check \\\"Assemble the casting frames on the casting stand with the
        bottom edges pushed into the gray foam gasket.\\\"\\n        image \\\"Actions/ProteinPurification/casting_stand.jpg\\\"\\n
        \   end\\n  end\\n    \\n    # Load water into glass cassette sandwich for
        testing leaking. Do water test until leaking doesnt occur. If the water level
        is flowing down, it means there's a leaking and reassembly of the glass cassette
        sandwich is needed.\\n  def test_leaking\\n    show do\\n       title \\\"Check
        glass cassette for leakage\\\"\\n       check \\\"Pipetting water between
        the glass cassette sandwich up to just below the edge of the short plate.\\\"\\n
        \      check \\\"Wait for 5 minutes. If there is a leakage, reassemble the
        glass plates.\\\"\\n       timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n       warning \\\"If the plates are misaligned or oriented incorrectly,
        leaking may occur.\\\"\\n    end\\n  end\\n    \\n    # If the leaking doesnt
        occur, remove water from the glass cassette sandwich.\\n  def remove_cassette\\n
        \   show do\\n       title \\\"Remove water\\\"\\n       check \\\"If there
        is no leakage, remove water from the glass cassette sandwich.\\\"\\n       check
        \\\"Use a paper towel to wipe out excess water.\\\"\\n    end\\n  end\\n  \\n
        \ def prepare_aps_solution(gel_count)\\n    show do\\n       title \\\"Prepare
        10% Ammonium persulfate solution\\\"\\n       check \\\"Grab a 1.5 mL tube
        and label with APS\\\"\\n       check \\\"Add #{gel_count*0.02} g of APS powder
        and #{gel_count*200} \xB5l water into the tube.\\\"\\n       bullet \\\"Vortex
        until the powder is fully dissolved.\\\"\\n       image \\\"Actions/ProteinPurification/APS.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_resolving_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*3400} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*4000} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eResolving\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*2500} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*10} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*10}
        mL\\\"]\\n    ]\\n\\n    show do\\n       title \\\"Prepare 12% resolving
        gel solution\\\"\\n        bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet
        \\\"Prepare gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 7 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution. Avoid air
        bubbles.\\\"\\n        image \\\"Actions/ProteinPurification/resolving_buffer.jpg\\\"\\n
        \   end\\n  end\\n\\n  def add_isopropanol\\n    show do\\n       title \\\"Overlay
        isopropanol\\\"\\n       check \\\"Slowly pipette 1 mL of isopropanol to the
        top layer of gel.\\\"\\n       warning \\\"Not to disturb the gel solution.\\\"\\n
        \   end\\n  end         \\n\\n  def set_timer_1hrs\\n    show do\\n      title
        \\\"Wait for 1 hour\\\"\\n      bullet \\\"Set a 1-hr timer.\\\" \\n      timer
        initial: { hours: 1, minutes: 0, seconds: 0}\\n      bullet \\\"When the timer
        is up, pour off isopropanol. Use a paper towel to wipe out excess isopropanol.\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_stacking_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*2050} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*1650} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eStacking\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*1250} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*50} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*25} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*5} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*5}
        mL\\\"]\\n    ]\\n    show do\\n        title \\\"Stacking gel casting\\\"\\n
        \       bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet \\\"Prepare
        gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 3 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution and insert
        a comb between the two glass plate. Avoid air bubbles.\\\"\\n        image
        \\\"Actions/ProteinPurification/stacking_buffer_and_comb.jpg\\\"\\n\\n    end\\n
        \ end\\n\\n  def set_timer_30mins\\n    show do\\n        title \\\"Wait for
        30 minutes\\\"\\n        bullet \\\"Set a 30-mins timer.\\\" \\n        timer
        initial: { hours: 0, minutes: 30, seconds: 0}\\n      \\n    end\\n  end\\n
        \ \\n  def place_gel_into_clamping(clamping_frame_count)\\n    show do\\n
        \       title \\\"Electrode assembly\\\"\\n        bullet \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e
        clamping frame(s). The red marking should be on your left.\\\"\\n        bullet
        \\\"Set the clamping frame to the green arms open position on the bench.\\\"\\n
        \       bullet \\\"Gently remove the comb from the glass cassette sandwiche.\\\"\\n
        \       bullet \\\"Release the glass cassette from the casting frame.\\\"\\n
        \       bullet \\\"Place a gel sandwich into the front side of the clamping
        frame with the short plate facing inward.\\\"\\n        warning \\\"If an
        odd number of gels is being run, make sure to use a buffer dam (as shown in
        the picture).\\\"\\n        bullet \\\"Hold the glass cassettes in place and
        slide the green arms of the clamping frame over the gels. Lock gel cassettes
        into place.\\\"\\n        warning \\\"Do not attempt to lock the green arms
        without ensuring the gel cassettes are aligned.\\\"\\n        image \\\"Actions/ProteinPurification/clamping_frame.jpg\\\"\\n
        \   end\\n  end\\n  \\n=begin\\n  def set_a_running_tank(tank_count)\\n    show
        do\\n        title \\\"set up the power supply\\\"\\n        bullet \\\"In
        the gel room, obtain a power supply and set it to 100 V and with a 60 minute
        timer.\\\"\\n        bullet \\\"Grab #{tank_count} gel tanks and lids. Attach
        the electrodes of a lid to the power supply. Make sure to align the color-coded
        plugs and jacks.\\\"\\n    end\\n  end\\n=end\\n\\n  def place_frames_into_tank(tank_count,clamping_frame_count)\\n
        \   show do\\n        title \\\"Gel tank preparation\\\"\\n        bullet
        \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e gel running tank(s).\\\"\\n
        \       bullet \\\"The red marking on the top inside edge of tank should be
        on your left (as shown in the picture).\\\"\\n        bullet \\\"Place the
        electrode assembly in the gel running tank. Make sure that the red electrode
        is matching with the red marking on the top inside left edge of the tank.\\\"\\n
        \       image \\\"Actions/ProteinPurification/running_tank.jpg\\\"\\n    end
        \ \\n  end\\n  \\n  def label_gel_id(op_out_gel)\\n    show do \\n        title
        \\\"Label gel ID\\\"\\n        bullet \\\"Write ID: #{op_out_gel.to_sentence}
        on a piece of lab tape and affix it on the gel glass cassette.\\\"\\n    end\\n
        \ end\\n  \\n  def running_buffer_preparation(running_buffer,water)\\n    show
        do\\n        title \\\"Running buffer preparation\\\"\\n        check \\\"Grab
        a beaker or large measuring cup. Add #{water} mL of water to it.\\\"\\n        check
        \\\"Add #{running_buffer} mL of premixed 10x Tris/glycine/SDS running buffer
        to the beaker.\\\"\\n        check \\\"Stir for 5 minutes.\\\"\\n        timer
        initial: { hours: 0, minutes: 5, seconds: 0}\\n        image \\\"Actions/ProteinPurification/running_buffer.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def pour_running_buffer\\n    show do\\n        title
        \\\"Fill tank with Running buffer\\\"\\n        bullet \\\"Fill up chamber
        of the electrode assembly with running buffer to just under the edge of the
        gel plates (as shown in the picture).\\\"\\n        bullet \\\"Wait for 5
        minutes. Check the chamber for leakage before fill the lower chamber.\\\"
        \\n        bullet \\\"If there is a leakage, pour running buffer back to the
        beaker. Open the green arms of clamping frame and reassemble it. Check if
        the short plates sit just below the notch at the top of the green gasket.\\\"\\n
        \       timer initial: { hours: 0, minutes: 5, seconds: 0}\\n        bullet
        \\\"Fill the lower chamber with running buffer to the indicated level. (2-Gels
        or 4-Gels line markings on the running gel tank.)\\\"\\n        image \\\"Actions/ProteinPurification/leaking_check.jpg\\\"\\n
        \   end\\n  end\\n\\nend\",\"parent_id\":1543,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:18:47.000-08:00\",\"updated_at\":\"2018-11-07T21:18:47.000-08:00\",\"user_id\":200},{\"id\":90789,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n
        \ include Feedback\\n  def main\\n    op_count = operations.size\\n\\n    #
        1 batch           -\\u003e 3 inputs: before, after, iptg\\n    # 1 gel             -\\u003e
        max. 3 batches [marker, batch1, batch2, batch3]\\n    # 1 clamping frame  -\\u003e
        max. 2 gels\\n    # 1 tank            -\\u003e max. 2 frames\\n    \\n    gel_count
        = (op_count/3).floor\\n    remainder = op_count % 3\\n    if remainder !=
        0\\n        gel_count = gel_count + 1\\n    end\\n    \\n    before = operations.size\\n
        \   \\n    #insert virtual operations according to gel_count\\n    #(0...op_count).each
        do |l|\\n    #    insert_operation 3*l, VirtualOperation.new\\n    #    insert_operation
        3*l+1, VirtualOperation.new\\n    #end\\n    \\n    operations.make\\n    \\n
        \   op_out_gel = []\\n    operations.output_collections[\\\"SDS Gel\\\"].each
        do |op_collection|\\n        op_out_gel \\u003c\\u003c op_collection.id\\n
        \   end\\n    \\n    clamping_frame_count = (op_count/6).floor\\n    remainder
        = op_count % 6\\n    if remainder != 0\\n        clamping_frame_count = clamping_frame_count
        + 1\\n    end\\n    \\n    running_buffer=0\\n    water=0\\n    for i in 1..clamping_frame_count\\n
        \       if i%2 == 0\\n            running_buffer = running_buffer + 20\\n
        \           water = 10*running_buffer - 20\\n        else\\n            running_buffer
        = running_buffer + 80\\n            water = 10*running_buffer - 80\\n        end\\n
        \   end\\n    \\n    tank_count = (op_count/12).floor\\n    remainder = op_count
        % 12\\n    if remainder != 0\\n        tank_count = tank_count + 1\\n    end\\n\\n
        \   #show do\\n        #title \\\"Gel / Frame / Tank\\\"\\n        #note \\\"#{op_count}
        batches, #{gel_count} gels, #{frame_count} frames, #{tank_count} tanks\\\"\\n
        \   #end\\n    \\n    # Place the casting frame at upright coner with the
        pressure cams in the open position and facing to a flat surface.\\n    # Make
        sure all glass plates are clean!\\n    place_casting_frame(gel_count,clamping_frame_count)\\n
        \       \\n    # Place a short plate on the top of a spacer plate.\\n    #
        Slide the two glass plates into the casting frame, keeping the short plate
        facing to front of the frame.\\n    place_short_plate_slide\\n        \\n
        \   # When the glass plates are in place, engage the pressure cams to secure
        the glass cassette sandwich in the casting frame. Make sure that both plates
        are flushed at the bottom. [Note] Leaking may occur if the plates are not
        flushed at the bottom.\\n        \\n    # Place the casting frame on the casting
        stand by positioning the casting frame onto the casting gasket.\\n    # Assemble
        the casting frame on the casting stand.\\n    place_assemble_frame_into_stand(clamping_frame_count)\\n
        \       \\n    # Load water into glass cassette sandwich for testing leaking.
        Do water test until leaking doesnt occur. If the water level is flowing down,
        it means there's a leaking and reassembly of the glass cassette sandwich is
        needed.\\n    test_leaking\\n        \\n    # If the leaking doesnt occur,
        remove water from the glass cassette sandwich.\\n    remove_cassette\\n    \\n
        \   prepare_aps_solution(gel_count)\\n    # Prepare one 12% resolving gel:
        take one 50mL falcon tube and label design ID, and add:\\n    # - 3.4mL water\\n
        \   # - 4mL acrylamide\\n    # - 2.5mL resolving gel buffer\\n    # - 0.1mL
        10% SDS buffer\\n    prepare_resolving_gel(gel_count)\\n        \\n    # Prepare
        one 10% stacking gel: take one 50mL falcon tube and label design ID, and add\\n
        \   # - 4.1mL water\\n    # - 3.3mL acrylamide\\n    # - 2.5mL stacking buffer\\n
        \   # - 0.1mL 10% SDS buffer\\n        \\n    # Fresh prepare APS solution:\\n
        \   # - Take one Eppendorf\\n    # - Add 0.01g APS powder to 100uL water\\n
        \   # - Shake it well until the powder fully dissolved\\n    \\n        \\n
        \   # Take the tube containing resolving gel buffer\\n    # - add 100ul APS
        solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 7mL to gel cassette sandwich.\\n      \\n    # Add 1mL isopropanol
        on the top of the gel buffer in the gel cassette sandwich.\\n    add_isopropanol\\n
        \       \\n    # Wait for 1hr.\\n    set_timer_1hrs\\n        \\n    # Pour
        off isopropanol, remove the remain isopropanol by a paper towel if needed\\n
        \       \\n    # Take the tube containing stacking gel buffer\\n    # - add
        50ul APS solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 3ml to gel cassette sandwich and insert comb to the cassette\\n
        \   prepare_stacking_gel(gel_count)\\n     \\n    # Wait for 30mins\\n    set_timer_30mins\\n
        \   \\n    place_gel_into_clamping(clamping_frame_count)\\n    \\n    #set_a_running_tank(tank_count)\\n
        \   \\n    place_frames_into_tank(tank_count,clamping_frame_count)\\n    \\n
        \   label_gel_id(op_out_gel)\\n    \\n    running_buffer_preparation(running_buffer,water)
        \  \\n    # Pull comb straight up to remove.\\n    \\n    pour_running_buffer\\n
        \   \\n    \\n    \\n    operations.store\\n\\n    return {}\\n  end\\n  \\n
        \ def place_casting_frame(gel_count,clamping_frame_count)\\n    show do\\n
        \      title \\\"Glass cassette preparation\\\"\\n       check \\\"Grab the
        follwing items:\\\"\\n       bullet \\\"#{gel_count} short plate\\\"\\n       bullet
        \\\"#{gel_count} spacer plate\\\"\\n       bullet \\\"#{gel_count} comb\\\"\\n
        \      bullet \\\"#{gel_count} casting frame\\\"\\n       #bullet \\\"#{clamping_frame_count}
        casting stand\\\"\\n       bullet \\\"#{gel_count} gray foam gasket\\\"\\n
        \      check \\\"Make sure the glass plates are dry and clean. If not, spray
        Ethanol on glass plates and wipe dry with Kimwipes.\\\"\\n       image \\\"Actions/ProteinPurification/casting_tool.jpg\\\"\\n
        \   end\\n  end\\n\\n  def place_short_plate_slide\\n    show do\\n       title
        \\\"Assemble glass cassette sandwich\\\"\\n       bullet \\\"Place a casting
        frame upright with the pressure cams in the open position.\\\"\\n       bullet
        \\\"Grab a spacer plate and place a short plate on top of it.\\\"\\n       bullet
        \\\"Slide the two glass plates into the casting frame. Engage the pressure
        cams to secure the glass cassette in the\\n       casting frame.\\\"\\n       bullet
        \\\"Check the short plate facing to front of the frame and the labeling on
        the spacer plate is up.\\\"\\n       bullet \\\"Check that both plates are
        flush at bottom to avoid leakage.\\\"\\n       bullet \\\"Repeat the steps
        to assemble all the glass cassette sandwiches.\\\"\\n       warning \\\"If
        the plates are misaligned or oriented incorrectly, leaking may occur.\\\"\\n
        \      image \\\"Actions/ProteinPurification/casting_frame.jpg\\\"\\n    end\\n
        \ end\\n    \\n  def place_assemble_frame_into_stand(clamping_frame_count)\\n
        \   show do\\n        title \\\"Casting stand assembly\\\" \\n        check
        \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e casting stand\\\"\\n
        \       check \\\"Place the gray foam gasket on the casting stand.\\\"\\n
        \       check \\\"Assemble the casting frames on the casting stand with the
        bottom edges pushed into the gray foam gasket.\\\"\\n        image \\\"Actions/ProteinPurification/casting_stand.jpg\\\"\\n
        \   end\\n  end\\n    \\n    # Load water into glass cassette sandwich for
        testing leaking. Do water test until leaking doesnt occur. If the water level
        is flowing down, it means there's a leaking and reassembly of the glass cassette
        sandwich is needed.\\n  def test_leaking\\n    show do\\n       title \\\"Check
        glass cassette for leakage\\\"\\n       check \\\"Pipetting water between
        the glass cassette sandwich up to just below the edge of the short plate.\\\"\\n
        \      check \\\"Wait for 5 minutes. If there is a leakage, reassemble the
        glass plates.\\\"\\n       timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n       warning \\\"If the plates are misaligned or oriented incorrectly,
        leaking may occur.\\\"\\n    end\\n  end\\n    \\n    # If the leaking doesnt
        occur, remove water from the glass cassette sandwich.\\n  def remove_cassette\\n
        \   show do\\n       title \\\"Remove water\\\"\\n       check \\\"If there
        is no leakage, remove water from the glass cassette sandwich.\\\"\\n       check
        \\\"Use a paper towel to wipe out excess water.\\\"\\n    end\\n  end\\n  \\n
        \ def prepare_aps_solution(gel_count)\\n    show do\\n       title \\\"Prepare
        10% Ammonium persulfate solution\\\"\\n       check \\\"Grab a 1.5 mL tube
        and label with APS\\\"\\n       check \\\"Add #{gel_count*0.02} g of APS powder
        and #{gel_count*200} \xB5l water into the tube.\\\"\\n       bullet \\\"Vortex
        until the powder is fully dissolved.\\\"\\n       image \\\"Actions/ProteinPurification/APS.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_resolving_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*3400} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*4000} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eResolving\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*2500} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*10} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*10}
        mL\\\"]\\n    ]\\n\\n    show do\\n       title \\\"Prepare 12% resolving
        gel solution\\\"\\n        bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet
        \\\"Prepare gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 7 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution. Avoid air
        bubbles.\\\"\\n        image \\\"Actions/ProteinPurification/resolving_buffer.jpg\\\"\\n
        \   end\\n  end\\n\\n  def add_isopropanol\\n    show do\\n       title \\\"Overlay
        isopropanol\\\"\\n       check \\\"Slowly pipette 1 mL of isopropanol to the
        top layer of gel.\\\"\\n       warning \\\"Not to disturb the gel solution.\\\"\\n
        \   end\\n  end         \\n\\n  def set_timer_1hrs\\n    show do\\n      title
        \\\"Wait for 1 hour\\\"\\n      bullet \\\"Set a 1-hr timer.\\\" \\n      timer
        initial: { hours: 1, minutes: 0, seconds: 0}\\n      bullet \\\"When the timer
        is up, pour off isopropanol. Use a paper towel to wipe out excess isopropanol.\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_stacking_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*2050} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*1650} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eStacking\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*1250} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*50} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*25} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*5} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*5}
        mL\\\"]\\n    ]\\n    show do\\n        title \\\"Stacking gel casting\\\"\\n
        \       bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet \\\"Prepare
        gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 3 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution and insert
        a comb between the two glass plate. Avoid air bubbles.\\\"\\n        image
        \\\"Actions/ProteinPurification/stacking_buffer_and_comb.jpg\\\"\\n\\n    end\\n
        \ end\\n\\n  def set_timer_30mins\\n    show do\\n        title \\\"Wait for
        30 minutes\\\"\\n        bullet \\\"Set a 30-mins timer.\\\" \\n        timer
        initial: { hours: 0, minutes: 30, seconds: 0}\\n      \\n    end\\n  end\\n
        \ \\n  def place_gel_into_clamping(clamping_frame_count)\\n    show do\\n
        \       title \\\"Electrode assembly\\\"\\n        bullet \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e
        clamping frame(s). The red marking should be on your left.\\\"\\n        bullet
        \\\"Set the clamping frame to the green arms open position on the bench.\\\"\\n
        \       bullet \\\"Gently remove the comb from the glass cassette sandwiche.\\\"\\n
        \       bullet \\\"Release the glass cassette from the casting frame.\\\"\\n
        \       bullet \\\"Place a gel sandwich into the front side of the clamping
        frame with the short plate facing inward.\\\"\\n        warning \\\"If an
        odd number of gels is being run, make sure to use a buffer dam (as shown in
        the picture).\\\"\\n        bullet \\\"Hold the glass cassettes in place and
        slide the green arms of the clamping frame over the gels. Lock gel cassettes
        into place.\\\"\\n        warning \\\"Do not attempt to lock the green arms
        without ensuring the gel cassettes are aligned.\\\"\\n        image \\\"Actions/ProteinPurification/clamping_frame.jpg\\\"\\n
        \   end\\n  end\\n  \\n=begin\\n  def set_a_running_tank(tank_count)\\n    show
        do\\n        title \\\"set up the power supply\\\"\\n        bullet \\\"In
        the gel room, obtain a power supply and set it to 100 V and with a 60 minute
        timer.\\\"\\n        bullet \\\"Grab #{tank_count} gel tanks and lids. Attach
        the electrodes of a lid to the power supply. Make sure to align the color-coded
        plugs and jacks.\\\"\\n    end\\n  end\\n=end\\n\\n  def place_frames_into_tank(tank_count,clamping_frame_count)\\n
        \   show do\\n        title \\\"Gel tank preparation\\\"\\n        bullet
        \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e gel running tank(s).\\\"\\n
        \       bullet \\\"The red marking on the top inside edge of tank should be
        on your left (as shown in the picture).\\\"\\n        bullet \\\"Place the
        electrode assembly in the gel running tank. Make sure that the red electrode
        is matching with the red marking on the top inside left edge of the tank.\\\"\\n
        \       image \\\"Actions/ProteinPurification/running_tank.jpg\\\"\\n    end
        \ \\n  end\\n  \\n  def label_gel_id(op_out_gel)\\n    show do \\n        title
        \\\"Label gel ID\\\"\\n        bullet \\\"Write ID: #{op_out_gel.to_sentence}
        on a piece of lab tape and affix it on the gel glass cassette.\\\"\\n    end\\n
        \ end\\n  \\n  def running_buffer_preparation(running_buffer,water)\\n    show
        do\\n        title \\\"Running buffer preparation\\\"\\n        check \\\"Grab
        a beaker or large measuring cup. Add #{water} mL of water to it.\\\"\\n        check
        \\\"Add #{running_buffer} mL of premixed 10x Tris/glycine/SDS running buffer
        to the beaker.\\\"\\n        check \\\"Stir for 5 minutes.\\\"\\n        timer
        initial: { hours: 0, minutes: 5, seconds: 0}\\n        image \\\"Actions/ProteinPurification/running_buffer.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def pour_running_buffer\\n    show do\\n        title
        \\\"Fill tank with Running buffer\\\"\\n        bullet \\\"Fill up chamber
        of the electrode assembly with running buffer to just under the edge of the
        gel plates (as shown in the picture).\\\"\\n        bullet \\\"Wait for 5
        minutes. Check the chamber for leakage before fill the lower chamber. If there
        is a leakage, pour running buffer back to the beaker. Open the green arms
        of clamping frame and reassemble it. Check if the short plates sit just below
        the notch at the top of the green gasket.\\\"\\n        timer initial: { hours:
        0, minutes: 5, seconds: 0}\\n        bullet \\\"Fill the lower chamber with
        running buffer to the indicated level. (2-Gels or 4-Gels line markings on
        the running gel tank.)\\\"\\n        image \\\"Actions/ProteinPurification/leaking_check.jpg\\\"\\n
        \   end\\n  end\\n\\nend\",\"parent_id\":1543,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:17:50.000-08:00\",\"updated_at\":\"2018-11-07T21:17:50.000-08:00\",\"user_id\":200},{\"id\":90788,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n    \\n    operations.retrieve.make\\n\\n
        \   op_in_protein = []\\n    op_out_protein = []\\n    op_count = 0\\n    operations.running.each
        do |op|\\n        op_count = op_count + 1\\n        op_in_protein \\u003c\\u003c
        op.input(\\\"Protein\\\").item.id\\n        op_out_protein \\u003c\\u003c
        op.output(\\\"Protein\\\").item.id\\n    end\\n\\n    # Set the Refrigerated
        Centrifuge to 4\xB0C first.\\n    set_refrig_centrifuge_temp\\n        \\n
        \   # Take one concentrator and label it with design ID.\\n    take_and_label_concentrator(op_count)\\n
        \       \\n    # Add 15mL water into the concentrator and spin it under 3000g
        for 10mins at 4\xB0C.\\n    add_water_and_centrifuge(op_count)\\n        \\n
        \   # Remove the concentrator from the centrifuge and discard the water into
        the filtrate collector.\\n        \\n    # Add 15mL elution to the sample
        container and spin it under 3000g for 30mins at 4\xB0C.\\n    add_elution_and_centrifuge(op_count,op_in_protein)\\n
        \   \\n    spin_another_30mins\\n    \\n    take_and_label_eppendorf(op_count,op_out_protein)\\n
        \   \\n     # Transfer the 1mL sample to the labeled Eppendorf.\\n    transfer_sample_to_eppendorf(op_count,op_in_protein,op_out_protein)\\n
        \   \\n    # Spin the concentrator under 30000g at 4\xB0C until the sample
        volume reaches 1mL.\\n        \\n    # Keep the sample on ice.\\n    \\n    pro_concentration
        = measure_concentration(op_out_protein)\\n        \\n    # Record the protein
        concentration.\\n    i = 0\\n    operations.running.each do |op|\\n        protein_out
        = op.output(\\\"Protein\\\").item\\n        protein_out.associate :protein_concentration,
        pro_concentration[i]\\n        i = i + 1\\n    end\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true, method: 'boxes')\\n    \\n    return {}\\n
        \ end\\n  \\n  def set_refrig_centrifuge_temp\\n    show do\\n        title
        \\\"Pre-cool a centrifuge\\\"\\n        bullet \\\"Set the centrifuge to 4\xB0C.\\\"\\n
        \       image \\\"Actions/ProteinPurification/centrifuge.jpg\\\"\\n    end\\n
        \ end\\n\\n  def take_and_label_concentrator(op_count)\\n    show do\\n        title
        \\\"Label Centriprep tubes\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        Centriprep tube(s).\\\"\\n        check \\\"Label Centriprep tube(s) from
        1 to #{op_count} on the tube wall.\\\"\\n        image \\\"Actions/ProteinPurification/centriprep_tube.jpg\\\"\\n
        \   end\\n  end\\n    \\n  def add_water_and_centrifuge(op_count)\\n    show
        do\\n        title \\\"Equilibrate Centriprep tubes\\\"\\n        bullet \\\"Perform
        the steps with the following tubes: ID: 1 to #{op_count}\\\"\\n        check
        \\\"Disassemble a Centriprep tube. Take the filtrate collector out of the
        sample container.\\\"\\n        check \\\"Pour water to the fill line on the
        Centriprep sample container.\\\"\\n        check \\\"Reassemble the Centriprep
        tube and spin at 3000g for 10 minutes.\\\"\\n        warning \\\"Make sure
        to balance.\\\"\\n        check \\\"Remove Centriprep tubes from the centrifuge
        and empty tubes.\\\"\\n        image \\\"Actions/ProteinPurification/centriprep_tube_assemble.jpg\\\"\\n
        \   end\\n  end\\n    \\n  def add_elution_and_centrifuge(op_count,op_in_protein)\\n
        \   op_table = [[\\\"Sample ID\\\",\\\"Centriprep tube ID\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c {content:op_in_protein[i],
        check: true}\\n        row \\u003c\\u003c i+1\\n        op_table \\u003c\\u003c
        row\\n    end\\n    \\n    show do\\n        title \\\"Concentrate protein
        samples\\\"\\n        check \\\"Pour the sample to the corresponding sample
        container of Centriprep tube.\\\"\\n        table op_table\\n        check
        \\\"Reassemble Centriprep tubes and spin at 3000g for 40 minutes.\\\"\\n        check
        \\\"Remove Centriprep tubes from the centrifuge.\\\"\\n        check \\\"Discard
        flowthrough in the filtrate collector.\\\"\\n        warning \\\"Protein sample
        is concentrated in the \\u003cb\\u003esample container\\u003c/b\\u003e. Be
        careful not to empty a wrong container.\\\"\\n        image \\\"Actions/ProteinPurification/collect_sample.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def spin_another_30mins\\n    show do\\n        title
        \\\"Spin Centriprep tubes again\\\"\\n        check \\\"Reassemble Centriprep
        tubes and spin at 3000g for 10 minutes.\\\"\\n        check \\\"Remove Centriprep
        tubes from the centrifuge.\\\"\\n    end\\n  end\\n  \\n  def take_and_label_eppendorf(op_count,op_out_protein)\\n
        \   show do\\n        title \\\"Grab and label tubes\\\"\\n        check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 1.5 mL tubes.\\\"\\n        check
        \\\"Label tubes with ID: #{op_out_protein.to_sentence}.\\\"\\n    end\\n  end\\n
        \ \\n def transfer_sample_to_eppendorf(op_count,op_in_protein,op_out_protein)\\n
        \   op_table = [[\\\"Centriprep tube ID\\\",\\\"1.5 mL tube ID\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c i+1\\n
        \       row \\u003c\\u003c {content:op_out_protein[i], check: true}\\n        op_table
        \\u003c\\u003c row\\n    end\\n    \\n    show do\\n        title \\\"Collect
        Samples\\\"\\n        check \\\"Grab a ice busket and fill it with ice.\\\"\\n
        \       check \\\"Set a P1000 pipettor to 500 \xB5l and transfer sample to
        the corresponding 1.5 mL tube. Keep samples on ice.\\\"\\n        table op_table\\n
        \       warning \\\"If sample volume is more than 500 \xB5l, don't withdraw
        the sample. Spin the Centriperp tube at 3000g for another 5 minutes or until
        sample volume reaches 500 \xB5l.\\\"\\n        check \\\"Add 100 \xB5l of
        50% Glycerol to each tube: #{op_out_protein.to_sentence} \\\"\\n    end\\n
        \ end\\n  \\n  def measure_concentration(op_out_protein)\\n    protein_concentration
        = []\\n    \\n    op_out_protein.each do |id|\\n        concetration = show
        do\\n            title \\\"Measure protein concentration\\\"\\n            check
        \\\"Open nanodrop in protein mode. Blank with protein blank buffer.\\\"\\n
        \           check \\\"Nanodrop 2 \xB5l protein sample.\\\"\\n            check
        \\\"Enter protein concentration.\\\"\\n            get \\\"number\\\", var:
        \\\"x\\\", label: \\\"Protein concetration of #{id}\\\", default: 0\\n        end\\n
        \       protein_concentration \\u003c\\u003c concetration[:x]\\n    end\\n
        \   return protein_concentration\\n  end\\n\\nend\\n\",\"parent_id\":1541,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:11:18.000-08:00\",\"updated_at\":\"2018-11-07T21:11:18.000-08:00\",\"user_id\":200},{\"id\":90787,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n\\n    operations.retrieve.make\\n\\n
        \   op_in_cell_lysate = []\\n    op_in_resin = []\\n    op_out_protein = []\\n
        \   op_count = 0\\n    operations.running.each do |op|\\n        op_count
        = op_count + 1\\n        op_in_cell_lysate \\u003c\\u003c op.input(\\\"Cell
        Lysate\\\").item.id\\n        op_in_resin \\u003c\\u003c op.input(\\\"Resin\\\").item.id\\n
        \       op_out_protein \\u003c\\u003c op.output(\\\"Protein\\\").item.id\\n
        \   end\\n    \\n    buffer_preparation(op_count)\\n    # Turn on the stopcock
        and let the binding buffer flow through of the column.\\n    turn_on_stopcock_binding(op_count,op_in_resin)\\n
        \       \\n    # Turn off the stopcock.\\n        \\n    # Apply the supernatant
        with design ID into the gravity flow column with resin in it.\\n    apply_supernatnat(op_count,op_in_cell_lysate,op_in_resin)\\n
        \       \\n    # Turn on the stopcock, let the supernatant flow through the
        column slowly.\\n    turn_on_stopcock_supernatant op_in_resin\\n        \\n
        \   # Add 50mL wash buffer to the column and let it flow through the column
        completely. Then turn off the stopcock.\\n    add_wash_buff(op_count,op_in_resin)\\n
        \       \\n    # Replace the beaker underneath the column with a new 50mL
        Falcon tube.\\n    replace_beaker_with_falcon_tube(op_count,op_in_resin,op_out_protein)\\n
        \       \\n    # Add 15mL elution buffer into the column.\\n    add_elution_buff(op_count,op_in_resin)\\n
        \       \\n    # Turn on the stopcock and let it flow through the column then
        collect it in the Falcon tube.\\n    turn_on_stopcock_collect(op_in_resin,op_out_protein)\\n
        \       \\n    # Cap the tube and put it on the ice.\\n\\n    operations.running.each
        do |op|\\n      op.output(\\\"Protein\\\").child_item.move \\\"4\xB0C or on
        ice for the (next) protocol\\\"\\n    end\\n\\n    operations.store(io: \\\"output\\\",
        interactive: true)\\n\\n    return {}\\n\\n  end\\n  \\n  # approximate final
        concentration of imidazole: 30mM wash buffer/250mM elution buffer\\n  def
        buffer_preparation(op_count)\\n    op_table =[ [\\\"Buffer preparation\\\",\\\"Purification
        buffer volume\\\",\\\"Imidazole volume\\\"],\\n                [{content:\\\"Wash
        buffer\\\", style: {color: \\\"#00f\\\"}},{content: \\\"#{op_count*25} mL\\\",
        check: true, style:{color:\\\"#00f\\\"}},{content: \\\"#{op_count*150} \xB5l\\\",
        check: true, style:{color:\\\"#00f\\\"}}],\\n                [{content:\\\"Elution
        Buffer\\\", style: {color:\\\"#060\\\"}},{content: \\\"#{op_count*15} mL\\\",
        check: true, style:{color:\\\"#060\\\"}},{content: \\\"#{op_count*750 } \xB5l\\\",
        check: true, style:{color:\\\"#060\\\"}}]\\n        ]\\n    show do\\n        title
        \\\"Prepare buffers\\\"\\n        bullet \\\"Grab the following items:\\\"\\n
        \       check \\\"Purification buffer, in the Media Bay.\\\"\\n        check
        \\\"Imidazole aliquot, in a box labeled \\u003cb\\u003eprotein purification\\u003c/b\\u003e
        in -20\xB0C freezer (B1-165)\\\"\\n        check \\\"Grab \\u003cb\\u003e2\\u003c/b\\u003e
        beakers and label them with \\u003cb\\u003eWash Buffer\\u003c/b\\u003e and
        \\u003cb\\u003eElution Buffer\\u003c/b\\u003e.\\\"\\n        bullet \\\"Prepare
        wash buffer and elution buffer according to the following table.\\\"\\n        table
        op_table\\n    end\\n  end\\n\\n  def turn_on_stopcock_binding(op_count,op_in_resin)\\n
        \   show do\\n        title \\\"Remove liquid from the column\\\"\\n        bullet
        \\\"Perform the steps with the following columns: #{op_in_resin.to_sentence}.\\\"\\n
        \       check \\\"Make sure a beaker has been placed underneath each column.\\\"\\n
        \       check \\\"Open the column outlet to allow buffer to move out.\\\"\\n
        \       check \\\"Close the column outlet.\\\"\\n        image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\n
        \   end\\n  end\\n\\n  def apply_supernatnat(op_count,op_in_cell_lysate,op_in_resin)\\n
        \   op_table = [[\\\"Sample ID\\\",\\\"Column ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c {content:op_in_cell_lysate[i],
        check: true}\\n        row \\u003c\\u003c op_in_resin[i]\\n        op_table
        \\u003c\\u003c row\\n    end\\n    show do\\n       title \\\"Apply sample
        to a column\\\"\\n       bullet \\\"Carefully load sample to the corresponding
        column by a diposable dropper.\\\"\\n       bullet \\\"For each column, use
        a new dropper to avoid cross contamination.\\\"\\n       table op_table\\n
        \      warning \\\"Be careful not to disturb the resin in column.\\\"\\n    end\\n
        \ end\\n\\n  def turn_on_stopcock_supernatant op_in_resin\\n    show do\\n
        \      title \\\"Protein binds to Ni-NTA resin\\\"\\n       check \\\"Open
        the column outlet. (ID: #{op_in_resin.to_sentence})\\\"\\n       check \\\"Control
        flow rate by an adaptor (as shown in the picture). Make sample \\u003cb\\u003eSLOWLY\\u003c/b\\u003e
        move out of column.\\\"\\n       check \\\"Close the column outlet.\\\"\\n
        \      image \\\"Actions/ProteinPurification/outlet_angle.jpg\\\"\\n    end\\n
        \ end\\n  \\n  def add_wash_buff(op_count,op_in_resin)\\n    op_table = [[\\\"Column
        ID\\\",\\\"Load wash buffer\\\"]]\\n    for i in 0..(op_count-1)\\n        row
        = []\\n        row \\u003c\\u003c {content:op_in_resin[i], check: true}\\n
        \       row \\u003c\\u003c \\\"25 mL\\\"\\n        op_table \\u003c\\u003c
        row\\n    end   \\n    show do\\n       title \\\"Column wash\\\"\\n       check
        \\\"Add 25 mL of \\u003cb\\u003eWash Buffer\\u003c/b\\u003e to each column.\\\"\\n
        \      #table op_table\\n       check \\\"Open the column outlet to allow
        buffer to move out.\\\"\\n       check \\\"Close the column outlet.\\\"\\n
        \   end\\n  end\\n  \\n  def replace_beaker_with_falcon_tube(op_count,op_in_resin,op_out_protein)\\n
        \   op_table = [[\\\"Column ID\\\",\\\"Falcon tube ID\\\"]]\\n    for i in
        0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c op_in_resin[i]\\n
        \       row \\u003c\\u003c {content:op_out_protein[i], check: true}\\n        op_table
        \\u003c\\u003c row\\n    end   \\n    show do\\n       title \\\"Prepare tubes\\\"\\n
        \      check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 50 mL Falcon
        tube(s).\\\"\\n       check \\\"Label tube(s) with ID: #{op_out_protein.to_sentence}.\\\"\\n
        \      check \\\"Place the corresponding tube underneath the column for collecting
        sample elution.\\\"\\n       table op_table\\n    end\\n  end\\n    \\n  def
        add_elution_buff(op_count,op_in_resin)\\n    op_table = [[\\\"Column ID\\\",\\\"Load
        elution buffer\\\"]]\\n    for i in 0..(op_count-1)\\n        row = []\\n
        \       row \\u003c\\u003c {content:op_in_resin[i], check: true}\\n        row
        \\u003c\\u003c \\\"15 mL\\\"\\n        op_table \\u003c\\u003c row\\n    end\\n
        \   show do\\n       title \\\"Elute Protein from a column\\\"\\n       bullet
        \\\"Add 15 mL of \\u003cb\\u003eElution Buffer\\u003c/b\\u003e to each column.\\\"\\n
        \      table op_table\\n    end\\n  end\\n    \\n  def turn_on_stopcock_collect(op_in_resin,op_out_protein)\\n
        \   show do\\n       title \\\"Collet protein in a tube\\\"\\n       check
        \\\"Open the column outlet. (ID: #{op_in_resin.to_sentence})\\\"\\n       check
        \\\"Control flow rate by an adaptor (as shown in the picture). Make sample
        \\u003cb\\u003eSLOWLY\\u003c/b\\u003e flow through the column.\\\"\\n       check
        \\\"Collect sample in the tube. Screw the cap of #{op_out_protein.to_sentence}.\\\"\\n
        \      image \\\"Actions/ProteinPurification/outlet_angle.jpg\\\"\\n    end\\n
        \ end\\n  \\n  \\nend\",\"parent_id\":1540,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:10:21.000-08:00\",\"updated_at\":\"2018-11-07T21:10:21.000-08:00\",\"user_id\":200},{\"id\":90786,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n\\r\\n
        \   operations.retrieve.make\\r\\n    \\r\\n    op_out_column = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_out_column \\u003c\\u003c op.output(\\\"Affinity Column\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    tube_count = (op_count*20/50).floor\\r\\n        if
        remainer = (op_count*20 % 50) != 0\\r\\n            tube_count = tube_count
        + 1\\r\\n        end\\r\\n    \\r\\n    prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   #  Take a plastic gravity flow column with a two-way stopcock.Label the
        design ID on the column.\\r\\n    label_column(op_count,op_out_column)\\r\\n
        \       \\r\\n    # Put the column onto a support stand with a clamp.\\r\\n
        \   put_column_onto_stand\\r\\n        \\r\\n    # Well-mix the Ni-NTA resin
        and take 2.0mL from the bottle. Add the resin to gravity flow column.\\r\\n
        \   mix_resin(op_count, op_out_column)\\r\\n        \\r\\n    # Place an empty
        beaker underneath the gravity flow column, let the liquid flow through the
        column.\\r\\n    # Load 30mL binding buffer to the column. \\r\\n    # Turn
        on the stopcock on the column, let the binding buffer flow through the column.\\r\\n
        \   # Turn off the stopcock on the column.\\r\\n    # Load 3mL binding buffer
        to the column.\\r\\n    # Empty the beaker underneath the column.\\r\\n    load_20ml_binding_buffer(op_out_column)\\r\\n
        \   \\r\\n    operations.store\\r\\n     \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  #prepare binding buffer (30mM imidazole_final concentration)\\r\\n
        \ #20mL/per column, imidazole aliquot concentration: 5M\\r\\n  def prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   op_table = [[\\\"Item\\\",\\\"Volume\\\"],\\r\\n    [\\\"Purification
        buffer\\\",{content:\\\"#{op_count*19.9} mL\\\", check: true}],\\r\\n    [\\\"Imidazole
        aliquot\\\",{content:\\\"#{op_count*132} \xB5l\\\", check: true}]\\r\\n    ]\\r\\n
        \   show do\\r\\n        title \\\"Prepare binding buffer\\\"\\r\\n        check
        \\\"Grab a beaker and label with \\u003cb\\u003eBinding buffer\\u003c/b\\u003e.\\\"\\r\\n
        \       check \\\"Grab the following items:\\\"\\r\\n        bullet \\\"Purification
        buffer, in the Media Bay\\\"\\r\\n        bullet \\\"Imidazole aliquot, in
        a box labeled \\u003cb\\u003eProtein purification\\u003c/b\\u003e in -20\xB0C
        freezer (B1-165)\\\"\\r\\n        check \\\"Add buffers into the beaker.\\\"\\r\\n
        \       table op_table\\r\\n        #image \\\"Actions/ProteinPurification/purification_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def label_column(op_count,op_out_column)\\r\\n
        \   show do \\r\\n      title \\\"Grab and label columns\\\"\\r\\n      check
        \\\"Grab #{op_count} column(s) and label the column with ID: #{op_out_column.to_sentence}.\\\"\\r\\n
        \     check \\\"Remove the snap-off tip at the bottom of the column. Attach
        a flow adaptor to it.\\\"\\r\\n      check \\\"Close the column outlet\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/empty_column_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def put_column_onto_stand\\r\\n    show
        do\\r\\n       title \\\"Column preparation\\\"\\r\\n       check \\\"Grab
        a support stand with clamps from bench and use the adjustable knob to mount
        the rack at the desired height.\\\"\\r\\n       check \\\"Clamp the middle
        of a column and make sure the column outlet is closed.\\\"\\r\\n       image
        \\\"Actions/ProteinPurification/stand_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def mix_resin(op_count, op_out_column)\\r\\n    op_table
        = [[\\\"Column ID\\\",\\\"Bed volume of Ni-NTA resin\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c {content:op_out_column[i],
        check: true}\\r\\n        row \\u003c\\u003c \\\"2 mL\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n       title \\\"Load
        Ni-NTA resin\\\"\\r\\n       bullet \\\"Perform the steps with the following
        columns: #{op_out_column.to_sentence}.\\\"\\r\\n       bullet \\\"Place a
        beaker underneath each column.\\\"\\r\\n       bullet \\\"Grab Ni-NTA resin
        from 4\xB0C refrigerator (R1-250). Suspend Ni-NTA resin by using a disposable
        dropper.\\\"\\r\\n       bullet \\\"Slowly load Ni-NTA slurry to each column.
        Avoid introducing air bubbles.\\\"\\r\\n       bullet \\\"Wait for 30 seconds
        to allow the resin to settle.\\\"\\r\\n       bullet \\\"Open the column oulet
        and let the liquid move out of the column.\\\"\\r\\n       bullet \\\"Check
        on the bed volume of resin. Make sure it reaches to 2 mL.(as shown in the
        picture.)\\\"\\r\\n       bullet \\\"If the bed volume is less than 2 mL,
        close the column outlet and then load resin.\\\"\\r\\n       image \\\"Actions/ProteinPurification/resin_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_20ml_binding_buffer(op_out_column)\\r\\n
        \   show do\\r\\n       title \\\"Equilibrate Resin\\\"\\r\\n       bullet
        \\\"Perform the steps with the following columns: #{op_out_column.to_sentence}.\\\"\\r\\n
        \      check \\\"Close the column outlet. Gently load 20 mL of binding buffer
        to each column.\\\"\\r\\n       warning \\\"Be careful not to disturb the
        resin\\\"\\r\\n       check \\\"Open the column outlet. Allow the buffer to
        flow through the columns.\\\"\\r\\n       check \\\"Close the column oulet.
        Gently load 1 mL of binding buffer to each column.\\\"\\r\\n       check \\\"Empty
        the beaker underneath each column.\\\"\\r\\n       image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  \\r\\nend\",\"parent_id\":1159,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:06:10.000-08:00\",\"updated_at\":\"2018-11-07T21:06:10.000-08:00\",\"user_id\":200},{\"id\":90785,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n\\r\\n
        \   operations.retrieve.make\\r\\n    \\r\\n    op_out_column = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_out_column \\u003c\\u003c op.output(\\\"Affinity Column\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    tube_count = (op_count*20/50).floor\\r\\n        if
        remainer = (op_count*20 % 50) != 0\\r\\n            tube_count = tube_count
        + 1\\r\\n        end\\r\\n    \\r\\n    prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   #  Take a plastic gravity flow column with a two-way stopcock.Label the
        design ID on the column.\\r\\n    label_column(op_count,op_out_column)\\r\\n
        \       \\r\\n    # Put the column onto a support stand with a clamp.\\r\\n
        \   put_column_onto_stand\\r\\n        \\r\\n    # Well-mix the Ni-NTA resin
        and take 2.0mL from the bottle. Add the resin to gravity flow column.\\r\\n
        \   mix_resin(op_count, op_out_column)\\r\\n        \\r\\n    # Place an empty
        beaker underneath the gravity flow column, let the liquid flow through the
        column.\\r\\n    # Load 30mL binding buffer to the column. \\r\\n    # Turn
        on the stopcock on the column, let the binding buffer flow through the column.\\r\\n
        \   # Turn off the stopcock on the column.\\r\\n    # Load 3mL binding buffer
        to the column.\\r\\n    # Empty the beaker underneath the column.\\r\\n    load_20ml_binding_buffer(op_out_column)\\r\\n
        \   \\r\\n    operations.store\\r\\n     \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  #prepare binding buffer (30mM imidazole_final concentration)\\r\\n
        \ #20mL/per column, imidazole aliquot concentration: 5M\\r\\n  def prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   op_table = [[\\\"Item\\\",\\\"Volume\\\"],\\r\\n    [\\\"Purification
        buffer\\\",{content:\\\"#{op_count*19.9} mL\\\", check: true}],\\r\\n    [\\\"Imidazole
        aliquot\\\",{content:\\\"#{op_count*132} \xB5l\\\", check: true}]\\r\\n    ]\\r\\n
        \   show do\\r\\n        title \\\"Prepare binding buffer\\\"\\r\\n        check
        \\\"Grab a beaker and label with \\u003cb\\u003eBinding buffer\\u003c/b\\u003e.\\\"\\r\\n
        \       check \\\"Grab the following items:\\\"\\r\\n        bullet \\\"Purification
        buffer, in the Media Bay\\\"\\r\\n        bullet \\\"Imidazole aliquot, in
        a box labeled \\u003cb\\u003eProtein purification\\u003c/b\\u003e in -20\xB0C
        freezer (B1-165)\\\"\\r\\n        check \\\"Add buffers into the beaker.\\\"\\r\\n
        \       table op_table\\r\\n        #image \\\"Actions/ProteinPurification/purification_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def label_column(op_count,op_out_column)\\r\\n
        \   show do \\r\\n      title \\\"Grab and label columns\\\"\\r\\n      check
        \\\"Grab #{op_count} column(s) and label the column with ID: #{op_out_column.to_sentence}.\\\"\\r\\n
        \     check \\\"Remove the snap-off tip at the bottom of the column. Attach
        a flow adaptor to it.\\\"\\r\\n      check \\\"Close the column outlet\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/empty_column_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def put_column_onto_stand\\r\\n    show
        do\\r\\n       title \\\"Column preparation\\\"\\r\\n       check \\\"Grab
        a support stand with clamps from bench and use the adjustable knob to mount
        the rack at the desired height.\\\"\\r\\n       check \\\"Clamp the middle
        of a column and make sure the column outlet is closed.\\\"\\r\\n       image
        \\\"Actions/ProteinPurification/stand_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def mix_resin(op_count, op_out_column)\\r\\n    op_table
        = [[\\\"Column ID\\\",\\\"Bed volume of Ni-NTA resin\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c {content:op_out_column[i],
        check: true}\\r\\n        row \\u003c\\u003c \\\"2 mL\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n       title \\\"Load
        Ni-NTA resin\\\"\\r\\n       bullet \\\"Perform the steps with the following
        columns: #{op_out_column.to_sentence}.\\\"\\r\\n       bullet \\\"Place a
        beaker underneath each column.\\\"\\r\\n       bullet \\\"Grab Ni-NTA resin
        from 4\xB0C refrigerator (R1-250). Suspend Ni-NTA resin by using a disposable
        dropper.\\\"\\r\\n       bullet \\\"Slowly load Ni-NTA slurry to each column.
        Avoid introducing air bubbles.\\\"\\r\\n       bullet \\\"Wait for 30 seconds
        to allow the resin to settle.\\\"\\r\\n       bullet \\\"Open the column oulet
        and let the liquid move out of the column.\\\"\\r\\n       bullet \\\"Check
        on the bed volume of resin. Make sure it reaches to 2 mL.(as shown in the
        picture.)\\\"\\r\\n       note \\\"If the bed volume is less than 2 mL, close
        the column outlet and then load resin.\\\"\\r\\n       image \\\"Actions/ProteinPurification/resin_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_20ml_binding_buffer(op_out_column)\\r\\n
        \   show do\\r\\n       title \\\"Equilibrate Resin\\\"\\r\\n       bullet
        \\\"Perform the steps with the following columns: #{op_out_column.to_sentence}.\\\"\\r\\n
        \      check \\\"Close the column outlet. Gently load 20 mL of binding buffer
        to each column.\\\"\\r\\n       warning \\\"Be careful not to disturb the
        resin\\\"\\r\\n       check \\\"Open the column outlet. Allow the buffer to
        flow through the columns.\\\"\\r\\n       check \\\"Close the column oulet.
        Gently load 1 mL of binding buffer to each column.\\\"\\r\\n       check \\\"Empty
        the beaker underneath each column.\\\"\\r\\n       image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  \\r\\nend\",\"parent_id\":1159,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:05:53.000-08:00\",\"updated_at\":\"2018-11-07T21:05:53.000-08:00\",\"user_id\":200},{\"id\":90784,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n\\r\\n
        \   operations.retrieve.make\\r\\n    \\r\\n    op_out_column = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_out_column \\u003c\\u003c op.output(\\\"Affinity Column\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    tube_count = (op_count*20/50).floor\\r\\n        if
        remainer = (op_count*20 % 50) != 0\\r\\n            tube_count = tube_count
        + 1\\r\\n        end\\r\\n    \\r\\n    prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   #  Take a plastic gravity flow column with a two-way stopcock.Label the
        design ID on the column.\\r\\n    label_column(op_count,op_out_column)\\r\\n
        \       \\r\\n    # Put the column onto a support stand with a clamp.\\r\\n
        \   put_column_onto_stand\\r\\n        \\r\\n    # Well-mix the Ni-NTA resin
        and take 2.0mL from the bottle. Add the resin to gravity flow column.\\r\\n
        \   mix_resin(op_count, op_out_column)\\r\\n        \\r\\n    # Place an empty
        beaker underneath the gravity flow column, let the liquid flow through the
        column.\\r\\n    # Load 30mL binding buffer to the column. \\r\\n    # Turn
        on the stopcock on the column, let the binding buffer flow through the column.\\r\\n
        \   # Turn off the stopcock on the column.\\r\\n    # Load 3mL binding buffer
        to the column.\\r\\n    # Empty the beaker underneath the column.\\r\\n    load_20ml_binding_buffer(op_out_column)\\r\\n
        \   \\r\\n    operations.store\\r\\n     \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  #prepare binding buffer (30mM imidazole_final concentration)\\r\\n
        \ #20mL/per column, imidazole aliquot concentration: 5M\\r\\n  def prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   op_table = [[\\\"Item\\\",\\\"Volume\\\"],\\r\\n    [\\\"Purification
        buffer\\\",{content:\\\"#{op_count*19.9} mL\\\", check: true}],\\r\\n    [\\\"Imidazole
        aliquot\\\",{content:\\\"#{op_count*132} \xB5l\\\", check: true}]\\r\\n    ]\\r\\n
        \   show do\\r\\n        title \\\"Prepare binding buffer\\\"\\r\\n        check
        \\\"Grab a beaker and label with \\u003cb\\u003eBinding buffer\\u003c/b\\u003e.\\\"\\r\\n
        \       check \\\"Grab the following items:\\\"\\r\\n        bullet \\\"Purification
        buffer, in the Media Bay\\\"\\r\\n        bullet \\\"Imidazole aliquot, in
        a box labeled \\u003cb\\u003eProtein purification\\u003c/b\\u003e in -20\xB0C
        freezer (B1-165)\\\"\\r\\n        check \\\"Add buffers into the beaker.\\\"\\r\\n
        \       table op_table\\r\\n        #image \\\"Actions/ProteinPurification/purification_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def label_column(op_count,op_out_column)\\r\\n
        \   show do \\r\\n      title \\\"Grab and label columns\\\"\\r\\n      check
        \\\"Grab #{op_count} column(s) and label the column with ID: #{op_out_column.to_sentence}.\\\"\\r\\n
        \     check \\\"Remove the snap-off tip at the bottom of the column. Attach
        a flow adaptor to it.\\\"\\r\\n      check \\\"Close the column outlet\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/empty_column_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def put_column_onto_stand\\r\\n    show
        do\\r\\n       title \\\"Column preparation\\\"\\r\\n       check \\\"Grab
        a support stand with clamps from bench and use the adjustable knob to mount
        the rack at the desired height.\\\"\\r\\n       check \\\"Clamp the middle
        of a column and make sure the column outlet is closed.\\\"\\r\\n       image
        \\\"Actions/ProteinPurification/stand_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def mix_resin(op_count, op_out_column)\\r\\n    op_table
        = [[\\\"Column ID\\\",\\\"Bed volume of Ni-NTA resin\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c {content:op_out_column[i],
        check: true}\\r\\n        row \\u003c\\u003c \\\"2 mL\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n       title \\\"Load
        Ni-NTA resin\\\"\\r\\n       bullet \\\"Perform the steps with the following
        columns: #{op_out_column.to_sentence}.\\\"\\r\\n       check \\\"Place a beaker
        underneath each column.\\\"\\r\\n       check \\\"Grab Ni-NTA resin from 4\xB0C
        refrigerator (R1-250). Suspend Ni-NTA resin by using a disposable dropper.\\\"\\r\\n
        \      check \\\"Slowly load Ni-NTA slurry to each column. Avoid introducing
        air bubbles.\\\"\\r\\n       check \\\"Wait for 30 seconds to allow the resin
        to settle.\\\"\\r\\n       check \\\"Open the column oulet and let the liquid
        move out of the column.\\\"\\r\\n       check \\\"Check on the bed volume
        of resin. Make sure it reaches to 2 mL.(as shown in the picture.)\\\"\\r\\n
        \      note \\\"If the bed volume is less than 2 mL, close the column outlet
        and then load resin.\\\"\\r\\n       image \\\"Actions/ProteinPurification/resin_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_20ml_binding_buffer(op_out_column)\\r\\n
        \   show do\\r\\n       title \\\"Equilibrate Resin\\\"\\r\\n       bullet
        \\\"Perform the steps with the following columns: #{op_out_column.to_sentence}.\\\"\\r\\n
        \      check \\\"Close the column outlet. Gently load 20 mL of binding buffer
        to each column.\\\"\\r\\n       warning \\\"Be careful not to disturb the
        resin\\\"\\r\\n       check \\\"Open the column outlet. Allow the buffer to
        flow through the columns.\\\"\\r\\n       check \\\"Close the column oulet.
        Gently load 1 mL of binding buffer to each column.\\\"\\r\\n       check \\\"Empty
        the beaker underneath each column.\\\"\\r\\n       image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  \\r\\nend\",\"parent_id\":1159,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:05:03.000-08:00\",\"updated_at\":\"2018-11-07T21:05:03.000-08:00\",\"user_id\":200},{\"id\":90783,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n\\r\\n
        \   operations.retrieve.make\\r\\n    \\r\\n    op_out_column = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_out_column \\u003c\\u003c op.output(\\\"Affinity Column\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    tube_count = (op_count*20/50).floor\\r\\n        if
        remainer = (op_count*20 % 50) != 0\\r\\n            tube_count = tube_count
        + 1\\r\\n        end\\r\\n    \\r\\n    prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   #  Take a plastic gravity flow column with a two-way stopcock.Label the
        design ID on the column.\\r\\n    label_column(op_count,op_out_column)\\r\\n
        \       \\r\\n    # Put the column onto a support stand with a clamp.\\r\\n
        \   put_column_onto_stand\\r\\n        \\r\\n    # Well-mix the Ni-NTA resin
        and take 2.0mL from the bottle. Add the resin to gravity flow column.\\r\\n
        \   mix_resin(op_count, op_out_column)\\r\\n        \\r\\n    # Place an empty
        beaker underneath the gravity flow column, let the liquid flow through the
        column.\\r\\n    # Load 30mL binding buffer to the column. \\r\\n    # Turn
        on the stopcock on the column, let the binding buffer flow through the column.\\r\\n
        \   # Turn off the stopcock on the column.\\r\\n    # Load 3mL binding buffer
        to the column.\\r\\n    # Empty the beaker underneath the column.\\r\\n    load_20ml_binding_buffer(op_out_column)\\r\\n
        \   \\r\\n    operations.store\\r\\n     \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  #prepare binding buffer (30mM imidazole_final concentration)\\r\\n
        \ #20mL/per column, imidazole aliquot concentration: 5M\\r\\n  def prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   op_table = [[\\\"Item\\\",\\\"Volume\\\"],\\r\\n    [\\\"Purification
        buffer\\\",{content:\\\"#{op_count*19.9} mL\\\", check: true}],\\r\\n    [\\\"Imidazole
        aliquot\\\",{content:\\\"#{op_count*132} \xB5l\\\", check: true}]\\r\\n    ]\\r\\n
        \   show do\\r\\n        title \\\"Prepare binding buffer\\\"\\r\\n        check
        \\\"Grab a beaker and label with \\u003cb\\u003eBinding buffer\\u003c/b\\u003e.\\\"\\r\\n
        \       check \\\"Grab the following items:\\\"\\r\\n        bullet \\\"Purification
        buffer, in the Media Bay\\\"\\r\\n        bullet \\\"Imidazole aliquot, in
        a box labeled \\u003cb\\u003eProtein purification\\u003c/b\\u003e in -20\xB0C
        freezer (B1-165)\\\"\\r\\n        check \\\"Add buffers into the beaker.\\\"\\r\\n
        \       table op_table\\r\\n        #image \\\"Actions/ProteinPurification/purification_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def label_column(op_count,op_out_column)\\r\\n
        \   show do \\r\\n      title \\\"Grab and label columns\\\"\\r\\n      check
        \\\"Grab #{op_count} column(s) and label the column with ID: #{op_out_column.to_sentence}.\\\"\\r\\n
        \     check \\\"Remove the snap-off tip at the bottom of the column. Attach
        a flow adaptor to it.\\\"\\r\\n      check \\\"Close the column outlet\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/empty_column_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def put_column_onto_stand\\r\\n    show
        do\\r\\n       title \\\"Column preparation\\\"\\r\\n       check \\\"Grab
        a support stand with clamps from bench and use the adjustable knob to mount
        the rack at the desired height.\\\"\\r\\n       check \\\"Clamp the middle
        of a column and make sure the column outlet is closed.\\\"\\r\\n       image
        \\\"Actions/ProteinPurification/stand_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def mix_resin(op_count, op_out_column)\\r\\n    op_table
        = [[\\\"Column ID\\\",\\\"Bed volume of Ni-NTA resin\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c {content:op_out_column[i],
        check: true}\\r\\n        row \\u003c\\u003c \\\"2 mL\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n       title \\\"Load
        Ni-NTA resin\\\"\\r\\n       bullet \\\"Perform the steps with the following
        columns: #{op_out_column.to_sentence}.\\\"\\r\\n       check \\\"Place a beaker
        underneath each column.\\\"\\r\\n       check \\\"Grab Ni-NTA resin from 4\xB0C
        refrigerator (R1-250). Suspend Ni-NTA resin by using a disposable dropper.\\\"\\r\\n
        \      check \\\"Slowly load Ni-NTA slurry to each column. Avoid introducing
        air bubbles.\\\"\\r\\n       check \\\"Wait for 30 seconds to allow the resin
        to settle.\\\"\\r\\n       check \\\"Open the column oulets and let the liquid
        move out of the column.\\\"\\r\\n       check \\\"Check on the bed volume
        of resin. Make sure it reaches to 2 mL.(as shown in the picture.)\\\"\\r\\n
        \      note \\\"If the bed volume is less than 2 mL, close the column outlet
        and then load resin.\\\"\\r\\n       image \\\"Actions/ProteinPurification/resin_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_20ml_binding_buffer(op_out_column)\\r\\n
        \   show do\\r\\n       title \\\"Equilibrate Resin\\\"\\r\\n       bullet
        \\\"Perform the steps with the following columns: #{op_out_column.to_sentence}.\\\"\\r\\n
        \      check \\\"Close the column outlet. Gently load 20 mL of binding buffer
        to each column.\\\"\\r\\n       warning \\\"Be careful not to disturb the
        resin\\\"\\r\\n       check \\\"Open the column outlet. Allow the buffer to
        flow through the columns.\\\"\\r\\n       check \\\"Close the column oulet.
        Gently load 1 mL of binding buffer to each column.\\\"\\r\\n       check \\\"Empty
        the beaker underneath each column.\\\"\\r\\n       image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  \\r\\nend\",\"parent_id\":1159,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:04:42.000-08:00\",\"updated_at\":\"2018-11-07T21:04:42.000-08:00\",\"user_id\":200},{\"id\":90782,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n\\r\\n
        \   operations.retrieve.make\\r\\n    \\r\\n    op_out_column = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_out_column \\u003c\\u003c op.output(\\\"Affinity Column\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    tube_count = (op_count*20/50).floor\\r\\n        if
        remainer = (op_count*20 % 50) != 0\\r\\n            tube_count = tube_count
        + 1\\r\\n        end\\r\\n    \\r\\n    prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   #  Take a plastic gravity flow column with a two-way stopcock.Label the
        design ID on the column.\\r\\n    label_column(op_count,op_out_column)\\r\\n
        \       \\r\\n    # Put the column onto a support stand with a clamp.\\r\\n
        \   put_column_onto_stand\\r\\n        \\r\\n    # Well-mix the Ni-NTA resin
        and take 2.0mL from the bottle. Add the resin to gravity flow column.\\r\\n
        \   mix_resin(op_count, op_out_column)\\r\\n        \\r\\n    # Place an empty
        beaker underneath the gravity flow column, let the liquid flow through the
        column.\\r\\n    # Load 30mL binding buffer to the column. \\r\\n    # Turn
        on the stopcock on the column, let the binding buffer flow through the column.\\r\\n
        \   # Turn off the stopcock on the column.\\r\\n    # Load 3mL binding buffer
        to the column.\\r\\n    # Empty the beaker underneath the column.\\r\\n    load_20ml_binding_buffer(op_out_column)\\r\\n
        \   \\r\\n    operations.store\\r\\n     \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  #prepare binding buffer (30mM imidazole_final concentration)\\r\\n
        \ #20mL/per column, imidazole aliquot concentration: 5M\\r\\n  def prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   op_table = [[\\\"Item\\\",\\\"Volume\\\"],\\r\\n    [\\\"Purification
        buffer\\\",{content:\\\"#{op_count*19.9} mL\\\", check: true}],\\r\\n    [\\\"Imidazole
        aliquot\\\",{content:\\\"#{op_count*132} \xB5l\\\", check: true}]\\r\\n    ]\\r\\n
        \   show do\\r\\n        title \\\"Prepare binding buffer\\\"\\r\\n        check
        \\\"Grab a beaker and label with \\u003cb\\u003eBinding buffer\\u003c/b\\u003e.\\\"\\r\\n
        \       check \\\"Grab the following items:\\\"\\r\\n        bullet \\\"Purification
        buffer, in the Media Bay\\\"\\r\\n        bullet \\\"Imidazole aliquot, in
        a box labeled \\u003cb\\u003eProtein purification\\u003c/b\\u003e in -20\xB0C
        freezer (B1-165)\\\"\\r\\n        check \\\"Add buffers into the beaker.\\\"\\r\\n
        \       table op_table\\r\\n        #image \\\"Actions/ProteinPurification/purification_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def label_column(op_count,op_out_column)\\r\\n
        \   show do \\r\\n      title \\\"Grab and label columns\\\"\\r\\n      check
        \\\"Grab #{op_count} column(s) and label the column with ID: #{op_out_column.to_sentence}.\\\"\\r\\n
        \     check \\\"Remove the snap-off tip at the bottom of the column. Attach
        a flow adaptor to it.\\\"\\r\\n      check \\\"Close the column outlet\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/empty_column_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def put_column_onto_stand\\r\\n    show
        do\\r\\n       title \\\"Column preparation\\\"\\r\\n       check \\\"Grab
        a support stand with clamps from bench and use the adjustable knob to mount
        the rack at the desired height.\\\"\\r\\n       check \\\"Clamp the middle
        of a column and make sure the column outlet is closed.\\\"\\r\\n       image
        \\\"Actions/ProteinPurification/stand_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def mix_resin(op_count, op_out_column)\\r\\n    op_table
        = [[\\\"Column ID\\\",\\\"Bed volume of Ni-NTA resin\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c {content:op_out_column[i],
        check: true}\\r\\n        row \\u003c\\u003c \\\"2 mL\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n       title \\\"Load
        Ni-NTA resin\\\"\\r\\n       bullet \\\"Perform the steps with the following
        columns: #{op_out_column.to_sentence}.\\\"\\r\\n       check \\\"Place a beaker
        underneath each column.\\\"\\r\\n       check \\\"Grab Ni-NTA resin from 4\xB0C
        refrigerator (R1-250). Suspend Ni-NTA resin by using a disposable dropper.\\\"\\r\\n
        \      check \\\"Slowly load Ni-NTA slurry to each column. Avoid introducing
        air bubbles.\\\"\\r\\n       check \\\"Wait for 30 sec to allow the resin
        to settle.\\\"\\r\\n       check \\\"Open the column oulets and let the liquid
        move out of the column.\\\"\\r\\n       check \\\"Check on the bed volume
        of resin. Make sure it reaches to 2 mL.(as shown in the picture.)\\\"\\r\\n
        \      note \\\"If the bed volume is less than 2 mL, close the column outlet
        and then load resin.\\\"\\r\\n       image \\\"Actions/ProteinPurification/resin_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_20ml_binding_buffer(op_out_column)\\r\\n
        \   show do\\r\\n       title \\\"Equilibrate Resin\\\"\\r\\n       bullet
        \\\"Perform the steps with the following columns: #{op_out_column.to_sentence}.\\\"\\r\\n
        \      check \\\"Close the column outlet. Gently load 20 mL of binding buffer
        to each column.\\\"\\r\\n       warning \\\"Be careful not to disturb the
        resin\\\"\\r\\n       check \\\"Open the column outlet. Allow the buffer to
        flow through the columns.\\\"\\r\\n       check \\\"Close the column oulet.
        Gently load 1 mL of binding buffer to each column.\\\"\\r\\n       check \\\"Empty
        the beaker underneath each column.\\\"\\r\\n       image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  \\r\\nend\",\"parent_id\":1159,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:01:34.000-08:00\",\"updated_at\":\"2018-11-07T21:01:34.000-08:00\",\"user_id\":200}]"}
    headers:
      Cache-Control: ['max-age=0, private, must-revalidate']
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      Date: ['Thu, 08 Nov 2018 07:24:58 GMT']
      ETag: [W/"c2487374fa1d7ec225c45f6efa8cb9e2"]
      Server: [nginx/1.10.3 (Ubuntu)]
      Set-Cookie: [XSRF-TOKEN=qQVyOmMJiUI3gCUWTDLNKnJXlKLw9z1kdGG95XlHtcYyvm%2FsjkauacfU3oEqvtvcm3s4Ifw%2BR1%2BYWgr3AgmGUA%3D%3D;
          path=/, _aquarium_NURSERY_production_session=eDJ1NmtIV2EwV1BSemc2NWJTMWZURy9wSzh2RkZhUmo0YlJIa2tXSko3RkJZMWN5ckxNVjdkSEVnank2V05DYnJkVkxRRG1IZCtYRHlySmNlcW0wMFFPUlByWDZLNTZScFFUSUN2V2pmQkxzT3hhOUFZVk8zZkRPbVA2QzhQeXZ1d1VvNHo3UDZpR2RnNWNmTVloVTEvZlBnOUE2RVFpamtJSnFWQWN2cndzNHcycVhLQXBwUHU3TG1ITWhLUk5aTDBoamgxK3J1ZEF3ZzJ3T3k5SDAzNmZDNG5rTitqUk1nWFJWVmx2aTlBWnhvSE5RdnVzV3NYb0JOTWg0WG1wM2dkYlMyY3c5amhFenNveTc4VGNxTE1BbWVPWHJZdFVtRnFRWFcwU003TysyMzU5TFMzSjNrNWV1TldBdm1KcTRmTDZ4ZmNlWUhFMVNzQzY3Lzh6QzJFM0JlUEU5cDJMYXgrZXQzS2M4M05xUmRmcG1MZEFGWXVFL0tHZXJrUmRlSEViVXdRVEREazQ0S0UxbGZsQU5uYkQvYkplUkIrZTdCYVhJcS9IdFhqZz0tLWRaQmIrWk9WUTVGTE50dE9HUWkyc1E9PQ%3D%3D--70de8190e72d09d82991afc2e293973dcc0296a2;
          path=/; HttpOnly]
      Vary: [Origin]
      X-Content-Type-Options: [nosniff]
      X-Frame-Options: [SAMEORIGIN]
      X-Request-Id: [10b34ea8-a0e4-4619-b4f7-ba666c4b6c09]
      X-Runtime: ['0.060746']
      X-XSS-Protection: [1; mode=block]
    status: {code: 200, message: OK}
- request:
    body: '{"model": "Code", "method": "where", "arguments": {}, "options": {"offset":
      -1, "limit": 121, "reverse": true}}'
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Content-Length: ['111']
      Content-Type: [application/json]
      Cookie: [XSRF-TOKEN=FnznZis4%2FqM3BE%2FxdqCWGmlEWsOpa0GHdB1Bl%2FVHMGSNx%2FqwxnfZiMdQtGYQLIDsgGj2QKWiO7yYJvaFjgkD8g%3D%3D;
          _aquarium_NURSERY_production_session=OFZUMzJkYXpIQjczRUlNaTMrbUc1eW02YjcwTHMrd3JGZU5VTG5NeW1qMFdIV1hXbHBlSFZFWkhDSWdZNy9SYVZZNFIydUNyMWVpYkpBeVVXM202OWxCdnBJai9qTkU5TWx1bTRKaDUyZ3EwRTVqRlZqZEEvTzFaTFN3U2VYTGt3Q2xkUzUwbHJ1di9nK2NEdHJmODdhYXhYdEVsckhnVktsb3l5MzIrV2VhVkwydFQwSVY0ZC9sZ3NnUjc2MXpvTVNtWFVYVTlOektyTG9YRjlsRGFUeENlNW5idGhFTzd5czhaY1NuUTJUdHZoYzF1MjVKTGtSU2pOdHFkTENrdlNrbG5JTTR6Q1NxWXJ5NTJwUHpHL1B3NzMrZjJNWkcyb3JWNDA5NFhhN0dkSk9mM2ZlN1pEa2ZaMjUyQlJtbDAyRTUyZ0g4K0hQa1NaeERuUFpsWkdiYUJYMVp3Vzh3a0Rnek9CdEVYLytHSHpsSTVrdStENGpxSDJtZ3BIakx5NXl6WTBzSmF1Skc3NThxS2NLaU5JNTNhc1BpQS91c3IrTU9ZTEFWQ3Nkaz0tLTlPN3Uwbm12N0tGVlZsd1JSUEczUWc9PQ%3D%3D--f48ba8c65ab798caf2b08d61aa8533f63ae2200c;
          remember_token=SLLRrvtYchvNLhWHJR3FVg; remember_token_NURSERY_production=SLLRrvtYchvNLhWHJR3FVg]
      User-Agent: [python-requests/2.20.0]
    method: POST
    uri: http://52.27.43.242:81/json
  response:
    body: {string: "[{\"id\":90792,\"name\":\"protocol\",\"content\":\"# Author: Pei
        Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass Protocol\\r\\n
        \ include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather all reserved
        samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein   = []\\r\\n
        \   op_in_before    = []\\r\\n    op_in_after     = []\\r\\n    \\r\\n    #amount_before
        \  = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein  = []\\r\\n
        \   \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       = []\\r\\n    #pbs_protein
        \    = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n    operations.running.each
        do |op|\\r\\n        # generate randon OD values for debug\\r\\n        #op.set_input_data(\\\"Protein\\\",
        :od_value, Random.rand(0.8..1.0)) if debug\\r\\n        #op.set_input_data(\\\"Before
        IPTG\\\", :od_value, Random.rand(0.8..1.0)) if debug\\r\\n        #op.set_input_data(\\\"After
        IPTG\\\", :od_value, Random.rand(0.8..1.0)) if debug\\r\\n        # \\r\\n
        \       op_count = op_count + 1\\r\\n        op_in_protein   \\u003c\\u003c
        op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before    \\u003c\\u003c
        op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after     \\u003c\\u003c
        op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n        #tmp_before
        \ = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f * 100).floor\\r\\n
        \       #tmp_after   = (op.input_data(\\\"After IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\", :od_value).to_f
        * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c tmp_before\\r\\n
        \       #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Grab the protein ladder from a box label \\u003cb\\u003eprotein purification\\u003c/b\\u003e
        in -20\xB0C freezer (B1-165).\\\"\\r\\n        check \\\"Pipette 10 \xB5l
        of the protein ladder to well position 1 (the leftmost well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20 mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gel for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        bullet \\\"Retrieve
        #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n        bullet \\\"Make
        sure that the excess blue dye has been removed from the gel matrix background
        and the protein bands can be distinguished. (as an example shown in the picture
        below).\\\"\\r\\n        bullet \\\"Store the gel in the box saturated with
        water.\\\"\\r\\n        bullet \\\"If the background is still in dark blue,
        wash gels for another 1 hour or leave it on the shaker overnight. Grab a manager
        to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:21:56.000-08:00\",\"updated_at\":\"2018-11-07T21:21:56.000-08:00\",\"user_id\":200},{\"id\":90791,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Grab the protein ladder from a box label \\u003cb\\u003eprotein purification\\u003c/b\\u003e
        in -20 \\\"\\r\\n        check \\\"Pipette 10 \xB5l of the protein ladder
        to well position 1 (the leftmost well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20 mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gel for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        bullet \\\"Retrieve
        #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n        bullet \\\"Make
        sure that the excess blue dye has been removed from the gel matrix background
        and the protein bands can be distinguished. (as an example shown in the picture
        below).\\\"\\r\\n        bullet \\\"Store the gel in the box saturated with
        water.\\\"\\r\\n        bullet \\\"If the background is still in dark blue,
        wash gels for another 1 hour or leave it on the shaker overnight. Grab a manager
        to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:20:34.000-08:00\",\"updated_at\":\"2018-11-07T21:20:34.000-08:00\",\"user_id\":200},{\"id\":90790,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n
        \ include Feedback\\n  def main\\n    op_count = operations.size\\n\\n    #
        1 batch           -\\u003e 3 inputs: before, after, iptg\\n    # 1 gel             -\\u003e
        max. 3 batches [marker, batch1, batch2, batch3]\\n    # 1 clamping frame  -\\u003e
        max. 2 gels\\n    # 1 tank            -\\u003e max. 2 frames\\n    \\n    gel_count
        = (op_count/3).floor\\n    remainder = op_count % 3\\n    if remainder !=
        0\\n        gel_count = gel_count + 1\\n    end\\n    \\n    before = operations.size\\n
        \   \\n    #insert virtual operations according to gel_count\\n    #(0...op_count).each
        do |l|\\n    #    insert_operation 3*l, VirtualOperation.new\\n    #    insert_operation
        3*l+1, VirtualOperation.new\\n    #end\\n    \\n    operations.make\\n    \\n
        \   op_out_gel = []\\n    operations.output_collections[\\\"SDS Gel\\\"].each
        do |op_collection|\\n        op_out_gel \\u003c\\u003c op_collection.id\\n
        \   end\\n    \\n    clamping_frame_count = (op_count/6).floor\\n    remainder
        = op_count % 6\\n    if remainder != 0\\n        clamping_frame_count = clamping_frame_count
        + 1\\n    end\\n    \\n    running_buffer=0\\n    water=0\\n    for i in 1..clamping_frame_count\\n
        \       if i%2 == 0\\n            running_buffer = running_buffer + 20\\n
        \           water = 10*running_buffer - 20\\n        else\\n            running_buffer
        = running_buffer + 80\\n            water = 10*running_buffer - 80\\n        end\\n
        \   end\\n    \\n    tank_count = (op_count/12).floor\\n    remainder = op_count
        % 12\\n    if remainder != 0\\n        tank_count = tank_count + 1\\n    end\\n\\n
        \   #show do\\n        #title \\\"Gel / Frame / Tank\\\"\\n        #note \\\"#{op_count}
        batches, #{gel_count} gels, #{frame_count} frames, #{tank_count} tanks\\\"\\n
        \   #end\\n    \\n    # Place the casting frame at upright coner with the
        pressure cams in the open position and facing to a flat surface.\\n    # Make
        sure all glass plates are clean!\\n    place_casting_frame(gel_count,clamping_frame_count)\\n
        \       \\n    # Place a short plate on the top of a spacer plate.\\n    #
        Slide the two glass plates into the casting frame, keeping the short plate
        facing to front of the frame.\\n    place_short_plate_slide\\n        \\n
        \   # When the glass plates are in place, engage the pressure cams to secure
        the glass cassette sandwich in the casting frame. Make sure that both plates
        are flushed at the bottom. [Note] Leaking may occur if the plates are not
        flushed at the bottom.\\n        \\n    # Place the casting frame on the casting
        stand by positioning the casting frame onto the casting gasket.\\n    # Assemble
        the casting frame on the casting stand.\\n    place_assemble_frame_into_stand(clamping_frame_count)\\n
        \       \\n    # Load water into glass cassette sandwich for testing leaking.
        Do water test until leaking doesnt occur. If the water level is flowing down,
        it means there's a leaking and reassembly of the glass cassette sandwich is
        needed.\\n    test_leaking\\n        \\n    # If the leaking doesnt occur,
        remove water from the glass cassette sandwich.\\n    remove_cassette\\n    \\n
        \   prepare_aps_solution(gel_count)\\n    # Prepare one 12% resolving gel:
        take one 50mL falcon tube and label design ID, and add:\\n    # - 3.4mL water\\n
        \   # - 4mL acrylamide\\n    # - 2.5mL resolving gel buffer\\n    # - 0.1mL
        10% SDS buffer\\n    prepare_resolving_gel(gel_count)\\n        \\n    # Prepare
        one 10% stacking gel: take one 50mL falcon tube and label design ID, and add\\n
        \   # - 4.1mL water\\n    # - 3.3mL acrylamide\\n    # - 2.5mL stacking buffer\\n
        \   # - 0.1mL 10% SDS buffer\\n        \\n    # Fresh prepare APS solution:\\n
        \   # - Take one Eppendorf\\n    # - Add 0.01g APS powder to 100uL water\\n
        \   # - Shake it well until the powder fully dissolved\\n    \\n        \\n
        \   # Take the tube containing resolving gel buffer\\n    # - add 100ul APS
        solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 7mL to gel cassette sandwich.\\n      \\n    # Add 1mL isopropanol
        on the top of the gel buffer in the gel cassette sandwich.\\n    add_isopropanol\\n
        \       \\n    # Wait for 1hr.\\n    set_timer_1hrs\\n        \\n    # Pour
        off isopropanol, remove the remain isopropanol by a paper towel if needed\\n
        \       \\n    # Take the tube containing stacking gel buffer\\n    # - add
        50ul APS solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 3ml to gel cassette sandwich and insert comb to the cassette\\n
        \   prepare_stacking_gel(gel_count)\\n     \\n    # Wait for 30mins\\n    set_timer_30mins\\n
        \   \\n    place_gel_into_clamping(clamping_frame_count)\\n    \\n    #set_a_running_tank(tank_count)\\n
        \   \\n    place_frames_into_tank(tank_count,clamping_frame_count)\\n    \\n
        \   label_gel_id(op_out_gel)\\n    \\n    running_buffer_preparation(running_buffer,water)
        \  \\n    # Pull comb straight up to remove.\\n    \\n    pour_running_buffer\\n
        \   \\n    \\n    \\n    operations.store\\n\\n    return {}\\n  end\\n  \\n
        \ def place_casting_frame(gel_count,clamping_frame_count)\\n    show do\\n
        \      title \\\"Glass cassette preparation\\\"\\n       check \\\"Grab the
        follwing items:\\\"\\n       bullet \\\"#{gel_count} short plate\\\"\\n       bullet
        \\\"#{gel_count} spacer plate\\\"\\n       bullet \\\"#{gel_count} comb\\\"\\n
        \      bullet \\\"#{gel_count} casting frame\\\"\\n       #bullet \\\"#{clamping_frame_count}
        casting stand\\\"\\n       bullet \\\"#{gel_count} gray foam gasket\\\"\\n
        \      check \\\"Make sure the glass plates are dry and clean. If not, spray
        Ethanol on glass plates and wipe dry with Kimwipes.\\\"\\n       image \\\"Actions/ProteinPurification/casting_tool.jpg\\\"\\n
        \   end\\n  end\\n\\n  def place_short_plate_slide\\n    show do\\n       title
        \\\"Assemble glass cassette sandwich\\\"\\n       bullet \\\"Place a casting
        frame upright with the pressure cams in the open position.\\\"\\n       bullet
        \\\"Grab a spacer plate and place a short plate on top of it.\\\"\\n       bullet
        \\\"Slide the two glass plates into the casting frame. Engage the pressure
        cams to secure the glass cassette in the\\n       casting frame.\\\"\\n       bullet
        \\\"Check the short plate facing to front of the frame and the labeling on
        the spacer plate is up.\\\"\\n       bullet \\\"Check that both plates are
        flush at bottom to avoid leakage.\\\"\\n       bullet \\\"Repeat the steps
        to assemble all the glass cassette sandwiches.\\\"\\n       warning \\\"If
        the plates are misaligned or oriented incorrectly, leaking may occur.\\\"\\n
        \      image \\\"Actions/ProteinPurification/casting_frame.jpg\\\"\\n    end\\n
        \ end\\n    \\n  def place_assemble_frame_into_stand(clamping_frame_count)\\n
        \   show do\\n        title \\\"Casting stand assembly\\\" \\n        check
        \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e casting stand\\\"\\n
        \       check \\\"Place the gray foam gasket on the casting stand.\\\"\\n
        \       check \\\"Assemble the casting frames on the casting stand with the
        bottom edges pushed into the gray foam gasket.\\\"\\n        image \\\"Actions/ProteinPurification/casting_stand.jpg\\\"\\n
        \   end\\n  end\\n    \\n    # Load water into glass cassette sandwich for
        testing leaking. Do water test until leaking doesnt occur. If the water level
        is flowing down, it means there's a leaking and reassembly of the glass cassette
        sandwich is needed.\\n  def test_leaking\\n    show do\\n       title \\\"Check
        glass cassette for leakage\\\"\\n       check \\\"Pipetting water between
        the glass cassette sandwich up to just below the edge of the short plate.\\\"\\n
        \      check \\\"Wait for 5 minutes. If there is a leakage, reassemble the
        glass plates.\\\"\\n       timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n       warning \\\"If the plates are misaligned or oriented incorrectly,
        leaking may occur.\\\"\\n    end\\n  end\\n    \\n    # If the leaking doesnt
        occur, remove water from the glass cassette sandwich.\\n  def remove_cassette\\n
        \   show do\\n       title \\\"Remove water\\\"\\n       check \\\"If there
        is no leakage, remove water from the glass cassette sandwich.\\\"\\n       check
        \\\"Use a paper towel to wipe out excess water.\\\"\\n    end\\n  end\\n  \\n
        \ def prepare_aps_solution(gel_count)\\n    show do\\n       title \\\"Prepare
        10% Ammonium persulfate solution\\\"\\n       check \\\"Grab a 1.5 mL tube
        and label with APS\\\"\\n       check \\\"Add #{gel_count*0.02} g of APS powder
        and #{gel_count*200} \xB5l water into the tube.\\\"\\n       bullet \\\"Vortex
        until the powder is fully dissolved.\\\"\\n       image \\\"Actions/ProteinPurification/APS.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_resolving_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*3400} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*4000} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eResolving\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*2500} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*10} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*10}
        mL\\\"]\\n    ]\\n\\n    show do\\n       title \\\"Prepare 12% resolving
        gel solution\\\"\\n        bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet
        \\\"Prepare gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 7 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution. Avoid air
        bubbles.\\\"\\n        image \\\"Actions/ProteinPurification/resolving_buffer.jpg\\\"\\n
        \   end\\n  end\\n\\n  def add_isopropanol\\n    show do\\n       title \\\"Overlay
        isopropanol\\\"\\n       check \\\"Slowly pipette 1 mL of isopropanol to the
        top layer of gel.\\\"\\n       warning \\\"Not to disturb the gel solution.\\\"\\n
        \   end\\n  end         \\n\\n  def set_timer_1hrs\\n    show do\\n      title
        \\\"Wait for 1 hour\\\"\\n      bullet \\\"Set a 1-hr timer.\\\" \\n      timer
        initial: { hours: 1, minutes: 0, seconds: 0}\\n      bullet \\\"When the timer
        is up, pour off isopropanol. Use a paper towel to wipe out excess isopropanol.\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_stacking_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*2050} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*1650} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eStacking\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*1250} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*50} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*25} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*5} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*5}
        mL\\\"]\\n    ]\\n    show do\\n        title \\\"Stacking gel casting\\\"\\n
        \       bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet \\\"Prepare
        gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 3 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution and insert
        a comb between the two glass plate. Avoid air bubbles.\\\"\\n        image
        \\\"Actions/ProteinPurification/stacking_buffer_and_comb.jpg\\\"\\n\\n    end\\n
        \ end\\n\\n  def set_timer_30mins\\n    show do\\n        title \\\"Wait for
        30 minutes\\\"\\n        bullet \\\"Set a 30-mins timer.\\\" \\n        timer
        initial: { hours: 0, minutes: 30, seconds: 0}\\n      \\n    end\\n  end\\n
        \ \\n  def place_gel_into_clamping(clamping_frame_count)\\n    show do\\n
        \       title \\\"Electrode assembly\\\"\\n        bullet \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e
        clamping frame(s). The red marking should be on your left.\\\"\\n        bullet
        \\\"Set the clamping frame to the green arms open position on the bench.\\\"\\n
        \       bullet \\\"Gently remove the comb from the glass cassette sandwiche.\\\"\\n
        \       bullet \\\"Release the glass cassette from the casting frame.\\\"\\n
        \       bullet \\\"Place a gel sandwich into the front side of the clamping
        frame with the short plate facing inward.\\\"\\n        warning \\\"If an
        odd number of gels is being run, make sure to use a buffer dam (as shown in
        the picture).\\\"\\n        bullet \\\"Hold the glass cassettes in place and
        slide the green arms of the clamping frame over the gels. Lock gel cassettes
        into place.\\\"\\n        warning \\\"Do not attempt to lock the green arms
        without ensuring the gel cassettes are aligned.\\\"\\n        image \\\"Actions/ProteinPurification/clamping_frame.jpg\\\"\\n
        \   end\\n  end\\n  \\n=begin\\n  def set_a_running_tank(tank_count)\\n    show
        do\\n        title \\\"set up the power supply\\\"\\n        bullet \\\"In
        the gel room, obtain a power supply and set it to 100 V and with a 60 minute
        timer.\\\"\\n        bullet \\\"Grab #{tank_count} gel tanks and lids. Attach
        the electrodes of a lid to the power supply. Make sure to align the color-coded
        plugs and jacks.\\\"\\n    end\\n  end\\n=end\\n\\n  def place_frames_into_tank(tank_count,clamping_frame_count)\\n
        \   show do\\n        title \\\"Gel tank preparation\\\"\\n        bullet
        \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e gel running tank(s).\\\"\\n
        \       bullet \\\"The red marking on the top inside edge of tank should be
        on your left (as shown in the picture).\\\"\\n        bullet \\\"Place the
        electrode assembly in the gel running tank. Make sure that the red electrode
        is matching with the red marking on the top inside left edge of the tank.\\\"\\n
        \       image \\\"Actions/ProteinPurification/running_tank.jpg\\\"\\n    end
        \ \\n  end\\n  \\n  def label_gel_id(op_out_gel)\\n    show do \\n        title
        \\\"Label gel ID\\\"\\n        bullet \\\"Write ID: #{op_out_gel.to_sentence}
        on a piece of lab tape and affix it on the gel glass cassette.\\\"\\n    end\\n
        \ end\\n  \\n  def running_buffer_preparation(running_buffer,water)\\n    show
        do\\n        title \\\"Running buffer preparation\\\"\\n        check \\\"Grab
        a beaker or large measuring cup. Add #{water} mL of water to it.\\\"\\n        check
        \\\"Add #{running_buffer} mL of premixed 10x Tris/glycine/SDS running buffer
        to the beaker.\\\"\\n        check \\\"Stir for 5 minutes.\\\"\\n        timer
        initial: { hours: 0, minutes: 5, seconds: 0}\\n        image \\\"Actions/ProteinPurification/running_buffer.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def pour_running_buffer\\n    show do\\n        title
        \\\"Fill tank with Running buffer\\\"\\n        bullet \\\"Fill up chamber
        of the electrode assembly with running buffer to just under the edge of the
        gel plates (as shown in the picture).\\\"\\n        bullet \\\"Wait for 5
        minutes. Check the chamber for leakage before fill the lower chamber.\\\"
        \\n        bullet \\\"If there is a leakage, pour running buffer back to the
        beaker. Open the green arms of clamping frame and reassemble it. Check if
        the short plates sit just below the notch at the top of the green gasket.\\\"\\n
        \       timer initial: { hours: 0, minutes: 5, seconds: 0}\\n        bullet
        \\\"Fill the lower chamber with running buffer to the indicated level. (2-Gels
        or 4-Gels line markings on the running gel tank.)\\\"\\n        image \\\"Actions/ProteinPurification/leaking_check.jpg\\\"\\n
        \   end\\n  end\\n\\nend\",\"parent_id\":1543,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:18:47.000-08:00\",\"updated_at\":\"2018-11-07T21:18:47.000-08:00\",\"user_id\":200},{\"id\":90789,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n
        \ include Feedback\\n  def main\\n    op_count = operations.size\\n\\n    #
        1 batch           -\\u003e 3 inputs: before, after, iptg\\n    # 1 gel             -\\u003e
        max. 3 batches [marker, batch1, batch2, batch3]\\n    # 1 clamping frame  -\\u003e
        max. 2 gels\\n    # 1 tank            -\\u003e max. 2 frames\\n    \\n    gel_count
        = (op_count/3).floor\\n    remainder = op_count % 3\\n    if remainder !=
        0\\n        gel_count = gel_count + 1\\n    end\\n    \\n    before = operations.size\\n
        \   \\n    #insert virtual operations according to gel_count\\n    #(0...op_count).each
        do |l|\\n    #    insert_operation 3*l, VirtualOperation.new\\n    #    insert_operation
        3*l+1, VirtualOperation.new\\n    #end\\n    \\n    operations.make\\n    \\n
        \   op_out_gel = []\\n    operations.output_collections[\\\"SDS Gel\\\"].each
        do |op_collection|\\n        op_out_gel \\u003c\\u003c op_collection.id\\n
        \   end\\n    \\n    clamping_frame_count = (op_count/6).floor\\n    remainder
        = op_count % 6\\n    if remainder != 0\\n        clamping_frame_count = clamping_frame_count
        + 1\\n    end\\n    \\n    running_buffer=0\\n    water=0\\n    for i in 1..clamping_frame_count\\n
        \       if i%2 == 0\\n            running_buffer = running_buffer + 20\\n
        \           water = 10*running_buffer - 20\\n        else\\n            running_buffer
        = running_buffer + 80\\n            water = 10*running_buffer - 80\\n        end\\n
        \   end\\n    \\n    tank_count = (op_count/12).floor\\n    remainder = op_count
        % 12\\n    if remainder != 0\\n        tank_count = tank_count + 1\\n    end\\n\\n
        \   #show do\\n        #title \\\"Gel / Frame / Tank\\\"\\n        #note \\\"#{op_count}
        batches, #{gel_count} gels, #{frame_count} frames, #{tank_count} tanks\\\"\\n
        \   #end\\n    \\n    # Place the casting frame at upright coner with the
        pressure cams in the open position and facing to a flat surface.\\n    # Make
        sure all glass plates are clean!\\n    place_casting_frame(gel_count,clamping_frame_count)\\n
        \       \\n    # Place a short plate on the top of a spacer plate.\\n    #
        Slide the two glass plates into the casting frame, keeping the short plate
        facing to front of the frame.\\n    place_short_plate_slide\\n        \\n
        \   # When the glass plates are in place, engage the pressure cams to secure
        the glass cassette sandwich in the casting frame. Make sure that both plates
        are flushed at the bottom. [Note] Leaking may occur if the plates are not
        flushed at the bottom.\\n        \\n    # Place the casting frame on the casting
        stand by positioning the casting frame onto the casting gasket.\\n    # Assemble
        the casting frame on the casting stand.\\n    place_assemble_frame_into_stand(clamping_frame_count)\\n
        \       \\n    # Load water into glass cassette sandwich for testing leaking.
        Do water test until leaking doesnt occur. If the water level is flowing down,
        it means there's a leaking and reassembly of the glass cassette sandwich is
        needed.\\n    test_leaking\\n        \\n    # If the leaking doesnt occur,
        remove water from the glass cassette sandwich.\\n    remove_cassette\\n    \\n
        \   prepare_aps_solution(gel_count)\\n    # Prepare one 12% resolving gel:
        take one 50mL falcon tube and label design ID, and add:\\n    # - 3.4mL water\\n
        \   # - 4mL acrylamide\\n    # - 2.5mL resolving gel buffer\\n    # - 0.1mL
        10% SDS buffer\\n    prepare_resolving_gel(gel_count)\\n        \\n    # Prepare
        one 10% stacking gel: take one 50mL falcon tube and label design ID, and add\\n
        \   # - 4.1mL water\\n    # - 3.3mL acrylamide\\n    # - 2.5mL stacking buffer\\n
        \   # - 0.1mL 10% SDS buffer\\n        \\n    # Fresh prepare APS solution:\\n
        \   # - Take one Eppendorf\\n    # - Add 0.01g APS powder to 100uL water\\n
        \   # - Shake it well until the powder fully dissolved\\n    \\n        \\n
        \   # Take the tube containing resolving gel buffer\\n    # - add 100ul APS
        solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 7mL to gel cassette sandwich.\\n      \\n    # Add 1mL isopropanol
        on the top of the gel buffer in the gel cassette sandwich.\\n    add_isopropanol\\n
        \       \\n    # Wait for 1hr.\\n    set_timer_1hrs\\n        \\n    # Pour
        off isopropanol, remove the remain isopropanol by a paper towel if needed\\n
        \       \\n    # Take the tube containing stacking gel buffer\\n    # - add
        50ul APS solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 3ml to gel cassette sandwich and insert comb to the cassette\\n
        \   prepare_stacking_gel(gel_count)\\n     \\n    # Wait for 30mins\\n    set_timer_30mins\\n
        \   \\n    place_gel_into_clamping(clamping_frame_count)\\n    \\n    #set_a_running_tank(tank_count)\\n
        \   \\n    place_frames_into_tank(tank_count,clamping_frame_count)\\n    \\n
        \   label_gel_id(op_out_gel)\\n    \\n    running_buffer_preparation(running_buffer,water)
        \  \\n    # Pull comb straight up to remove.\\n    \\n    pour_running_buffer\\n
        \   \\n    \\n    \\n    operations.store\\n\\n    return {}\\n  end\\n  \\n
        \ def place_casting_frame(gel_count,clamping_frame_count)\\n    show do\\n
        \      title \\\"Glass cassette preparation\\\"\\n       check \\\"Grab the
        follwing items:\\\"\\n       bullet \\\"#{gel_count} short plate\\\"\\n       bullet
        \\\"#{gel_count} spacer plate\\\"\\n       bullet \\\"#{gel_count} comb\\\"\\n
        \      bullet \\\"#{gel_count} casting frame\\\"\\n       #bullet \\\"#{clamping_frame_count}
        casting stand\\\"\\n       bullet \\\"#{gel_count} gray foam gasket\\\"\\n
        \      check \\\"Make sure the glass plates are dry and clean. If not, spray
        Ethanol on glass plates and wipe dry with Kimwipes.\\\"\\n       image \\\"Actions/ProteinPurification/casting_tool.jpg\\\"\\n
        \   end\\n  end\\n\\n  def place_short_plate_slide\\n    show do\\n       title
        \\\"Assemble glass cassette sandwich\\\"\\n       bullet \\\"Place a casting
        frame upright with the pressure cams in the open position.\\\"\\n       bullet
        \\\"Grab a spacer plate and place a short plate on top of it.\\\"\\n       bullet
        \\\"Slide the two glass plates into the casting frame. Engage the pressure
        cams to secure the glass cassette in the\\n       casting frame.\\\"\\n       bullet
        \\\"Check the short plate facing to front of the frame and the labeling on
        the spacer plate is up.\\\"\\n       bullet \\\"Check that both plates are
        flush at bottom to avoid leakage.\\\"\\n       bullet \\\"Repeat the steps
        to assemble all the glass cassette sandwiches.\\\"\\n       warning \\\"If
        the plates are misaligned or oriented incorrectly, leaking may occur.\\\"\\n
        \      image \\\"Actions/ProteinPurification/casting_frame.jpg\\\"\\n    end\\n
        \ end\\n    \\n  def place_assemble_frame_into_stand(clamping_frame_count)\\n
        \   show do\\n        title \\\"Casting stand assembly\\\" \\n        check
        \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e casting stand\\\"\\n
        \       check \\\"Place the gray foam gasket on the casting stand.\\\"\\n
        \       check \\\"Assemble the casting frames on the casting stand with the
        bottom edges pushed into the gray foam gasket.\\\"\\n        image \\\"Actions/ProteinPurification/casting_stand.jpg\\\"\\n
        \   end\\n  end\\n    \\n    # Load water into glass cassette sandwich for
        testing leaking. Do water test until leaking doesnt occur. If the water level
        is flowing down, it means there's a leaking and reassembly of the glass cassette
        sandwich is needed.\\n  def test_leaking\\n    show do\\n       title \\\"Check
        glass cassette for leakage\\\"\\n       check \\\"Pipetting water between
        the glass cassette sandwich up to just below the edge of the short plate.\\\"\\n
        \      check \\\"Wait for 5 minutes. If there is a leakage, reassemble the
        glass plates.\\\"\\n       timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n       warning \\\"If the plates are misaligned or oriented incorrectly,
        leaking may occur.\\\"\\n    end\\n  end\\n    \\n    # If the leaking doesnt
        occur, remove water from the glass cassette sandwich.\\n  def remove_cassette\\n
        \   show do\\n       title \\\"Remove water\\\"\\n       check \\\"If there
        is no leakage, remove water from the glass cassette sandwich.\\\"\\n       check
        \\\"Use a paper towel to wipe out excess water.\\\"\\n    end\\n  end\\n  \\n
        \ def prepare_aps_solution(gel_count)\\n    show do\\n       title \\\"Prepare
        10% Ammonium persulfate solution\\\"\\n       check \\\"Grab a 1.5 mL tube
        and label with APS\\\"\\n       check \\\"Add #{gel_count*0.02} g of APS powder
        and #{gel_count*200} \xB5l water into the tube.\\\"\\n       bullet \\\"Vortex
        until the powder is fully dissolved.\\\"\\n       image \\\"Actions/ProteinPurification/APS.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_resolving_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*3400} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*4000} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eResolving\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*2500} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*10} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*10}
        mL\\\"]\\n    ]\\n\\n    show do\\n       title \\\"Prepare 12% resolving
        gel solution\\\"\\n        bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet
        \\\"Prepare gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 7 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution. Avoid air
        bubbles.\\\"\\n        image \\\"Actions/ProteinPurification/resolving_buffer.jpg\\\"\\n
        \   end\\n  end\\n\\n  def add_isopropanol\\n    show do\\n       title \\\"Overlay
        isopropanol\\\"\\n       check \\\"Slowly pipette 1 mL of isopropanol to the
        top layer of gel.\\\"\\n       warning \\\"Not to disturb the gel solution.\\\"\\n
        \   end\\n  end         \\n\\n  def set_timer_1hrs\\n    show do\\n      title
        \\\"Wait for 1 hour\\\"\\n      bullet \\\"Set a 1-hr timer.\\\" \\n      timer
        initial: { hours: 1, minutes: 0, seconds: 0}\\n      bullet \\\"When the timer
        is up, pour off isopropanol. Use a paper towel to wipe out excess isopropanol.\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_stacking_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*2050} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*1650} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eStacking\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*1250} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*50} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*25} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*5} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*5}
        mL\\\"]\\n    ]\\n    show do\\n        title \\\"Stacking gel casting\\\"\\n
        \       bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet \\\"Prepare
        gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 3 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution and insert
        a comb between the two glass plate. Avoid air bubbles.\\\"\\n        image
        \\\"Actions/ProteinPurification/stacking_buffer_and_comb.jpg\\\"\\n\\n    end\\n
        \ end\\n\\n  def set_timer_30mins\\n    show do\\n        title \\\"Wait for
        30 minutes\\\"\\n        bullet \\\"Set a 30-mins timer.\\\" \\n        timer
        initial: { hours: 0, minutes: 30, seconds: 0}\\n      \\n    end\\n  end\\n
        \ \\n  def place_gel_into_clamping(clamping_frame_count)\\n    show do\\n
        \       title \\\"Electrode assembly\\\"\\n        bullet \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e
        clamping frame(s). The red marking should be on your left.\\\"\\n        bullet
        \\\"Set the clamping frame to the green arms open position on the bench.\\\"\\n
        \       bullet \\\"Gently remove the comb from the glass cassette sandwiche.\\\"\\n
        \       bullet \\\"Release the glass cassette from the casting frame.\\\"\\n
        \       bullet \\\"Place a gel sandwich into the front side of the clamping
        frame with the short plate facing inward.\\\"\\n        warning \\\"If an
        odd number of gels is being run, make sure to use a buffer dam (as shown in
        the picture).\\\"\\n        bullet \\\"Hold the glass cassettes in place and
        slide the green arms of the clamping frame over the gels. Lock gel cassettes
        into place.\\\"\\n        warning \\\"Do not attempt to lock the green arms
        without ensuring the gel cassettes are aligned.\\\"\\n        image \\\"Actions/ProteinPurification/clamping_frame.jpg\\\"\\n
        \   end\\n  end\\n  \\n=begin\\n  def set_a_running_tank(tank_count)\\n    show
        do\\n        title \\\"set up the power supply\\\"\\n        bullet \\\"In
        the gel room, obtain a power supply and set it to 100 V and with a 60 minute
        timer.\\\"\\n        bullet \\\"Grab #{tank_count} gel tanks and lids. Attach
        the electrodes of a lid to the power supply. Make sure to align the color-coded
        plugs and jacks.\\\"\\n    end\\n  end\\n=end\\n\\n  def place_frames_into_tank(tank_count,clamping_frame_count)\\n
        \   show do\\n        title \\\"Gel tank preparation\\\"\\n        bullet
        \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e gel running tank(s).\\\"\\n
        \       bullet \\\"The red marking on the top inside edge of tank should be
        on your left (as shown in the picture).\\\"\\n        bullet \\\"Place the
        electrode assembly in the gel running tank. Make sure that the red electrode
        is matching with the red marking on the top inside left edge of the tank.\\\"\\n
        \       image \\\"Actions/ProteinPurification/running_tank.jpg\\\"\\n    end
        \ \\n  end\\n  \\n  def label_gel_id(op_out_gel)\\n    show do \\n        title
        \\\"Label gel ID\\\"\\n        bullet \\\"Write ID: #{op_out_gel.to_sentence}
        on a piece of lab tape and affix it on the gel glass cassette.\\\"\\n    end\\n
        \ end\\n  \\n  def running_buffer_preparation(running_buffer,water)\\n    show
        do\\n        title \\\"Running buffer preparation\\\"\\n        check \\\"Grab
        a beaker or large measuring cup. Add #{water} mL of water to it.\\\"\\n        check
        \\\"Add #{running_buffer} mL of premixed 10x Tris/glycine/SDS running buffer
        to the beaker.\\\"\\n        check \\\"Stir for 5 minutes.\\\"\\n        timer
        initial: { hours: 0, minutes: 5, seconds: 0}\\n        image \\\"Actions/ProteinPurification/running_buffer.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def pour_running_buffer\\n    show do\\n        title
        \\\"Fill tank with Running buffer\\\"\\n        bullet \\\"Fill up chamber
        of the electrode assembly with running buffer to just under the edge of the
        gel plates (as shown in the picture).\\\"\\n        bullet \\\"Wait for 5
        minutes. Check the chamber for leakage before fill the lower chamber. If there
        is a leakage, pour running buffer back to the beaker. Open the green arms
        of clamping frame and reassemble it. Check if the short plates sit just below
        the notch at the top of the green gasket.\\\"\\n        timer initial: { hours:
        0, minutes: 5, seconds: 0}\\n        bullet \\\"Fill the lower chamber with
        running buffer to the indicated level. (2-Gels or 4-Gels line markings on
        the running gel tank.)\\\"\\n        image \\\"Actions/ProteinPurification/leaking_check.jpg\\\"\\n
        \   end\\n  end\\n\\nend\",\"parent_id\":1543,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:17:50.000-08:00\",\"updated_at\":\"2018-11-07T21:17:50.000-08:00\",\"user_id\":200},{\"id\":90788,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n    \\n    operations.retrieve.make\\n\\n
        \   op_in_protein = []\\n    op_out_protein = []\\n    op_count = 0\\n    operations.running.each
        do |op|\\n        op_count = op_count + 1\\n        op_in_protein \\u003c\\u003c
        op.input(\\\"Protein\\\").item.id\\n        op_out_protein \\u003c\\u003c
        op.output(\\\"Protein\\\").item.id\\n    end\\n\\n    # Set the Refrigerated
        Centrifuge to 4\xB0C first.\\n    set_refrig_centrifuge_temp\\n        \\n
        \   # Take one concentrator and label it with design ID.\\n    take_and_label_concentrator(op_count)\\n
        \       \\n    # Add 15mL water into the concentrator and spin it under 3000g
        for 10mins at 4\xB0C.\\n    add_water_and_centrifuge(op_count)\\n        \\n
        \   # Remove the concentrator from the centrifuge and discard the water into
        the filtrate collector.\\n        \\n    # Add 15mL elution to the sample
        container and spin it under 3000g for 30mins at 4\xB0C.\\n    add_elution_and_centrifuge(op_count,op_in_protein)\\n
        \   \\n    spin_another_30mins\\n    \\n    take_and_label_eppendorf(op_count,op_out_protein)\\n
        \   \\n     # Transfer the 1mL sample to the labeled Eppendorf.\\n    transfer_sample_to_eppendorf(op_count,op_in_protein,op_out_protein)\\n
        \   \\n    # Spin the concentrator under 30000g at 4\xB0C until the sample
        volume reaches 1mL.\\n        \\n    # Keep the sample on ice.\\n    \\n    pro_concentration
        = measure_concentration(op_out_protein)\\n        \\n    # Record the protein
        concentration.\\n    i = 0\\n    operations.running.each do |op|\\n        protein_out
        = op.output(\\\"Protein\\\").item\\n        protein_out.associate :protein_concentration,
        pro_concentration[i]\\n        i = i + 1\\n    end\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true, method: 'boxes')\\n    \\n    return {}\\n
        \ end\\n  \\n  def set_refrig_centrifuge_temp\\n    show do\\n        title
        \\\"Pre-cool a centrifuge\\\"\\n        bullet \\\"Set the centrifuge to 4\xB0C.\\\"\\n
        \       image \\\"Actions/ProteinPurification/centrifuge.jpg\\\"\\n    end\\n
        \ end\\n\\n  def take_and_label_concentrator(op_count)\\n    show do\\n        title
        \\\"Label Centriprep tubes\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        Centriprep tube(s).\\\"\\n        check \\\"Label Centriprep tube(s) from
        1 to #{op_count} on the tube wall.\\\"\\n        image \\\"Actions/ProteinPurification/centriprep_tube.jpg\\\"\\n
        \   end\\n  end\\n    \\n  def add_water_and_centrifuge(op_count)\\n    show
        do\\n        title \\\"Equilibrate Centriprep tubes\\\"\\n        bullet \\\"Perform
        the steps with the following tubes: ID: 1 to #{op_count}\\\"\\n        check
        \\\"Disassemble a Centriprep tube. Take the filtrate collector out of the
        sample container.\\\"\\n        check \\\"Pour water to the fill line on the
        Centriprep sample container.\\\"\\n        check \\\"Reassemble the Centriprep
        tube and spin at 3000g for 10 minutes.\\\"\\n        warning \\\"Make sure
        to balance.\\\"\\n        check \\\"Remove Centriprep tubes from the centrifuge
        and empty tubes.\\\"\\n        image \\\"Actions/ProteinPurification/centriprep_tube_assemble.jpg\\\"\\n
        \   end\\n  end\\n    \\n  def add_elution_and_centrifuge(op_count,op_in_protein)\\n
        \   op_table = [[\\\"Sample ID\\\",\\\"Centriprep tube ID\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c {content:op_in_protein[i],
        check: true}\\n        row \\u003c\\u003c i+1\\n        op_table \\u003c\\u003c
        row\\n    end\\n    \\n    show do\\n        title \\\"Concentrate protein
        samples\\\"\\n        check \\\"Pour the sample to the corresponding sample
        container of Centriprep tube.\\\"\\n        table op_table\\n        check
        \\\"Reassemble Centriprep tubes and spin at 3000g for 40 minutes.\\\"\\n        check
        \\\"Remove Centriprep tubes from the centrifuge.\\\"\\n        check \\\"Discard
        flowthrough in the filtrate collector.\\\"\\n        warning \\\"Protein sample
        is concentrated in the \\u003cb\\u003esample container\\u003c/b\\u003e. Be
        careful not to empty a wrong container.\\\"\\n        image \\\"Actions/ProteinPurification/collect_sample.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def spin_another_30mins\\n    show do\\n        title
        \\\"Spin Centriprep tubes again\\\"\\n        check \\\"Reassemble Centriprep
        tubes and spin at 3000g for 10 minutes.\\\"\\n        check \\\"Remove Centriprep
        tubes from the centrifuge.\\\"\\n    end\\n  end\\n  \\n  def take_and_label_eppendorf(op_count,op_out_protein)\\n
        \   show do\\n        title \\\"Grab and label tubes\\\"\\n        check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 1.5 mL tubes.\\\"\\n        check
        \\\"Label tubes with ID: #{op_out_protein.to_sentence}.\\\"\\n    end\\n  end\\n
        \ \\n def transfer_sample_to_eppendorf(op_count,op_in_protein,op_out_protein)\\n
        \   op_table = [[\\\"Centriprep tube ID\\\",\\\"1.5 mL tube ID\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c i+1\\n
        \       row \\u003c\\u003c {content:op_out_protein[i], check: true}\\n        op_table
        \\u003c\\u003c row\\n    end\\n    \\n    show do\\n        title \\\"Collect
        Samples\\\"\\n        check \\\"Grab a ice busket and fill it with ice.\\\"\\n
        \       check \\\"Set a P1000 pipettor to 500 \xB5l and transfer sample to
        the corresponding 1.5 mL tube. Keep samples on ice.\\\"\\n        table op_table\\n
        \       warning \\\"If sample volume is more than 500 \xB5l, don't withdraw
        the sample. Spin the Centriperp tube at 3000g for another 5 minutes or until
        sample volume reaches 500 \xB5l.\\\"\\n        check \\\"Add 100 \xB5l of
        50% Glycerol to each tube: #{op_out_protein.to_sentence} \\\"\\n    end\\n
        \ end\\n  \\n  def measure_concentration(op_out_protein)\\n    protein_concentration
        = []\\n    \\n    op_out_protein.each do |id|\\n        concetration = show
        do\\n            title \\\"Measure protein concentration\\\"\\n            check
        \\\"Open nanodrop in protein mode. Blank with protein blank buffer.\\\"\\n
        \           check \\\"Nanodrop 2 \xB5l protein sample.\\\"\\n            check
        \\\"Enter protein concentration.\\\"\\n            get \\\"number\\\", var:
        \\\"x\\\", label: \\\"Protein concetration of #{id}\\\", default: 0\\n        end\\n
        \       protein_concentration \\u003c\\u003c concetration[:x]\\n    end\\n
        \   return protein_concentration\\n  end\\n\\nend\\n\",\"parent_id\":1541,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:11:18.000-08:00\",\"updated_at\":\"2018-11-07T21:11:18.000-08:00\",\"user_id\":200},{\"id\":90787,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n\\n    operations.retrieve.make\\n\\n
        \   op_in_cell_lysate = []\\n    op_in_resin = []\\n    op_out_protein = []\\n
        \   op_count = 0\\n    operations.running.each do |op|\\n        op_count
        = op_count + 1\\n        op_in_cell_lysate \\u003c\\u003c op.input(\\\"Cell
        Lysate\\\").item.id\\n        op_in_resin \\u003c\\u003c op.input(\\\"Resin\\\").item.id\\n
        \       op_out_protein \\u003c\\u003c op.output(\\\"Protein\\\").item.id\\n
        \   end\\n    \\n    buffer_preparation(op_count)\\n    # Turn on the stopcock
        and let the binding buffer flow through of the column.\\n    turn_on_stopcock_binding(op_count,op_in_resin)\\n
        \       \\n    # Turn off the stopcock.\\n        \\n    # Apply the supernatant
        with design ID into the gravity flow column with resin in it.\\n    apply_supernatnat(op_count,op_in_cell_lysate,op_in_resin)\\n
        \       \\n    # Turn on the stopcock, let the supernatant flow through the
        column slowly.\\n    turn_on_stopcock_supernatant op_in_resin\\n        \\n
        \   # Add 50mL wash buffer to the column and let it flow through the column
        completely. Then turn off the stopcock.\\n    add_wash_buff(op_count,op_in_resin)\\n
        \       \\n    # Replace the beaker underneath the column with a new 50mL
        Falcon tube.\\n    replace_beaker_with_falcon_tube(op_count,op_in_resin,op_out_protein)\\n
        \       \\n    # Add 15mL elution buffer into the column.\\n    add_elution_buff(op_count,op_in_resin)\\n
        \       \\n    # Turn on the stopcock and let it flow through the column then
        collect it in the Falcon tube.\\n    turn_on_stopcock_collect(op_in_resin,op_out_protein)\\n
        \       \\n    # Cap the tube and put it on the ice.\\n\\n    operations.running.each
        do |op|\\n      op.output(\\\"Protein\\\").child_item.move \\\"4\xB0C or on
        ice for the (next) protocol\\\"\\n    end\\n\\n    operations.store(io: \\\"output\\\",
        interactive: true)\\n\\n    return {}\\n\\n  end\\n  \\n  # approximate final
        concentration of imidazole: 30mM wash buffer/250mM elution buffer\\n  def
        buffer_preparation(op_count)\\n    op_table =[ [\\\"Buffer preparation\\\",\\\"Purification
        buffer volume\\\",\\\"Imidazole volume\\\"],\\n                [{content:\\\"Wash
        buffer\\\", style: {color: \\\"#00f\\\"}},{content: \\\"#{op_count*25} mL\\\",
        check: true, style:{color:\\\"#00f\\\"}},{content: \\\"#{op_count*150} \xB5l\\\",
        check: true, style:{color:\\\"#00f\\\"}}],\\n                [{content:\\\"Elution
        Buffer\\\", style: {color:\\\"#060\\\"}},{content: \\\"#{op_count*15} mL\\\",
        check: true, style:{color:\\\"#060\\\"}},{content: \\\"#{op_count*750 } \xB5l\\\",
        check: true, style:{color:\\\"#060\\\"}}]\\n        ]\\n    show do\\n        title
        \\\"Prepare buffers\\\"\\n        bullet \\\"Grab the following items:\\\"\\n
        \       check \\\"Purification buffer, in the Media Bay.\\\"\\n        check
        \\\"Imidazole aliquot, in a box labeled \\u003cb\\u003eprotein purification\\u003c/b\\u003e
        in -20\xB0C freezer (B1-165)\\\"\\n        check \\\"Grab \\u003cb\\u003e2\\u003c/b\\u003e
        beakers and label them with \\u003cb\\u003eWash Buffer\\u003c/b\\u003e and
        \\u003cb\\u003eElution Buffer\\u003c/b\\u003e.\\\"\\n        bullet \\\"Prepare
        wash buffer and elution buffer according to the following table.\\\"\\n        table
        op_table\\n    end\\n  end\\n\\n  def turn_on_stopcock_binding(op_count,op_in_resin)\\n
        \   show do\\n        title \\\"Remove liquid from the column\\\"\\n        bullet
        \\\"Perform the steps with the following columns: #{op_in_resin.to_sentence}.\\\"\\n
        \       check \\\"Make sure a beaker has been placed underneath each column.\\\"\\n
        \       check \\\"Open the column outlet to allow buffer to move out.\\\"\\n
        \       check \\\"Close the column outlet.\\\"\\n        image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\n
        \   end\\n  end\\n\\n  def apply_supernatnat(op_count,op_in_cell_lysate,op_in_resin)\\n
        \   op_table = [[\\\"Sample ID\\\",\\\"Column ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c {content:op_in_cell_lysate[i],
        check: true}\\n        row \\u003c\\u003c op_in_resin[i]\\n        op_table
        \\u003c\\u003c row\\n    end\\n    show do\\n       title \\\"Apply sample
        to a column\\\"\\n       bullet \\\"Carefully load sample to the corresponding
        column by a diposable dropper.\\\"\\n       bullet \\\"For each column, use
        a new dropper to avoid cross contamination.\\\"\\n       table op_table\\n
        \      warning \\\"Be careful not to disturb the resin in column.\\\"\\n    end\\n
        \ end\\n\\n  def turn_on_stopcock_supernatant op_in_resin\\n    show do\\n
        \      title \\\"Protein binds to Ni-NTA resin\\\"\\n       check \\\"Open
        the column outlet. (ID: #{op_in_resin.to_sentence})\\\"\\n       check \\\"Control
        flow rate by an adaptor (as shown in the picture). Make sample \\u003cb\\u003eSLOWLY\\u003c/b\\u003e
        move out of column.\\\"\\n       check \\\"Close the column outlet.\\\"\\n
        \      image \\\"Actions/ProteinPurification/outlet_angle.jpg\\\"\\n    end\\n
        \ end\\n  \\n  def add_wash_buff(op_count,op_in_resin)\\n    op_table = [[\\\"Column
        ID\\\",\\\"Load wash buffer\\\"]]\\n    for i in 0..(op_count-1)\\n        row
        = []\\n        row \\u003c\\u003c {content:op_in_resin[i], check: true}\\n
        \       row \\u003c\\u003c \\\"25 mL\\\"\\n        op_table \\u003c\\u003c
        row\\n    end   \\n    show do\\n       title \\\"Column wash\\\"\\n       check
        \\\"Add 25 mL of \\u003cb\\u003eWash Buffer\\u003c/b\\u003e to each column.\\\"\\n
        \      #table op_table\\n       check \\\"Open the column outlet to allow
        buffer to move out.\\\"\\n       check \\\"Close the column outlet.\\\"\\n
        \   end\\n  end\\n  \\n  def replace_beaker_with_falcon_tube(op_count,op_in_resin,op_out_protein)\\n
        \   op_table = [[\\\"Column ID\\\",\\\"Falcon tube ID\\\"]]\\n    for i in
        0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c op_in_resin[i]\\n
        \       row \\u003c\\u003c {content:op_out_protein[i], check: true}\\n        op_table
        \\u003c\\u003c row\\n    end   \\n    show do\\n       title \\\"Prepare tubes\\\"\\n
        \      check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 50 mL Falcon
        tube(s).\\\"\\n       check \\\"Label tube(s) with ID: #{op_out_protein.to_sentence}.\\\"\\n
        \      check \\\"Place the corresponding tube underneath the column for collecting
        sample elution.\\\"\\n       table op_table\\n    end\\n  end\\n    \\n  def
        add_elution_buff(op_count,op_in_resin)\\n    op_table = [[\\\"Column ID\\\",\\\"Load
        elution buffer\\\"]]\\n    for i in 0..(op_count-1)\\n        row = []\\n
        \       row \\u003c\\u003c {content:op_in_resin[i], check: true}\\n        row
        \\u003c\\u003c \\\"15 mL\\\"\\n        op_table \\u003c\\u003c row\\n    end\\n
        \   show do\\n       title \\\"Elute Protein from a column\\\"\\n       bullet
        \\\"Add 15 mL of \\u003cb\\u003eElution Buffer\\u003c/b\\u003e to each column.\\\"\\n
        \      table op_table\\n    end\\n  end\\n    \\n  def turn_on_stopcock_collect(op_in_resin,op_out_protein)\\n
        \   show do\\n       title \\\"Collet protein in a tube\\\"\\n       check
        \\\"Open the column outlet. (ID: #{op_in_resin.to_sentence})\\\"\\n       check
        \\\"Control flow rate by an adaptor (as shown in the picture). Make sample
        \\u003cb\\u003eSLOWLY\\u003c/b\\u003e flow through the column.\\\"\\n       check
        \\\"Collect sample in the tube. Screw the cap of #{op_out_protein.to_sentence}.\\\"\\n
        \      image \\\"Actions/ProteinPurification/outlet_angle.jpg\\\"\\n    end\\n
        \ end\\n  \\n  \\nend\",\"parent_id\":1540,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:10:21.000-08:00\",\"updated_at\":\"2018-11-07T21:10:21.000-08:00\",\"user_id\":200},{\"id\":90786,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n\\r\\n
        \   operations.retrieve.make\\r\\n    \\r\\n    op_out_column = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_out_column \\u003c\\u003c op.output(\\\"Affinity Column\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    tube_count = (op_count*20/50).floor\\r\\n        if
        remainer = (op_count*20 % 50) != 0\\r\\n            tube_count = tube_count
        + 1\\r\\n        end\\r\\n    \\r\\n    prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   #  Take a plastic gravity flow column with a two-way stopcock.Label the
        design ID on the column.\\r\\n    label_column(op_count,op_out_column)\\r\\n
        \       \\r\\n    # Put the column onto a support stand with a clamp.\\r\\n
        \   put_column_onto_stand\\r\\n        \\r\\n    # Well-mix the Ni-NTA resin
        and take 2.0mL from the bottle. Add the resin to gravity flow column.\\r\\n
        \   mix_resin(op_count, op_out_column)\\r\\n        \\r\\n    # Place an empty
        beaker underneath the gravity flow column, let the liquid flow through the
        column.\\r\\n    # Load 30mL binding buffer to the column. \\r\\n    # Turn
        on the stopcock on the column, let the binding buffer flow through the column.\\r\\n
        \   # Turn off the stopcock on the column.\\r\\n    # Load 3mL binding buffer
        to the column.\\r\\n    # Empty the beaker underneath the column.\\r\\n    load_20ml_binding_buffer(op_out_column)\\r\\n
        \   \\r\\n    operations.store\\r\\n     \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  #prepare binding buffer (30mM imidazole_final concentration)\\r\\n
        \ #20mL/per column, imidazole aliquot concentration: 5M\\r\\n  def prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   op_table = [[\\\"Item\\\",\\\"Volume\\\"],\\r\\n    [\\\"Purification
        buffer\\\",{content:\\\"#{op_count*19.9} mL\\\", check: true}],\\r\\n    [\\\"Imidazole
        aliquot\\\",{content:\\\"#{op_count*132} \xB5l\\\", check: true}]\\r\\n    ]\\r\\n
        \   show do\\r\\n        title \\\"Prepare binding buffer\\\"\\r\\n        check
        \\\"Grab a beaker and label with \\u003cb\\u003eBinding buffer\\u003c/b\\u003e.\\\"\\r\\n
        \       check \\\"Grab the following items:\\\"\\r\\n        bullet \\\"Purification
        buffer, in the Media Bay\\\"\\r\\n        bullet \\\"Imidazole aliquot, in
        a box labeled \\u003cb\\u003eProtein purification\\u003c/b\\u003e in -20\xB0C
        freezer (B1-165)\\\"\\r\\n        check \\\"Add buffers into the beaker.\\\"\\r\\n
        \       table op_table\\r\\n        #image \\\"Actions/ProteinPurification/purification_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def label_column(op_count,op_out_column)\\r\\n
        \   show do \\r\\n      title \\\"Grab and label columns\\\"\\r\\n      check
        \\\"Grab #{op_count} column(s) and label the column with ID: #{op_out_column.to_sentence}.\\\"\\r\\n
        \     check \\\"Remove the snap-off tip at the bottom of the column. Attach
        a flow adaptor to it.\\\"\\r\\n      check \\\"Close the column outlet\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/empty_column_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def put_column_onto_stand\\r\\n    show
        do\\r\\n       title \\\"Column preparation\\\"\\r\\n       check \\\"Grab
        a support stand with clamps from bench and use the adjustable knob to mount
        the rack at the desired height.\\\"\\r\\n       check \\\"Clamp the middle
        of a column and make sure the column outlet is closed.\\\"\\r\\n       image
        \\\"Actions/ProteinPurification/stand_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def mix_resin(op_count, op_out_column)\\r\\n    op_table
        = [[\\\"Column ID\\\",\\\"Bed volume of Ni-NTA resin\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c {content:op_out_column[i],
        check: true}\\r\\n        row \\u003c\\u003c \\\"2 mL\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n       title \\\"Load
        Ni-NTA resin\\\"\\r\\n       bullet \\\"Perform the steps with the following
        columns: #{op_out_column.to_sentence}.\\\"\\r\\n       bullet \\\"Place a
        beaker underneath each column.\\\"\\r\\n       bullet \\\"Grab Ni-NTA resin
        from 4\xB0C refrigerator (R1-250). Suspend Ni-NTA resin by using a disposable
        dropper.\\\"\\r\\n       bullet \\\"Slowly load Ni-NTA slurry to each column.
        Avoid introducing air bubbles.\\\"\\r\\n       bullet \\\"Wait for 30 seconds
        to allow the resin to settle.\\\"\\r\\n       bullet \\\"Open the column oulet
        and let the liquid move out of the column.\\\"\\r\\n       bullet \\\"Check
        on the bed volume of resin. Make sure it reaches to 2 mL.(as shown in the
        picture.)\\\"\\r\\n       bullet \\\"If the bed volume is less than 2 mL,
        close the column outlet and then load resin.\\\"\\r\\n       image \\\"Actions/ProteinPurification/resin_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_20ml_binding_buffer(op_out_column)\\r\\n
        \   show do\\r\\n       title \\\"Equilibrate Resin\\\"\\r\\n       bullet
        \\\"Perform the steps with the following columns: #{op_out_column.to_sentence}.\\\"\\r\\n
        \      check \\\"Close the column outlet. Gently load 20 mL of binding buffer
        to each column.\\\"\\r\\n       warning \\\"Be careful not to disturb the
        resin\\\"\\r\\n       check \\\"Open the column outlet. Allow the buffer to
        flow through the columns.\\\"\\r\\n       check \\\"Close the column oulet.
        Gently load 1 mL of binding buffer to each column.\\\"\\r\\n       check \\\"Empty
        the beaker underneath each column.\\\"\\r\\n       image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  \\r\\nend\",\"parent_id\":1159,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:06:10.000-08:00\",\"updated_at\":\"2018-11-07T21:06:10.000-08:00\",\"user_id\":200},{\"id\":90785,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n\\r\\n
        \   operations.retrieve.make\\r\\n    \\r\\n    op_out_column = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_out_column \\u003c\\u003c op.output(\\\"Affinity Column\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    tube_count = (op_count*20/50).floor\\r\\n        if
        remainer = (op_count*20 % 50) != 0\\r\\n            tube_count = tube_count
        + 1\\r\\n        end\\r\\n    \\r\\n    prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   #  Take a plastic gravity flow column with a two-way stopcock.Label the
        design ID on the column.\\r\\n    label_column(op_count,op_out_column)\\r\\n
        \       \\r\\n    # Put the column onto a support stand with a clamp.\\r\\n
        \   put_column_onto_stand\\r\\n        \\r\\n    # Well-mix the Ni-NTA resin
        and take 2.0mL from the bottle. Add the resin to gravity flow column.\\r\\n
        \   mix_resin(op_count, op_out_column)\\r\\n        \\r\\n    # Place an empty
        beaker underneath the gravity flow column, let the liquid flow through the
        column.\\r\\n    # Load 30mL binding buffer to the column. \\r\\n    # Turn
        on the stopcock on the column, let the binding buffer flow through the column.\\r\\n
        \   # Turn off the stopcock on the column.\\r\\n    # Load 3mL binding buffer
        to the column.\\r\\n    # Empty the beaker underneath the column.\\r\\n    load_20ml_binding_buffer(op_out_column)\\r\\n
        \   \\r\\n    operations.store\\r\\n     \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  #prepare binding buffer (30mM imidazole_final concentration)\\r\\n
        \ #20mL/per column, imidazole aliquot concentration: 5M\\r\\n  def prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   op_table = [[\\\"Item\\\",\\\"Volume\\\"],\\r\\n    [\\\"Purification
        buffer\\\",{content:\\\"#{op_count*19.9} mL\\\", check: true}],\\r\\n    [\\\"Imidazole
        aliquot\\\",{content:\\\"#{op_count*132} \xB5l\\\", check: true}]\\r\\n    ]\\r\\n
        \   show do\\r\\n        title \\\"Prepare binding buffer\\\"\\r\\n        check
        \\\"Grab a beaker and label with \\u003cb\\u003eBinding buffer\\u003c/b\\u003e.\\\"\\r\\n
        \       check \\\"Grab the following items:\\\"\\r\\n        bullet \\\"Purification
        buffer, in the Media Bay\\\"\\r\\n        bullet \\\"Imidazole aliquot, in
        a box labeled \\u003cb\\u003eProtein purification\\u003c/b\\u003e in -20\xB0C
        freezer (B1-165)\\\"\\r\\n        check \\\"Add buffers into the beaker.\\\"\\r\\n
        \       table op_table\\r\\n        #image \\\"Actions/ProteinPurification/purification_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def label_column(op_count,op_out_column)\\r\\n
        \   show do \\r\\n      title \\\"Grab and label columns\\\"\\r\\n      check
        \\\"Grab #{op_count} column(s) and label the column with ID: #{op_out_column.to_sentence}.\\\"\\r\\n
        \     check \\\"Remove the snap-off tip at the bottom of the column. Attach
        a flow adaptor to it.\\\"\\r\\n      check \\\"Close the column outlet\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/empty_column_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def put_column_onto_stand\\r\\n    show
        do\\r\\n       title \\\"Column preparation\\\"\\r\\n       check \\\"Grab
        a support stand with clamps from bench and use the adjustable knob to mount
        the rack at the desired height.\\\"\\r\\n       check \\\"Clamp the middle
        of a column and make sure the column outlet is closed.\\\"\\r\\n       image
        \\\"Actions/ProteinPurification/stand_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def mix_resin(op_count, op_out_column)\\r\\n    op_table
        = [[\\\"Column ID\\\",\\\"Bed volume of Ni-NTA resin\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c {content:op_out_column[i],
        check: true}\\r\\n        row \\u003c\\u003c \\\"2 mL\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n       title \\\"Load
        Ni-NTA resin\\\"\\r\\n       bullet \\\"Perform the steps with the following
        columns: #{op_out_column.to_sentence}.\\\"\\r\\n       bullet \\\"Place a
        beaker underneath each column.\\\"\\r\\n       bullet \\\"Grab Ni-NTA resin
        from 4\xB0C refrigerator (R1-250). Suspend Ni-NTA resin by using a disposable
        dropper.\\\"\\r\\n       bullet \\\"Slowly load Ni-NTA slurry to each column.
        Avoid introducing air bubbles.\\\"\\r\\n       bullet \\\"Wait for 30 seconds
        to allow the resin to settle.\\\"\\r\\n       bullet \\\"Open the column oulet
        and let the liquid move out of the column.\\\"\\r\\n       bullet \\\"Check
        on the bed volume of resin. Make sure it reaches to 2 mL.(as shown in the
        picture.)\\\"\\r\\n       note \\\"If the bed volume is less than 2 mL, close
        the column outlet and then load resin.\\\"\\r\\n       image \\\"Actions/ProteinPurification/resin_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_20ml_binding_buffer(op_out_column)\\r\\n
        \   show do\\r\\n       title \\\"Equilibrate Resin\\\"\\r\\n       bullet
        \\\"Perform the steps with the following columns: #{op_out_column.to_sentence}.\\\"\\r\\n
        \      check \\\"Close the column outlet. Gently load 20 mL of binding buffer
        to each column.\\\"\\r\\n       warning \\\"Be careful not to disturb the
        resin\\\"\\r\\n       check \\\"Open the column outlet. Allow the buffer to
        flow through the columns.\\\"\\r\\n       check \\\"Close the column oulet.
        Gently load 1 mL of binding buffer to each column.\\\"\\r\\n       check \\\"Empty
        the beaker underneath each column.\\\"\\r\\n       image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  \\r\\nend\",\"parent_id\":1159,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:05:53.000-08:00\",\"updated_at\":\"2018-11-07T21:05:53.000-08:00\",\"user_id\":200},{\"id\":90784,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n\\r\\n
        \   operations.retrieve.make\\r\\n    \\r\\n    op_out_column = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_out_column \\u003c\\u003c op.output(\\\"Affinity Column\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    tube_count = (op_count*20/50).floor\\r\\n        if
        remainer = (op_count*20 % 50) != 0\\r\\n            tube_count = tube_count
        + 1\\r\\n        end\\r\\n    \\r\\n    prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   #  Take a plastic gravity flow column with a two-way stopcock.Label the
        design ID on the column.\\r\\n    label_column(op_count,op_out_column)\\r\\n
        \       \\r\\n    # Put the column onto a support stand with a clamp.\\r\\n
        \   put_column_onto_stand\\r\\n        \\r\\n    # Well-mix the Ni-NTA resin
        and take 2.0mL from the bottle. Add the resin to gravity flow column.\\r\\n
        \   mix_resin(op_count, op_out_column)\\r\\n        \\r\\n    # Place an empty
        beaker underneath the gravity flow column, let the liquid flow through the
        column.\\r\\n    # Load 30mL binding buffer to the column. \\r\\n    # Turn
        on the stopcock on the column, let the binding buffer flow through the column.\\r\\n
        \   # Turn off the stopcock on the column.\\r\\n    # Load 3mL binding buffer
        to the column.\\r\\n    # Empty the beaker underneath the column.\\r\\n    load_20ml_binding_buffer(op_out_column)\\r\\n
        \   \\r\\n    operations.store\\r\\n     \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  #prepare binding buffer (30mM imidazole_final concentration)\\r\\n
        \ #20mL/per column, imidazole aliquot concentration: 5M\\r\\n  def prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   op_table = [[\\\"Item\\\",\\\"Volume\\\"],\\r\\n    [\\\"Purification
        buffer\\\",{content:\\\"#{op_count*19.9} mL\\\", check: true}],\\r\\n    [\\\"Imidazole
        aliquot\\\",{content:\\\"#{op_count*132} \xB5l\\\", check: true}]\\r\\n    ]\\r\\n
        \   show do\\r\\n        title \\\"Prepare binding buffer\\\"\\r\\n        check
        \\\"Grab a beaker and label with \\u003cb\\u003eBinding buffer\\u003c/b\\u003e.\\\"\\r\\n
        \       check \\\"Grab the following items:\\\"\\r\\n        bullet \\\"Purification
        buffer, in the Media Bay\\\"\\r\\n        bullet \\\"Imidazole aliquot, in
        a box labeled \\u003cb\\u003eProtein purification\\u003c/b\\u003e in -20\xB0C
        freezer (B1-165)\\\"\\r\\n        check \\\"Add buffers into the beaker.\\\"\\r\\n
        \       table op_table\\r\\n        #image \\\"Actions/ProteinPurification/purification_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def label_column(op_count,op_out_column)\\r\\n
        \   show do \\r\\n      title \\\"Grab and label columns\\\"\\r\\n      check
        \\\"Grab #{op_count} column(s) and label the column with ID: #{op_out_column.to_sentence}.\\\"\\r\\n
        \     check \\\"Remove the snap-off tip at the bottom of the column. Attach
        a flow adaptor to it.\\\"\\r\\n      check \\\"Close the column outlet\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/empty_column_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def put_column_onto_stand\\r\\n    show
        do\\r\\n       title \\\"Column preparation\\\"\\r\\n       check \\\"Grab
        a support stand with clamps from bench and use the adjustable knob to mount
        the rack at the desired height.\\\"\\r\\n       check \\\"Clamp the middle
        of a column and make sure the column outlet is closed.\\\"\\r\\n       image
        \\\"Actions/ProteinPurification/stand_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def mix_resin(op_count, op_out_column)\\r\\n    op_table
        = [[\\\"Column ID\\\",\\\"Bed volume of Ni-NTA resin\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c {content:op_out_column[i],
        check: true}\\r\\n        row \\u003c\\u003c \\\"2 mL\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n       title \\\"Load
        Ni-NTA resin\\\"\\r\\n       bullet \\\"Perform the steps with the following
        columns: #{op_out_column.to_sentence}.\\\"\\r\\n       check \\\"Place a beaker
        underneath each column.\\\"\\r\\n       check \\\"Grab Ni-NTA resin from 4\xB0C
        refrigerator (R1-250). Suspend Ni-NTA resin by using a disposable dropper.\\\"\\r\\n
        \      check \\\"Slowly load Ni-NTA slurry to each column. Avoid introducing
        air bubbles.\\\"\\r\\n       check \\\"Wait for 30 seconds to allow the resin
        to settle.\\\"\\r\\n       check \\\"Open the column oulet and let the liquid
        move out of the column.\\\"\\r\\n       check \\\"Check on the bed volume
        of resin. Make sure it reaches to 2 mL.(as shown in the picture.)\\\"\\r\\n
        \      note \\\"If the bed volume is less than 2 mL, close the column outlet
        and then load resin.\\\"\\r\\n       image \\\"Actions/ProteinPurification/resin_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_20ml_binding_buffer(op_out_column)\\r\\n
        \   show do\\r\\n       title \\\"Equilibrate Resin\\\"\\r\\n       bullet
        \\\"Perform the steps with the following columns: #{op_out_column.to_sentence}.\\\"\\r\\n
        \      check \\\"Close the column outlet. Gently load 20 mL of binding buffer
        to each column.\\\"\\r\\n       warning \\\"Be careful not to disturb the
        resin\\\"\\r\\n       check \\\"Open the column outlet. Allow the buffer to
        flow through the columns.\\\"\\r\\n       check \\\"Close the column oulet.
        Gently load 1 mL of binding buffer to each column.\\\"\\r\\n       check \\\"Empty
        the beaker underneath each column.\\\"\\r\\n       image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  \\r\\nend\",\"parent_id\":1159,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:05:03.000-08:00\",\"updated_at\":\"2018-11-07T21:05:03.000-08:00\",\"user_id\":200},{\"id\":90783,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n\\r\\n
        \   operations.retrieve.make\\r\\n    \\r\\n    op_out_column = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_out_column \\u003c\\u003c op.output(\\\"Affinity Column\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    tube_count = (op_count*20/50).floor\\r\\n        if
        remainer = (op_count*20 % 50) != 0\\r\\n            tube_count = tube_count
        + 1\\r\\n        end\\r\\n    \\r\\n    prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   #  Take a plastic gravity flow column with a two-way stopcock.Label the
        design ID on the column.\\r\\n    label_column(op_count,op_out_column)\\r\\n
        \       \\r\\n    # Put the column onto a support stand with a clamp.\\r\\n
        \   put_column_onto_stand\\r\\n        \\r\\n    # Well-mix the Ni-NTA resin
        and take 2.0mL from the bottle. Add the resin to gravity flow column.\\r\\n
        \   mix_resin(op_count, op_out_column)\\r\\n        \\r\\n    # Place an empty
        beaker underneath the gravity flow column, let the liquid flow through the
        column.\\r\\n    # Load 30mL binding buffer to the column. \\r\\n    # Turn
        on the stopcock on the column, let the binding buffer flow through the column.\\r\\n
        \   # Turn off the stopcock on the column.\\r\\n    # Load 3mL binding buffer
        to the column.\\r\\n    # Empty the beaker underneath the column.\\r\\n    load_20ml_binding_buffer(op_out_column)\\r\\n
        \   \\r\\n    operations.store\\r\\n     \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  #prepare binding buffer (30mM imidazole_final concentration)\\r\\n
        \ #20mL/per column, imidazole aliquot concentration: 5M\\r\\n  def prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   op_table = [[\\\"Item\\\",\\\"Volume\\\"],\\r\\n    [\\\"Purification
        buffer\\\",{content:\\\"#{op_count*19.9} mL\\\", check: true}],\\r\\n    [\\\"Imidazole
        aliquot\\\",{content:\\\"#{op_count*132} \xB5l\\\", check: true}]\\r\\n    ]\\r\\n
        \   show do\\r\\n        title \\\"Prepare binding buffer\\\"\\r\\n        check
        \\\"Grab a beaker and label with \\u003cb\\u003eBinding buffer\\u003c/b\\u003e.\\\"\\r\\n
        \       check \\\"Grab the following items:\\\"\\r\\n        bullet \\\"Purification
        buffer, in the Media Bay\\\"\\r\\n        bullet \\\"Imidazole aliquot, in
        a box labeled \\u003cb\\u003eProtein purification\\u003c/b\\u003e in -20\xB0C
        freezer (B1-165)\\\"\\r\\n        check \\\"Add buffers into the beaker.\\\"\\r\\n
        \       table op_table\\r\\n        #image \\\"Actions/ProteinPurification/purification_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def label_column(op_count,op_out_column)\\r\\n
        \   show do \\r\\n      title \\\"Grab and label columns\\\"\\r\\n      check
        \\\"Grab #{op_count} column(s) and label the column with ID: #{op_out_column.to_sentence}.\\\"\\r\\n
        \     check \\\"Remove the snap-off tip at the bottom of the column. Attach
        a flow adaptor to it.\\\"\\r\\n      check \\\"Close the column outlet\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/empty_column_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def put_column_onto_stand\\r\\n    show
        do\\r\\n       title \\\"Column preparation\\\"\\r\\n       check \\\"Grab
        a support stand with clamps from bench and use the adjustable knob to mount
        the rack at the desired height.\\\"\\r\\n       check \\\"Clamp the middle
        of a column and make sure the column outlet is closed.\\\"\\r\\n       image
        \\\"Actions/ProteinPurification/stand_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def mix_resin(op_count, op_out_column)\\r\\n    op_table
        = [[\\\"Column ID\\\",\\\"Bed volume of Ni-NTA resin\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c {content:op_out_column[i],
        check: true}\\r\\n        row \\u003c\\u003c \\\"2 mL\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n       title \\\"Load
        Ni-NTA resin\\\"\\r\\n       bullet \\\"Perform the steps with the following
        columns: #{op_out_column.to_sentence}.\\\"\\r\\n       check \\\"Place a beaker
        underneath each column.\\\"\\r\\n       check \\\"Grab Ni-NTA resin from 4\xB0C
        refrigerator (R1-250). Suspend Ni-NTA resin by using a disposable dropper.\\\"\\r\\n
        \      check \\\"Slowly load Ni-NTA slurry to each column. Avoid introducing
        air bubbles.\\\"\\r\\n       check \\\"Wait for 30 seconds to allow the resin
        to settle.\\\"\\r\\n       check \\\"Open the column oulets and let the liquid
        move out of the column.\\\"\\r\\n       check \\\"Check on the bed volume
        of resin. Make sure it reaches to 2 mL.(as shown in the picture.)\\\"\\r\\n
        \      note \\\"If the bed volume is less than 2 mL, close the column outlet
        and then load resin.\\\"\\r\\n       image \\\"Actions/ProteinPurification/resin_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_20ml_binding_buffer(op_out_column)\\r\\n
        \   show do\\r\\n       title \\\"Equilibrate Resin\\\"\\r\\n       bullet
        \\\"Perform the steps with the following columns: #{op_out_column.to_sentence}.\\\"\\r\\n
        \      check \\\"Close the column outlet. Gently load 20 mL of binding buffer
        to each column.\\\"\\r\\n       warning \\\"Be careful not to disturb the
        resin\\\"\\r\\n       check \\\"Open the column outlet. Allow the buffer to
        flow through the columns.\\\"\\r\\n       check \\\"Close the column oulet.
        Gently load 1 mL of binding buffer to each column.\\\"\\r\\n       check \\\"Empty
        the beaker underneath each column.\\\"\\r\\n       image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  \\r\\nend\",\"parent_id\":1159,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:04:42.000-08:00\",\"updated_at\":\"2018-11-07T21:04:42.000-08:00\",\"user_id\":200},{\"id\":90782,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n\\r\\n
        \   operations.retrieve.make\\r\\n    \\r\\n    op_out_column = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_out_column \\u003c\\u003c op.output(\\\"Affinity Column\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    tube_count = (op_count*20/50).floor\\r\\n        if
        remainer = (op_count*20 % 50) != 0\\r\\n            tube_count = tube_count
        + 1\\r\\n        end\\r\\n    \\r\\n    prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   #  Take a plastic gravity flow column with a two-way stopcock.Label the
        design ID on the column.\\r\\n    label_column(op_count,op_out_column)\\r\\n
        \       \\r\\n    # Put the column onto a support stand with a clamp.\\r\\n
        \   put_column_onto_stand\\r\\n        \\r\\n    # Well-mix the Ni-NTA resin
        and take 2.0mL from the bottle. Add the resin to gravity flow column.\\r\\n
        \   mix_resin(op_count, op_out_column)\\r\\n        \\r\\n    # Place an empty
        beaker underneath the gravity flow column, let the liquid flow through the
        column.\\r\\n    # Load 30mL binding buffer to the column. \\r\\n    # Turn
        on the stopcock on the column, let the binding buffer flow through the column.\\r\\n
        \   # Turn off the stopcock on the column.\\r\\n    # Load 3mL binding buffer
        to the column.\\r\\n    # Empty the beaker underneath the column.\\r\\n    load_20ml_binding_buffer(op_out_column)\\r\\n
        \   \\r\\n    operations.store\\r\\n     \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  #prepare binding buffer (30mM imidazole_final concentration)\\r\\n
        \ #20mL/per column, imidazole aliquot concentration: 5M\\r\\n  def prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   op_table = [[\\\"Item\\\",\\\"Volume\\\"],\\r\\n    [\\\"Purification
        buffer\\\",{content:\\\"#{op_count*19.9} mL\\\", check: true}],\\r\\n    [\\\"Imidazole
        aliquot\\\",{content:\\\"#{op_count*132} \xB5l\\\", check: true}]\\r\\n    ]\\r\\n
        \   show do\\r\\n        title \\\"Prepare binding buffer\\\"\\r\\n        check
        \\\"Grab a beaker and label with \\u003cb\\u003eBinding buffer\\u003c/b\\u003e.\\\"\\r\\n
        \       check \\\"Grab the following items:\\\"\\r\\n        bullet \\\"Purification
        buffer, in the Media Bay\\\"\\r\\n        bullet \\\"Imidazole aliquot, in
        a box labeled \\u003cb\\u003eProtein purification\\u003c/b\\u003e in -20\xB0C
        freezer (B1-165)\\\"\\r\\n        check \\\"Add buffers into the beaker.\\\"\\r\\n
        \       table op_table\\r\\n        #image \\\"Actions/ProteinPurification/purification_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def label_column(op_count,op_out_column)\\r\\n
        \   show do \\r\\n      title \\\"Grab and label columns\\\"\\r\\n      check
        \\\"Grab #{op_count} column(s) and label the column with ID: #{op_out_column.to_sentence}.\\\"\\r\\n
        \     check \\\"Remove the snap-off tip at the bottom of the column. Attach
        a flow adaptor to it.\\\"\\r\\n      check \\\"Close the column outlet\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/empty_column_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def put_column_onto_stand\\r\\n    show
        do\\r\\n       title \\\"Column preparation\\\"\\r\\n       check \\\"Grab
        a support stand with clamps from bench and use the adjustable knob to mount
        the rack at the desired height.\\\"\\r\\n       check \\\"Clamp the middle
        of a column and make sure the column outlet is closed.\\\"\\r\\n       image
        \\\"Actions/ProteinPurification/stand_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def mix_resin(op_count, op_out_column)\\r\\n    op_table
        = [[\\\"Column ID\\\",\\\"Bed volume of Ni-NTA resin\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c {content:op_out_column[i],
        check: true}\\r\\n        row \\u003c\\u003c \\\"2 mL\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n       title \\\"Load
        Ni-NTA resin\\\"\\r\\n       bullet \\\"Perform the steps with the following
        columns: #{op_out_column.to_sentence}.\\\"\\r\\n       check \\\"Place a beaker
        underneath each column.\\\"\\r\\n       check \\\"Grab Ni-NTA resin from 4\xB0C
        refrigerator (R1-250). Suspend Ni-NTA resin by using a disposable dropper.\\\"\\r\\n
        \      check \\\"Slowly load Ni-NTA slurry to each column. Avoid introducing
        air bubbles.\\\"\\r\\n       check \\\"Wait for 30 sec to allow the resin
        to settle.\\\"\\r\\n       check \\\"Open the column oulets and let the liquid
        move out of the column.\\\"\\r\\n       check \\\"Check on the bed volume
        of resin. Make sure it reaches to 2 mL.(as shown in the picture.)\\\"\\r\\n
        \      note \\\"If the bed volume is less than 2 mL, close the column outlet
        and then load resin.\\\"\\r\\n       image \\\"Actions/ProteinPurification/resin_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_20ml_binding_buffer(op_out_column)\\r\\n
        \   show do\\r\\n       title \\\"Equilibrate Resin\\\"\\r\\n       bullet
        \\\"Perform the steps with the following columns: #{op_out_column.to_sentence}.\\\"\\r\\n
        \      check \\\"Close the column outlet. Gently load 20 mL of binding buffer
        to each column.\\\"\\r\\n       warning \\\"Be careful not to disturb the
        resin\\\"\\r\\n       check \\\"Open the column outlet. Allow the buffer to
        flow through the columns.\\\"\\r\\n       check \\\"Close the column oulet.
        Gently load 1 mL of binding buffer to each column.\\\"\\r\\n       check \\\"Empty
        the beaker underneath each column.\\\"\\r\\n       image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  \\r\\nend\",\"parent_id\":1159,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T21:01:34.000-08:00\",\"updated_at\":\"2018-11-07T21:01:34.000-08:00\",\"user_id\":200},{\"id\":90781,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n    operations.retrieve.make\\n
        \   \\n    op_in_cell_pellet = []\\n    op_out_cell_lysate = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_cell_pellet \\u003c\\u003c op.input(\\\"Cell Pellet\\\").item.id\\n
        \       op_out_cell_lysate \\u003c\\u003c op.output(\\\"Cell Lysate\\\").item.id\\n
        \   end\\n    \\n     # Take the cell paste from -80\xB0C and let cells thaw
        on ice.\\n    take_cell_pellet(op_in_cell_pellet)\\n    \\n    # Take and
        add 50mL lysis buffer into a 50mL Falcon tube and add one tablet of protease
        inhibitor.\\n    take_lysis_buff(op_count,op_in_cell_pellet)\\n        \\n
        \   # Shake the Falcon tube and mix the buffer well until the protease inhibitor
        tablet fully dissolved in the lysis buffer.\\n    #shake_tube_and_mix_buff\\n
        \       \\n    # Equally distribute the lysis buffer into four Falcon tubes
        and gently suspend the cell paste in the lysis buffer.\\n    # keep tubes
        on ices\\n    distribute_lysis_buff(op_count,op_in_cell_pellet)\\n        \\n
        \   # Lyse the cell by a sonicator in Prof. Seelig\u2019s Lab.\\n    lyse_cell_by_sonicator(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \       \\n    # Turn on the sonicator and set the time and temperature condition,
        95% power output, 10secs on, 30secs off, repeat 30 rounds.\\n    set_up_sonicator(op_count)\\n
        \   \\n    weigh_and_balance_tubes(op_count)\\n         \\n    # Spin by the
        tabletop high-speed centrifuge under 24,000g for 30mins at 4\xB0C in Prof.
        Baker\u2019s Lab.\\n    spin_hs_centrifuge(op_count)\\n        \\n    # Transfer
        the supernatant to new tubes and discard the cell pellet.\\n    transfer_supernatant_to_new_tubes_label(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   \\n    operations.running.each do |op|\\n      op.output(\\\"Cell Lysate\\\").child_item.move
        \\\"4\xB0C or on ice for the (next) protocol\\\"\\n    end\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n\\n    return {}\\n\\n  end\\n  \\n  def
        take_cell_pellet(op_in_cell_pellet)\\n    show do\\n       title \\\"Thaw
        cell pellets on ice\\\"\\n       check \\\"Grab a ice bucket and fill it with
        ice.\\\"\\n       check \\\"Thaw #{op_in_cell_pellet.to_sentence} on ice.\\\"\\n
        \   end\\n  end\\n\\n  def take_lysis_buff(op_count,op_in_cell_pellet)\\n
        \   op_table = [[\\\"Batch\\\",\\\"Item IDs\\\",\\\"Lysis buffer\\\",\\\"Protease
        inhibitor\\\"]]\\n    for i in 0..(op_count-1)\\n        row = []\\n        row
        \\u003c\\u003c i+1\\n        row \\u003c\\u003c {content:op_in_cell_pellet[i],
        check: true}\\n        row \\u003c\\u003c \\\"40 mL\\\"\\n        row \\u003c\\u003c
        \\\"1 tablet\\\"\\n        op_table \\u003c\\u003c row\\n    end\\n    show
        do\\n       title \\\"Lysis buffer preparation\\\"\\n       check \\\"Grab
        a beaker. Add #{op_count*20} mL of lysis buffer to the beaker.\\\"\\n       check
        \\\"Grab protease inhibitor from 4\xB0C refrigerator (R1-250). Add #{op_count*2}
        tablets to the beaker.\\\"\\n       check \\\"Stir for 10 minutes or until
        tablets are completely dissovled.\\\"\\n       timer initial: { hours: 0,
        minutes: 10, seconds: 0}\\n       #check \\\"Grab #{op_count} 50mL Falcon
        tubes and label the tubes with IDs: #{op_in_cell_pellet.to_sentence}\\\"\\n
        \      #check \\\"Add 40mL of lysis buffer to each Falcon tube.\\\"\\n       #check
        \\\"Add one tablet of protease inhibitor to each tube and cap tubes.\\\"\\n
        \      #table op_table\\n    end\\n  end\\n  \\n  #def shake_tube_and_mix_buff\\n
        \   #show do\\n       #title \\\"Place all tubes on the platform shaker\\\"\\n
        \      #timer initial: { hours: 0, minutes: 10, seconds: 0}\\n       #check
        \\\"Retrieve after 10 minutes or until the tablet is completely dissovled.\\\"\\n
        \   #end\\n  #end\\n\\n  def distribute_lysis_buff(op_count,op_in_cell_pellet)\\n
        \   op_table = [[\\\"225 mL Falcon tube ID\\\",\\\"Lysis buffer\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c {content:op_in_cell_pellet[i],
        check: true}\\n        row \\u003c\\u003c \\\"20 mL\\\"\\n        op_table
        \\u003c\\u003c row\\n    end\\n    show do\\n       title \\\"Suspend pellets
        in lysis buffer\\\"\\n       check \\\"Distribute 20 mL of lysis buffer into
        each tube: #{op_in_cell_pellet.to_sentence}.\\\"\\n       #table op_table\\n
        \      check \\\"Thoroughly suspend cell pellets in lysis buffer by pipetting
        until no cell clumps remain.\\\"\\n       warning \\\"All the precedures should
        be performed on ice.\\\"\\n       check \\\"Incubate all tubes on ice for
        20 minutes.\\\"\\n       timer initial: { hours: 0, minutes: 20, seconds:
        0}\\n    end\\n  end\\n  \\n  def lyse_cell_by_sonicator(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   op_table = [[\\\"225 mL Falcon tube ID\\\",\\\"50 mL tube ID\\\"]]\\n
        \   for i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c
        {content:op_in_cell_pellet[i], check: true}\\n        row \\u003c\\u003c i+1\\n
        \       op_table \\u003c\\u003c row\\n    end\\n    show do\\n       title
        \\\"Transfer samples to Falcon tubes\\\"\\n       check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        50 mL Falcon tube(s). Label from 1 to #{op_count}.\\\"\\n       check \\\"Transfer
        cell lysate from the 225 mL Falcon tube to the corresponding tube.\\\"\\n
        \      table op_table\\n    end\\n    show do\\n        title \\\"Sonication
        preparation\\\"\\n        bullet \\\"Bring the following items to Prof. Seelig's
        Lab.\\\"\\n        check \\\"Grab a beaker and fill it with ice.\\\"\\n        check
        \\\"The samples (ID: 1 to #{op_count}) in a ice bucket.\\\"\\n        check
        \\\"Ethanol spray bottle and Kimwipes.\\\"\\n        # pic?sonicator\\n    end\\n
        \ end\\n  \\n  def set_up_sonicator(op_count)\\n    show do\\n        title
        \\\"Set up a sonicator\\\"\\n        bullet \\\"Turn on the sonicator.\\\"\\n
        \       bullet \\\"Set the processing parameters by pressing the ENTER button:\\\"\\n
        \       check  \\\"95% power delivered to the probe\\\"\\n        check \\\"10secs
        ON, 30secs OFF, repeat 30 rounds.\\\"\\n        bullet \\\"Spray the sonicator
        tip with Ethanol and wipe until dry using Kimwipes.\\\"\\n        bullet \\\"Put
        the tube (ID:1) in the beaker filled with ice. Immerse the sonication tip
        at least 2cm into the sample.\\\"\\n        warning \\\"Sonicator tip should
        not be touching the bottom or sides of the tube.\\\"\\n        bullet \\\"Press
        START button to activiate the sonication.\\\"\\n        bullet \\\"After 30
        rounds are done, screw the cap and put it back to the ice bucket.\\\"\\n        bullet
        \\\"Perform sonication from tube 1 to #{op_count} until all tubes have been
        sonicated.\\\"\\n        bullet \\\"Clean the sonicator tip by Kimwipes and
        Ethanol in each time switching to the next tube.\\\"\\n        warning \\\"A
        temperature increase in the sample might denature protein. Keep the tube on
        ice while performing sonication.\\\"\\n        image \\\"Actions/ProteinPurification/sonicator.jpg\\\"\\n
        \   end\\n  end\\n    \\n  def weigh_and_balance_tubes(op_count)\\n    show
        do\\n        title \\\"Scale balancing\\\"\\n        bullet \\\"Perform this
        step using the scale inside the gel room.\\\"\\n        check \\\"Zero the
        scale with an empty 50 mL tube and a rack.\\\"\\n        check \\\"Weigh the
        tube and make sure to balance.\\\"\\n        check \\\"If the balance is off,
        add purification buffer (in the Media Bay) until a balance is reached.\\\"\\n
        \       warning \\\"Be careful not to make cross contamination.\\\"\\n        warning
        \\\"Pairwise is sufficient. Balance samples in tubes.\\\"\\n    end\\n  end\\n
        \ \\n  def spin_hs_centrifuge(op_count)\\n    show do\\n       title \\\"Spin
        down cells\\\"\\n       bullet \\\"Bring tubes (ID: 1 to #{op_count}) in a
        ice bucket to Prof. Baker's Lab.\\\"\\n       check \\\"Spin at 24,000g for
        30 minutes at 4\xB0C.\\\"\\n       timer initial: { hours: 0, minutes: 30,
        seconds: 0}\\n       check \\\"Remove tubes from the high speed centrifuge.\\\"\\n
        \      image \\\"Actions/ProteinPurification/high_speed_centrifuge.jpg\\\"\\n
        \   end\\n  end\\n\\n  def transfer_supernatant_to_new_tubes_label(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   op_table = [[\\\"Falcon tube ID\\\",\\\"New tube ID\\\"]]\\n    for i
        in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c i+1\\n
        \       row \\u003c\\u003c {content:op_out_cell_lysate[i], check: true}\\n
        \       op_table \\u003c\\u003c row\\n    end\\n    show do\\n      title
        \\\"Transfer supernatant to a new tube\\\"\\n      check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        50 mL Falcon tube(s).\\\"\\n      check \\\"Label tube(s) with ID: #{op_out_cell_lysate.to_sentence}.\\\"\\n
        \     check \\\"Transfer supernatant to the corresponding tube.\\\"\\n      table
        op_table\\n    end\\n    show do\\n        title \\\"Clean up\\\"\\n        check
        \\\"Discard tubes with ID: 1 to #{op_count}.\\\"\\n    end\\n  end\\nend\\n\",\"parent_id\":1167,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T20:59:10.000-08:00\",\"updated_at\":\"2018-11-07T20:59:10.000-08:00\",\"user_id\":200},{\"id\":90780,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n    operations.retrieve.make\\n
        \   \\n    op_in_cell_pellet = []\\n    op_out_cell_lysate = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_cell_pellet \\u003c\\u003c op.input(\\\"Cell Pellet\\\").item.id\\n
        \       op_out_cell_lysate \\u003c\\u003c op.output(\\\"Cell Lysate\\\").item.id\\n
        \   end\\n    \\n     # Take the cell paste from -80\xB0C and let cells thaw
        on ice.\\n    take_cell_pellet(op_in_cell_pellet)\\n    \\n    # Take and
        add 50mL lysis buffer into a 50mL Falcon tube and add one tablet of protease
        inhibitor.\\n    take_lysis_buff(op_count,op_in_cell_pellet)\\n        \\n
        \   # Shake the Falcon tube and mix the buffer well until the protease inhibitor
        tablet fully dissolved in the lysis buffer.\\n    #shake_tube_and_mix_buff\\n
        \       \\n    # Equally distribute the lysis buffer into four Falcon tubes
        and gently suspend the cell paste in the lysis buffer.\\n    # keep tubes
        on ices\\n    distribute_lysis_buff(op_count,op_in_cell_pellet)\\n        \\n
        \   # Lyse the cell by a sonicator in Prof. Seelig\u2019s Lab.\\n    lyse_cell_by_sonicator(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \       \\n    # Turn on the sonicator and set the time and temperature condition,
        95% power output, 10secs on, 30secs off, repeat 30 rounds.\\n    set_up_sonicator(op_count)\\n
        \   \\n    weigh_and_balance_tubes(op_count)\\n         \\n    # Spin by the
        tabletop high-speed centrifuge under 24,000g for 30mins at 4\xB0C in Prof.
        Baker\u2019s Lab.\\n    spin_hs_centrifuge(op_count)\\n        \\n    # Transfer
        the supernatant to new tubes and discard the cell pellet.\\n    transfer_supernatant_to_new_tubes_label(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   \\n    operations.running.each do |op|\\n      op.output(\\\"Cell Lysate\\\").child_item.move
        \\\"4\xB0C or on ice for the (next) protocol\\\"\\n    end\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n\\n    return {}\\n\\n  end\\n  \\n  def
        take_cell_pellet(op_in_cell_pellet)\\n    show do\\n       title \\\"Thaw
        cell pellets on ice\\\"\\n       check \\\"Grab a ice bucket and fill it with
        ice.\\\"\\n       check \\\"Thaw #{op_in_cell_pellet.to_sentence} on ice.\\\"\\n
        \   end\\n  end\\n\\n  def take_lysis_buff(op_count,op_in_cell_pellet)\\n
        \   op_table = [[\\\"Batch\\\",\\\"Item IDs\\\",\\\"Lysis buffer\\\",\\\"Protease
        inhibitor\\\"]]\\n    for i in 0..(op_count-1)\\n        row = []\\n        row
        \\u003c\\u003c i+1\\n        row \\u003c\\u003c {content:op_in_cell_pellet[i],
        check: true}\\n        row \\u003c\\u003c \\\"40 mL\\\"\\n        row \\u003c\\u003c
        \\\"1 tablet\\\"\\n        op_table \\u003c\\u003c row\\n    end\\n    show
        do\\n       title \\\"Lysis buffer preparation\\\"\\n       check \\\"Grab
        a beaker. Add #{op_count*20} mL of lysis buffer to the beaker.\\\"\\n       check
        \\\"Grab protease inhibitor from 4\xB0C refrigerator (R1-250). Add #{op_count*2}
        tablets to the beaker.\\\"\\n       check \\\"Stir for 10 minutes or until
        tablets are completely dissovled.\\\"\\n       timer initial: { hours: 0,
        minutes: 10, seconds: 0}\\n       #check \\\"Grab #{op_count} 50mL Falcon
        tubes and label the tubes with IDs: #{op_in_cell_pellet.to_sentence}\\\"\\n
        \      #check \\\"Add 40mL of lysis buffer to each Falcon tube.\\\"\\n       #check
        \\\"Add one tablet of protease inhibitor to each tube and cap tubes.\\\"\\n
        \      #table op_table\\n    end\\n  end\\n  \\n  #def shake_tube_and_mix_buff\\n
        \   #show do\\n       #title \\\"Place all tubes on the platform shaker\\\"\\n
        \      #timer initial: { hours: 0, minutes: 10, seconds: 0}\\n       #check
        \\\"Retrieve after 10 minutes or until the tablet is completely dissovled.\\\"\\n
        \   #end\\n  #end\\n\\n  def distribute_lysis_buff(op_count,op_in_cell_pellet)\\n
        \   op_table = [[\\\"225 mL Falcon tube ID\\\",\\\"Lysis buffer\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c {content:op_in_cell_pellet[i],
        check: true}\\n        row \\u003c\\u003c \\\"20 mL\\\"\\n        op_table
        \\u003c\\u003c row\\n    end\\n    show do\\n       title \\\"Suspend pellets
        in lysis buffer\\\"\\n       check \\\"Distribute 20 mL of lysis buffer into
        each tube: #{op_in_cell_pellet.to_sentence}.\\\"\\n       #table op_table\\n
        \      check \\\"Thoroughly suspend cell pellets in lysis buffer by pipetting
        until no cell clumps remain.\\\"\\n       warning \\\"All the precedures should
        be performed on ice.\\\"\\n       check \\\"Incubate all tubes on ice for
        20 minutes.\\\"\\n       timer initial: { hours: 0, minutes: 20, seconds:
        0}\\n    end\\n  end\\n  \\n  def lyse_cell_by_sonicator(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   op_table = [[\\\"225 mL Falcon tube ID\\\",\\\"50 mL tube ID\\\"]]\\n
        \   for i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c
        {content:op_in_cell_pellet[i], check: true}\\n        row \\u003c\\u003c i+1\\n
        \       op_table \\u003c\\u003c row\\n    end\\n    show do\\n       title
        \\\"Transfer samples to Falcon tubes\\\"\\n       check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        50 mL Falcon tube(s). Label from 1 to #{op_count}.\\\"\\n       check \\\"Transfer
        cell lysate from the 225 mL Falcon tube to the corresponding tube.\\\"\\n
        \      table op_table\\n    end\\n    show do\\n        title \\\"Sonication
        preparation\\\"\\n        bullet \\\"Bring the following items to Prof. Seelig's
        Lab.\\\"\\n        check \\\"Grab a beaker and fill it with ice.\\\"\\n        check
        \\\"The samples (ID: 1 to #{op_count}) in a ice bucket.\\\"\\n        check
        \\\"Ethanol spray bottle and Kimwipes.\\\"\\n        # pic?sonicator\\n    end\\n
        \ end\\n  \\n  def set_up_sonicator(op_count)\\n    show do\\n        title
        \\\"Set up a sonicator\\\"\\n        bullet \\\"Turn on the sonicator.\\\"\\n
        \       bullet \\\"Set the processing parameters by pressing the ENTER button:\\\"\\n
        \       check  \\\"95% power delivered to the probe\\\"\\n        check \\\"10secs
        ON, 30secs OFF, repeat 30 rounds.\\\"\\n        bullet \\\"Spray the sonicator
        tip with Ethanol and wipe until dry using Kimwipes.\\\"\\n        bullet \\\"Put
        the tube (ID:1) in the beaker filled with ice. Immerse the sonication tip
        at least 2cm into the sample.\\\"\\n        warning \\\"Sonicator tip should
        not be touching the bottom or sides of the tube.\\\"\\n        bullet \\\"Press
        START button to activiate the sonication.\\\"\\n        bullet \\\"After 30
        rounds are done, screw the cap and put it back to the ice bucket.\\\"\\n        bullet
        \\\"Perform sonication from tube 1 to #{op_count} until all tubes have been
        sonicated.\\\"\\n        bullet \\\"Clean the sonicator tip by Kimwipes and
        Ethanol in each time switching to the next tube.\\\"\\n        warning \\\"A
        temperature increase in the sample might denature protein. Keep the tube on
        ice while performing sonication.\\\"\\n        image \\\"Actions/ProteinPurification/sonicator.jpg\\\"\\n
        \   end\\n  end\\n    \\n  def weigh_and_balance_tubes(op_count)\\n    show
        do\\n        title \\\"Scale balancing\\\"\\n        bullet \\\"Perform this
        step using the scale inside the gel room.\\\"\\n        check \\\"Zero the
        scale with an empty 50 mL tube and a rack.\\\"\\n        check \\\"Weigh the
        tube and make sure to balance.\\\"\\n        check \\\"If the balance is off,
        add purification buffer (in the Media Bay) until a balance is reached.\\\"\\n
        \       warning \\\"Be careful not to make cross contamination.\\\"\\n        warning
        \\\"Pairwise is sufficient. Balance samples in tubes.\\\"\\n    end\\n  end\\n
        \ \\n  def spin_hs_centrifuge(op_count)\\n    show do\\n       title \\\"Spin
        down cells\\\"\\n       bullet \\\"Bring tubes (ID: 1 to #{op_count}) in a
        ice bucket to Prof. Baker's Lab.\\\"\\n       check \\\"Spin at 24,000g for
        30 minutes at 4\xB0C.\\\"\\n       timer initial: { hours: 0, minutes: 30,
        seconds: 0}\\n       check \\\"Remove tubes from the high speed centrifuge.\\\"\\n
        \      image \\\"Actions/ProteinPurification/high_speed_centrifuge.jpg\\\"\\n
        \   end\\n  end\\n\\n  def transfer_supernatant_to_new_tubes_label(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   op_table = [[\\\"Falcon tube ID\\\",\\\"New tube ID\\\"]]\\n    for i
        in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c i+1\\n
        \       row \\u003c\\u003c {content:op_out_cell_lysate[i], check: true}\\n
        \       op_table \\u003c\\u003c row\\n    end\\n    show do\\n      title
        \\\"Transfer supernatant to a new tube\\\"\\n      check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        50 mL Falcon tube(s).\\\"\\n      check \\\"Label tube(s) with ID: #{op_out_cell_lysate.to_sentence}.\\\"\\n
        \     check \\\"Transfer supernatant to the corresponding new tubes.\\\"\\n
        \     table op_table\\n    end\\n    show do\\n        title \\\"Clean up\\\"\\n
        \       check \\\"Discard tubes with ID: 1 to #{op_count}.\\\"\\n    end\\n
        \ end\\nend\\n\",\"parent_id\":1167,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T20:57:53.000-08:00\",\"updated_at\":\"2018-11-07T20:57:53.000-08:00\",\"user_id\":200},{\"id\":90779,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n    operations.retrieve.make\\n
        \   \\n    op_in_cell_pellet = []\\n    op_out_cell_lysate = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_cell_pellet \\u003c\\u003c op.input(\\\"Cell Pellet\\\").item.id\\n
        \       op_out_cell_lysate \\u003c\\u003c op.output(\\\"Cell Lysate\\\").item.id\\n
        \   end\\n    \\n     # Take the cell paste from -80\xB0C and let cells thaw
        on ice.\\n    take_cell_pellet(op_in_cell_pellet)\\n    \\n    # Take and
        add 50mL lysis buffer into a 50mL Falcon tube and add one tablet of protease
        inhibitor.\\n    take_lysis_buff(op_count,op_in_cell_pellet)\\n        \\n
        \   # Shake the Falcon tube and mix the buffer well until the protease inhibitor
        tablet fully dissolved in the lysis buffer.\\n    #shake_tube_and_mix_buff\\n
        \       \\n    # Equally distribute the lysis buffer into four Falcon tubes
        and gently suspend the cell paste in the lysis buffer.\\n    # keep tubes
        on ices\\n    distribute_lysis_buff(op_count,op_in_cell_pellet)\\n        \\n
        \   # Lyse the cell by a sonicator in Prof. Seelig\u2019s Lab.\\n    lyse_cell_by_sonicator(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \       \\n    # Turn on the sonicator and set the time and temperature condition,
        95% power output, 10secs on, 30secs off, repeat 30 rounds.\\n    set_up_sonicator(op_count)\\n
        \   \\n    weigh_and_balance_tubes(op_count)\\n         \\n    # Spin by the
        tabletop high-speed centrifuge under 24,000g for 30mins at 4\xB0C in Prof.
        Baker\u2019s Lab.\\n    spin_hs_centrifuge(op_count)\\n        \\n    # Transfer
        the supernatant to new tubes and discard the cell pellet.\\n    transfer_supernatant_to_new_tubes_label(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   \\n    operations.running.each do |op|\\n      op.output(\\\"Cell Lysate\\\").child_item.move
        \\\"4\xB0C or on ice for the (next) protocol\\\"\\n    end\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n\\n    return {}\\n\\n  end\\n  \\n  def
        take_cell_pellet(op_in_cell_pellet)\\n    show do\\n       title \\\"Thaw
        cell pellets on ice\\\"\\n       check \\\"Grab a ice bucket and fill it with
        ice.\\\"\\n       check \\\"Thaw #{op_in_cell_pellet.to_sentence} on ice.\\\"\\n
        \   end\\n  end\\n\\n  def take_lysis_buff(op_count,op_in_cell_pellet)\\n
        \   op_table = [[\\\"Batch\\\",\\\"Item IDs\\\",\\\"Lysis buffer\\\",\\\"Protease
        inhibitor\\\"]]\\n    for i in 0..(op_count-1)\\n        row = []\\n        row
        \\u003c\\u003c i+1\\n        row \\u003c\\u003c {content:op_in_cell_pellet[i],
        check: true}\\n        row \\u003c\\u003c \\\"40 mL\\\"\\n        row \\u003c\\u003c
        \\\"1 tablet\\\"\\n        op_table \\u003c\\u003c row\\n    end\\n    show
        do\\n       title \\\"Lysis buffer preparation\\\"\\n       check \\\"Grab
        a beaker. Add #{op_count*20} mL of lysis buffer to the beaker.\\\"\\n       check
        \\\"Grab protease inhibitor from 4\xB0C refrigerator (R1-250). Add #{op_count*2}
        tablets to the beaker.\\\"\\n       check \\\"Stir for 10 minutes or until
        tablets are completely dissovled.\\\"\\n       timer initial: { hours: 0,
        minutes: 10, seconds: 0}\\n       #check \\\"Grab #{op_count} 50mL Falcon
        tubes and label the tubes with IDs: #{op_in_cell_pellet.to_sentence}\\\"\\n
        \      #check \\\"Add 40mL of lysis buffer to each Falcon tube.\\\"\\n       #check
        \\\"Add one tablet of protease inhibitor to each tube and cap tubes.\\\"\\n
        \      #table op_table\\n    end\\n  end\\n  \\n  #def shake_tube_and_mix_buff\\n
        \   #show do\\n       #title \\\"Place all tubes on the platform shaker\\\"\\n
        \      #timer initial: { hours: 0, minutes: 10, seconds: 0}\\n       #check
        \\\"Retrieve after 10 minutes or until the tablet is completely dissovled.\\\"\\n
        \   #end\\n  #end\\n\\n  def distribute_lysis_buff(op_count,op_in_cell_pellet)\\n
        \   op_table = [[\\\"225 mL Falcon tube ID\\\",\\\"Lysis buffer\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c {content:op_in_cell_pellet[i],
        check: true}\\n        row \\u003c\\u003c \\\"20 mL\\\"\\n        op_table
        \\u003c\\u003c row\\n    end\\n    show do\\n       title \\\"Suspend pellets
        in lysis buffer\\\"\\n       check \\\"Distribute 20 mL of lysis buffer into
        each tube: #{op_in_cell_pellet.to_sentence}.\\\"\\n       #table op_table\\n
        \      check \\\"Thoroughly suspend cell pellets in lysis buffer by pipetting
        until no cell clumps remain.\\\"\\n       warning \\\"All the precedures should
        be performed on ice.\\\"\\n       check \\\"Incubate all tubes on ice for
        20 minutes.\\\"\\n       timer initial: { hours: 0, minutes: 20, seconds:
        0}\\n    end\\n  end\\n  \\n  def lyse_cell_by_sonicator(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   op_table = [[\\\"225 mL Falcon tube ID\\\",\\\"50 mL tube ID\\\"]]\\n
        \   for i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c
        {content:op_in_cell_pellet[i], check: true}\\n        row \\u003c\\u003c i+1\\n
        \       op_table \\u003c\\u003c row\\n    end\\n    show do\\n       title
        \\\"Transfer samples to Falcon tubes\\\"\\n       check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        50 mL Falcon tube(s). Label from 1 to #{op_count}.\\\"\\n       check \\\"Transfer
        cell lysate from the 225 mL Falcon tube to the corresponding tube.\\\"\\n
        \      table op_table\\n    end\\n    show do\\n        title \\\"Sonication
        preparation\\\"\\n        bullet \\\"Bring the following items to Prof. Seelig's
        Lab.\\\"\\n        check \\\"Grab a beaker and fill it with ice.\\\"\\n        check
        \\\"The samples (ID: 1 to #{op_count}) in a ice bucket.\\\"\\n        check
        \\\"Ethanol spray bottle and Kimwipes.\\\"\\n        # pic?sonicator\\n    end\\n
        \ end\\n  \\n  def set_up_sonicator(op_count)\\n    show do\\n        title
        \\\"Set up a sonicator\\\"\\n        bullet \\\"Turn on the sonicator.\\\"\\n
        \       bullet \\\"Set the processing parameters by pressing the ENTER button:\\\"\\n
        \       check  \\\"95% power delivered to the probe\\\"\\n        check \\\"10secs
        ON, 30secs OFF, repeat 30 rounds.\\\"\\n        bullet \\\"Spray the sonicator
        tip with Ethanol and wipe until dry using Kimwipes.\\\"\\n        bullet \\\"Put
        the tube (ID:1) in the beaker filled with ice. Immerse the sonication tip
        at least 2cm into the sample.\\\"\\n        warning \\\"Sonicator tip should
        not be touching the bottom or sides of the tube.\\\"\\n        bullet \\\"Press
        START button to activiate the sonication.\\\"\\n        bullet \\\"After 30
        rounds are done, screw the cap and put it back to the ice bucket.\\\"\\n        bullet
        \\\"Perform sonication from tube 1 to #{op_count} until all tubes have been
        sonicated.\\\"\\n        bullet \\\"Clean the sonicator tip by Kimwipes and
        Ethanol in each time switching to the next tube.\\\"\\n        warning \\\"A
        temperature increase in the sample might denature protein. Keep the tube in
        a beaker filled with ice while performing sonication.\\\"\\n        image
        \\\"Actions/ProteinPurification/sonicator.jpg\\\"\\n    end\\n  end\\n    \\n
        \ def weigh_and_balance_tubes(op_count)\\n    show do\\n        title \\\"Scale
        balancing\\\"\\n        bullet \\\"Perform this step using the scale inside
        the gel room.\\\"\\n        check \\\"Zero the scale with an empty 50 mL tube
        and a rack.\\\"\\n        check \\\"Weigh the tube and make sure to balance.\\\"\\n
        \       check \\\"If the balance is off, add purification buffer (in the Media
        Bay) until a balance is reached.\\\"\\n        warning \\\"Be careful not
        to make cross contamination.\\\"\\n        warning \\\"Pairwise is sufficient.
        Balance samples in tubes.\\\"\\n    end\\n  end\\n  \\n  def spin_hs_centrifuge(op_count)\\n
        \   show do\\n       title \\\"Spin down cells\\\"\\n       bullet \\\"Bring
        tubes (ID: 1 to #{op_count}) in a ice bucket to Prof. Baker's Lab.\\\"\\n
        \      check \\\"Spin at 24,000g for 30 minutes at 4\xB0C.\\\"\\n       timer
        initial: { hours: 0, minutes: 30, seconds: 0}\\n       check \\\"Remove tubes
        from the high speed centrifuge.\\\"\\n       image \\\"Actions/ProteinPurification/high_speed_centrifuge.jpg\\\"\\n
        \   end\\n  end\\n\\n  def transfer_supernatant_to_new_tubes_label(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   op_table = [[\\\"Falcon tube ID\\\",\\\"New tube ID\\\"]]\\n    for i
        in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c i+1\\n
        \       row \\u003c\\u003c {content:op_out_cell_lysate[i], check: true}\\n
        \       op_table \\u003c\\u003c row\\n    end\\n    show do\\n      title
        \\\"Transfer supernatant to a new tube\\\"\\n      check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        50 mL Falcon tube(s).\\\"\\n      check \\\"Label tube(s) with ID: #{op_out_cell_lysate.to_sentence}.\\\"\\n
        \     check \\\"Transfer supernatant to the corresponding new tubes.\\\"\\n
        \     table op_table\\n    end\\n    show do\\n        title \\\"Clean up\\\"\\n
        \       check \\\"Discard tubes with ID: 1 to #{op_count}.\\\"\\n    end\\n
        \ end\\nend\\n\",\"parent_id\":1167,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T20:56:55.000-08:00\",\"updated_at\":\"2018-11-07T20:56:55.000-08:00\",\"user_id\":200},{\"id\":90778,\"name\":\"protocol\",\"content\":\"#Chelsea
        Wan\\n\\nneeds \\\"Arabidopsis work/Recipes\\\"\\n\\nclass Protocol\\n    include
        Recipes\\n\\n  def main\\n     \\n    sterile_technique_reminder\\n    \\n
        \   operations.retrieve\\n        #Chelsea - Ingredients are MES pH 5.7, cellulase
        R10, macerozyme R10, mannitol, KCl, CaCl2, b-mercaptoethanol (optional), BSA,
        0.45-mm syringe filter, NaCl, 75 micrometer mesh, petri dishes, vacuum infiltrator,
        centrifuge, test tubes, pipettes\\n        #ORLANDO you need to add .make
        to also create the output item. Also, would you like the output item to actually
        have the same item number as the input, so it just changes container type?
        If so there is a way to do that. \\n    \\n    preheat_bead_and_water_baths\\n
        \   \\n    prepare_digestion_fluid\\n    \\n    treat_cells_with_digestion_fluid\\n
        \   \\n    enzyme_mix\\n    \\n    store_cells\\n        \\n    \\n  end\\n
        \ \\n    #operations.each do |op|\\n    #    volume = op.input(\\\"total_vol\\\").val\\n
        \   #end\\n        \\n\\n    def sterile_technique_reminder\\n        show
        do\\n            title \\\"General sterile technique reminders\\\"\\n            note
        \\\"Always wear the appropriate PPEs.\\\"\\n            note \\\"Clean gloves
        with ethanol often.\\\"\\n            note \\\"Clean the following with 80%
        ethanol:\\\"\\n            check \\\"Lab bench\\\"\\n            check \\\"Pipettes\\\"\\n
        \           check \\\"Forceps, tube racks, etc\\\"\\n            check \\\"Phones,
        computers, etc.\\\"\\n        end \\n    end\\n        \\n    def preheat_bead_and_water_baths\\n
        \       show do\\n            title \\\"Preheat bad and water baths\\\"\\n
        \           note \\\"Set bead bath to 55 degrees C\\\"\\n            note
        \\\"Set up water bath and heat to 70 degrees C\\\"\\n        end\\n    end\\n
        \   \\n    def prepare_digestion_fluid\\n        \\n        show do\\n            title
        \\\"Prepare enzyme digestion fluid\\\"\\n            warning \\\"Always prepare
        a fresh, new batch of enzyme/digestion fluid, as having fresh enzyme solution
        is important for successful digestion of the cell walls.\\\"\\n            note
        \\\"1. Add MES (pH 5.7) stock to a clean and labelled 50 mL Falcon tube (default
        to 10 mL)\\\"\\n            #collect input for volume of MES stock added and
        default to 10 mL\\n            note \\\"2. Heat MES solution to 70 degrees
        C for 3-5 min.\\\"\\n\\n            note \\\"3. Add the following materials
        to the 50 mL Falcon tube containing MES (and gently tilt to mix):\\\"\\n            check
        \\\"1.5% (wt/vol) cellulase R10 (default to 0.15g)\\\"\\n            #collect
        input and default to 0.15g per 10 mL of MES\\n            check \\\"0.4% (wt/vol)
        macerozyme R10 (default to 0.04g)\\\"\\n            #colect input and default
        to 0.04g per 10 mL of MES\\n            note \\\"4. Warm the enzyme solution
        at 55 degrees C in the bead bath for 10 minutes.\\\"\\n            note \\\"5.
        Allow the enzyme solution to cool to room temperature (25 degrees C).\\\"\\n
        \           note \\\"6. Add the following materials to the test tube (and
        gently tilt to mix):\\\"\\n            check \\\"10 mM CaCl2 (default to 0.011g)\\\"\\n
        \           #collect input and default to 0.011g per 10 mL MES\\n            check
        \\\"1\u20135 mM b-mercaptoethanol (default to 2.1 um).\\\"\\n            #collect
        input and default to 2.1um per 10 mL MES\\n            check \\\"1-5 mM 0.1%
        BSA (default to 0.01g)\\\"\\n            #collect input and default to 0.01g
        per 10 mL MES\\n            note \\\"7. Filter the enzyme solution through
        a 0.2-mm syringe filter device into a small beaker to filter sterilize.\\\"\\n
        \       end \\n    end\\n            \\n    def treat_cells_with_digestion_fluid\\n
        \       show do\\n            title \\\"Treat plant cells with the freshly
        prepared enzyme/digestion fluid\\\"\\n            warning \\\"Work with cell
        culture should be done in the fume hood.\\\"\\n            warning \\\"Each
        trial (usually 3) is incubated in a separate beaker.  Make sure to label each
        of the three beakers (date, initials, experimental conditions, incubation
        start time) on tape.\\\"\\n            note \\\"Obtain plant culture in ependorf
        tube (usually already prepared on lab bench and do not touch plant culture
        stock unless given permission!).\\\"\\n            #collect input for the
        date the culture stock was made\\n            note \\\"Allow at least 15 min
        for the plant cells to settle (can be done during previous steps).  Be careful
        to not disturb the pellet!\\\"\\n            note \\\"Use pipette set to 1
        mL to remove supernatant.\\\"\\n            note \\\"Pipette 1 mL of enzyme
        solution from beaker into ependorf tube.  Pipette up and down to resuspend
        the pellet in the enzyme solution.\\\"\\n            note \\\"Gently pitppete
        all of the plant cell/enzyme solution suspension from ependorf tube into beaker.\\\"\\n
        \           note \\\"Document the time at which the incubation began.\\\"\\n
        \           get \\\"text\\\", default: \\\"00:00\\\"             #collect
        time of incubation start\\n            note \\\"Cover the beakers with tin
        foil and make sure that all beakers are properly labelled.\\\"\\n        end
        \\n    end\\n            \\n    def store_cells\\n        show do\\n            title
        \\\"Store petri dish containing enzyme/digestion fluid and plant cells\\\"\\n
        \           note \\\"Move shaker to lab bench (it may already be on the lab
        bench).\\\"\\n            note \\\"Move beakers from fume hood and place on
        the shaker. Set the shaker to the lowest setting (45 rpm).  Do not turn on
        the timer.\\\"\\n            note \\\"The cells should incubate for 3-16 hours
        (default to 7.5 hours).\\\"\\n        end \\n    end\\n\\nend\\n\",\"parent_id\":1502,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:21:21.000-08:00\",\"updated_at\":\"2018-11-07T18:21:21.000-08:00\",\"user_id\":219},{\"id\":90777,\"name\":\"protocol\",\"content\":\"#Chelsea
        Wan\\n\\nclass Protocol\\n    \\n    INPUT = \\\"Digesting cells\\\"\\n    OUTPUT
        = \\\"Protoplasts\\\"\\n\\n  def main\\n\\n    sterile_technique_reminder\\n
        \   \\n    operations.retrieve\\n    \\n    #prepare_W5_solution\\n    \\n
        \   #prepare_MMG_solution\\n    \\n    retrive_and_dilute_dish_contents\\n
        \   \\n    filter_solution\\n    \\n    resuspend_in_W5_solution\\n    \\n
        \   sucrose_separation\\n    \\n    resuspend_in_MMG_solution\\n    \\n    return
        {}\\n    \\n  end\\n\\n    def sterile_technique_reminder\\n        show do\\n
        \           title \\\"General sterile technique reminders\\\"\\n            note
        \\\"Always wear the appropriate PPEs.\\\"\\n            note \\\"Clean gloves
        with ethanol often.\\\"\\n            note \\\"Clean the following with 80%
        ethanol:\\\"\\n            check \\\"Lab bench\\\"\\n            check \\\"Pipettes\\\"\\n
        \           check \\\"Forceps, tube racks, etc\\\"\\n            check \\\"Phones,
        computers, etc.\\\"\\n        end \\n    end\\n    \\n    #def prepare_W5_solution\\n
        \       #show do\\n            #title \\\"Prepare W5 solution\\\"\\n            #note
        \\\"Add the following materials to a clean and labelled test tube:\\\"\\n
        \           #check \\\"2 mM MES (pH 5.7)\\\"\\n            #check \\\"154
        mM NaCl\\\"\\n            #check \\\"125 mM CaCl2\\\"\\n            #check
        \\\"5 mM KCl\\\"\\n            #note \\\"Store W5 solution at room temperature.\\\"\\n
        \       #end \\n    #end\\n    \\n    #def prepare_MMG_solution\\n        #show
        do\\n            #title \\\"Prepare MMG solution\\\"\\n            #note \\\"Add
        the following materials to another clean and labelled test tube:\\\"\\n            #check
        \\\"4 mM MES (pH 5.7)\\\"\\n            #check \\\"0.4 M mannitol\\\"\\n            #check
        \\\"15 mM MgCl2\\\"\\n            #note \\\"Store MMG solution at room temperature.\\\"\\n
        \       #end \\n    #end\\n    \\n    def retrive_and_dilute_dish_contents\\n
        \       show do\\n            title \\\"Retrieve and dilute protoplasts\\\"\\n
        \           note \\\"1. Turn off the shaker. Move beaker from shaker to fume
        food.  The fluid contained in the dish should be a yellow/green color.  If
        using plant leaves (v.s. cell culture), give the solution a gentle swirl to
        release the protoplasts from the leaves.\\\"\\n            note \\\"2. Add
        W5 solution directly to the petri dish.  The volume of W5 solution added should
        be equal to the volume of enzyme solution in the dish (default to 10 mL).\\\"\\n
        \           #Chelsea - I want the volume of final enzyme solotuion used in
        the previous protocol (Treat with cellulase) be displayed here if possible\\n
        \           #note \\\"Final enzyme solution: \\\"\\n            note \\\"Document
        the time that cell wall digestion ended.\\\"\\n            #collect time\\n
        \           #is it possible for the collected start time and end time to be
        used to calculate, display, and store the total incubation time?\\n            note
        \\\"4. Document volume of W5 solution used.\\\"\\n            get \\\"number\\\",
        default: \\\"10\\\"\\n        end \\n    end\\n    \\n    def filter_solution\\n
        \       show do\\n            title \\\"Filter solution containing protoplasts\\\"\\n
        \           note \\\"1. Wash 100-um nylon mesh with 1 mL of water.\\\"\\n
        \           note \\\"2. Dry nylon mesh with kimwipe to remove excess water.\\\"\\n
        \           note \\\"3. Wet nylon mesh with 1 mL of W5 solution.\\\"\\n            note
        \\\"4. Filter protoplast and enzyme solution through nylon mesh into a 50
        mL Falcon tube.\\\"\\n            note \\\"Label the top and sides of the
        Falcon tube (date, intials, experimental conditions).\\\"\\n        end \\n
        \   end\\n    \\n    def resuspend_in_W5_solution\\n        show do\\n            title
        \\\"First resuspension (in W5 solution)\\\"\\n            operations.each
        do |op|\\n                test_tube = op.input(INPUT).item            \\n
        \               note \\\"1. Centrifuge the Falcon tube containing the flow
        through at 100g for 2 minutes.  A small pellet should form at the bottom of
        the test tube.\\\"\\n                note \\\"2. Use vacuum and red and blue
        pipette tips to remove as much supernatant as possible without disturbing
        the pellet.\\\"\\n                note \\\"3. Gently resuspend the pellet
        in 4 mL of W5 solution by gentle swirling (later, at 2x10^5 ml^\u20131 in
        W5 solution)\\\"\\n                #note \\\"4. Rest test tube in the styrofoam
        rack in the refridgerator for at least 15 min.  Protoplasts will begin to
        settle and form a pellet.  Do not disturb the test tube.\\\" ##location says
        bench*\\n                check \\\"4. Rest test tube #{test_tube.id} from
        #{test_tube.location} for 15 minutes. Protoplasts will begin to settle and
        form a pellet. Do not disturb the test tube.\\\"\\n            end\\n        end
        \\n    end\\n    \\n    def sucrose_separation\\n        show do\\n            title
        \\\"Separate healthy protoplasts using sucrose grandient.\\\"\\n            note
        \\\"Pipette 8 mL of sucrose solution into a 15 mL Falcon tube (default to
        50% surose).\\\"\\n            note \\\"Slowly pipette all 4 mL of W5/protoplast
        suspension on top of the sucrose solution.  Make sure to pipette up and down
        each time you pippette to resuspend the protoplasts.  Also, make sure to keep
        a sterile environment and ethanol your pipettes.\\\"\\n            note \\\"Centrifuge
        the 15 mL Flacon tubes at 720xg for 13 min.\\\"\\n        end\\n    end\\n
        \   \\n    def resuspend_in_MMG_solution\\n        show do\\n            title
        \\\"Second resuspension (in MMG solution) and store\\\"\\n            #note
        \\\"Use vacuum and red and blue pipette tips to remove as much supernatant
        as possible without disturbing the settled protoplasts.\\\"\\n            note
        \\\"Harvest isolated protoplasts (in layer) from the falcon tube into a 2
        mL ependorf tube.\\\"\\n            note \\\"Resuspend the protoplasts with
        500 um of MMG solution.  Gently tap the side of the ependorf tune to resuspend.\\\"\\n
        \           #note \\\"Resuspend the pellet at 2x10^5 ml\u20131 in MMG solution
        by gently swirling.\\\"\\n            note \\\"Store the tube containing isolated
        protoplasts in DAWGMA's styrofoam box in the freezer.\\\"\\n        end \\n
        \   end\\n    \\n\\nend\\n\",\"parent_id\":1505,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:20:03.000-08:00\",\"updated_at\":\"2018-11-07T18:20:03.000-08:00\",\"user_id\":219},{\"id\":90776,\"name\":\"protocol\",\"content\":\"#Chelsea
        Wan\\n\\nclass Protocol\\n    \\n    INPUT = \\\"Digesting cells\\\"\\n    OUTPUT
        = \\\"Protoplasts\\\"\\n\\n  def main\\n\\n    sterile_technique_reminder\\n
        \   \\n    operations.retrieve\\n    \\n    #prepare_W5_solution\\n    \\n
        \   #prepare_MMG_solution\\n    \\n    retrive_and_dilute_dish_contents\\n
        \   \\n    filter_solution\\n    \\n    resuspend_in_W5_solution\\n    \\n
        \   sucrose_separation\\n    \\n    resuspend_in_MMG_solution\\n    \\n    return
        {}\\n    \\n  end\\n\\n    def sterile_technique_reminder\\n        show do\\n
        \           title \\\"General sterile technique reminders\\\"\\n            note
        \\\"Always wear the appropriate PPEs.\\\"\\n            note \\\"Clean gloves
        with ethanol often.\\\"\\n            note \\\"Clean the following with 80%
        ethanol:\\\"\\n            check \\\"Lab bench\\\"\\n            check \\\"Pipettes\\\"\\n
        \           check \\\"Forceps, tube racks, etc\\\"\\n            check \\\"Phones,
        computers, etc.\\\"\\n        end \\n    end\\n    \\n    #def prepare_W5_solution\\n
        \       #show do\\n            #title \\\"Prepare W5 solution\\\"\\n            #note
        \\\"Add the following materials to a clean and labelled test tube:\\\"\\n
        \           #check \\\"2 mM MES (pH 5.7)\\\"\\n            #check \\\"154
        mM NaCl\\\"\\n            #check \\\"125 mM CaCl2\\\"\\n            #check
        \\\"5 mM KCl\\\"\\n            #note \\\"Store W5 solution at room temperature.\\\"\\n
        \       #end \\n    #end\\n    \\n    #def prepare_MMG_solution\\n        #show
        do\\n            #title \\\"Prepare MMG solution\\\"\\n            #note \\\"Add
        the following materials to another clean and labelled test tube:\\\"\\n            #check
        \\\"4 mM MES (pH 5.7)\\\"\\n            #check \\\"0.4 M mannitol\\\"\\n            #check
        \\\"15 mM MgCl2\\\"\\n            #note \\\"Store MMG solution at room temperature.\\\"\\n
        \       #end \\n    #end\\n    \\n    def retrive_and_dilute_dish_contents\\n
        \       show do\\n            title \\\"Retrieve and dilute protoplasts\\\"\\n
        \           note \\\"1. Turn off the shaker. Move beaker from shaker to fume
        food.  The fluid contained in the dish should be a yellow/green color.  If
        using plant leaves (v.s. cell culture), give the solution a gentle swirl to
        release the protoplasts from the leaves.\\\"\\n            note \\\"2. Add
        W5 solution directly to the petri dish.  The volume of W5 solution added should
        be equal to the volume of enzyme solution in the dish (default to 10 mL).\\\"\\n
        \           #Chelsea - I want the volume of final enzyme solotuion used in
        the previous protocol (Treat with cellulase) be displayed here if possible\\n
        \           note \\\"Document the time that cell wall digestion ended.\\\"\\n
        \           #collect time\\n            #is it possible for the collected
        start time and end time to be used to calculate, display, and store the total
        incubation time?\\n            note \\\"4. Document volume of W5 solution
        used.\\\"\\n            get \\\"number\\\", default: \\\"10\\\"\\n        end
        \\n    end\\n    \\n    def filter_solution\\n        show do\\n            title
        \\\"Filter solution containing protoplasts\\\"\\n            note \\\"1. Wash
        100-um nylon mesh with 1 mL of water.\\\"\\n            note \\\"2. Dry nylon
        mesh with kimwipe to remove excess water.\\\"\\n            note \\\"3. Wet
        nylon mesh with 1 mL of W5 solution.\\\"\\n            note \\\"4. Filter
        protoplast and enzyme solution through nylon mesh into a 50 mL Falcon tube.\\\"\\n
        \           note \\\"Label the top and sides of the Falcon tube (date, intials,
        experimental conditions).\\\"\\n        end \\n    end\\n    \\n    def resuspend_in_W5_solution\\n
        \       show do\\n            title \\\"First resuspension (in W5 solution)\\\"\\n
        \           operations.each do |op|\\n                test_tube = op.input(INPUT).item
        \           \\n                note \\\"1. Centrifuge the Falcon tube containing
        the flow through at 100g for 2 minutes.  A small pellet should form at the
        bottom of the test tube.\\\"\\n                note \\\"2. Use vacuum and
        red and blue pipette tips to remove as much supernatant as possible without
        disturbing the pellet.\\\"\\n                note \\\"3. Gently resuspend
        the pellet in 4 mL of W5 solution by gentle swirling (later, at 2x10^5 ml^\u20131
        in W5 solution)\\\"\\n                #note \\\"4. Rest test tube in the styrofoam
        rack in the refridgerator for at least 15 min.  Protoplasts will begin to
        settle and form a pellet.  Do not disturb the test tube.\\\" ##location says
        bench*\\n                check \\\"4. Rest test tube #{test_tube.id} from
        #{test_tube.location} for 15 minutes. Protoplasts will begin to settle and
        form a pellet. Do not disturb the test tube.\\\"\\n            end\\n        end
        \\n    end\\n    \\n    def sucrose_separation\\n        show do\\n            title
        \\\"Separate healthy protoplasts using sucrose grandient.\\\"\\n            note
        \\\"Pipette 8 mL of sucrose solution into a 15 mL Falcon tube (default to
        50% surose).\\\"\\n            note \\\"Slowly pipette all 4 mL of W5/protoplast
        suspension on top of the sucrose solution.  Make sure to pipette up and down
        each time you pippette to resuspend the protoplasts.  Also, make sure to keep
        a sterile environment and ethanol your pipettes.\\\"\\n            note \\\"Centrifuge
        the 15 mL Flacon tubes at 720xg for 13 min.\\\"\\n        end\\n    end\\n
        \   \\n    def resuspend_in_MMG_solution\\n        show do\\n            title
        \\\"Second resuspension (in MMG solution) and store\\\"\\n            #note
        \\\"Use vacuum and red and blue pipette tips to remove as much supernatant
        as possible without disturbing the settled protoplasts.\\\"\\n            note
        \\\"Harvest isolated protoplasts (in layer) from the falcon tube into a 2
        mL ependorf tube.\\\"\\n            note \\\"Resuspend the protoplasts with
        500 um of MMG solution.  Gently tap the side of the ependorf tune to resuspend.\\\"\\n
        \           #note \\\"Resuspend the pellet at 2x10^5 ml\u20131 in MMG solution
        by gently swirling.\\\"\\n            note \\\"Store the tube containing isolated
        protoplasts in DAWGMA's styrofoam box in the freezer.\\\"\\n        end \\n
        \   end\\n    \\n\\nend\\n\",\"parent_id\":1505,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:18:04.000-08:00\",\"updated_at\":\"2018-11-07T18:18:04.000-08:00\",\"user_id\":219},{\"id\":90775,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n\\r\\n
        \   operations.running.each do |op|\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end    \\r\\n    operations.store(io: \\\"input\\\", interactive: true)\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n    end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n    \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def verify_growth(operations)\\r\\n    verify_growth = show do\\r\\n
        \       title \\\"Check if overnight starters have growth\\\"\\r\\n        note
        \\\"Choose No for the overnight starter that does not have growth. Empty flask
        and put in the clean station.\\\"\\r\\n        operations.each do |op|\\r\\n
        \           in_id = op.input(\\\"Overnight\\\").item.id\\r\\n            select
        [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\", label: \\\"Does flask
        #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n    \\r\\n
        \   operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight.to_sentence}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5 mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Retrieve #{op_out_overexpression.to_sentence} from 37\xB0C
        shaker.\\\"\\r\\n        check \\\"Transfer 1mL of cell culture to the corresponding
        1.5 mL tube by using a motorized pipet filler.\\\"\\r\\n        check \\\"Return
        the cell culture to 37\xB0C shaker.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n
        \ def measure_od_value(meas_sample)\\r\\n    od_value = []\\r\\n    show do\\r\\n
        \     title \\\"Measure OD600 value of cell culture\\\"\\r\\n      check \\\"Grab
        a box of 1000 \xB5l tip, a P1000 pipettor, a tip waste container, #{meas_sample.size+1}
        plastic cuvettes and 1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring
        the samples (ID: #{meas_sample.to_sentence}) to Prof. James Carother\u2019s
        lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL of LB
        \\u003cb\\u003e\\u003e\\u003c/b\\u003e measure\\\"\\r\\n      check \\\"Measure
        and record OD600 value.\\\"\\r\\n      image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:17:10.000-08:00\",\"updated_at\":\"2018-11-07T18:17:10.000-08:00\",\"user_id\":200},{\"id\":90774,\"name\":\"protocol\",\"content\":\"#Chelsea
        Wan\\n\\nclass Protocol\\n    \\n    INPUT = \\\"Digesting cells\\\"\\n    OUTPUT
        = \\\"Protoplasts\\\"\\n\\n  def main\\n\\n    sterile_technique_reminder\\n
        \   \\n    operations.retrieve\\n    \\n    #prepare_W5_solution\\n    \\n
        \   #prepare_MMG_solution\\n    \\n    retrive_and_dilute_dish_contents\\n
        \   \\n    filter_solution\\n    \\n    resuspend_in_W5_solution\\n    \\n
        \   sucrose_separation\\n    \\n    resuspend_in_MMG_solution\\n    \\n  end\\n\\n
        \   def sterile_technique_reminder\\n        show do\\n            title \\\"General
        sterile technique reminders\\\"\\n            note \\\"Always wear the appropriate
        PPEs.\\\"\\n            note \\\"Clean gloves with ethanol often.\\\"\\n            note
        \\\"Clean the following with 80% ethanol:\\\"\\n            check \\\"Lab
        bench\\\"\\n            check \\\"Pipettes\\\"\\n            check \\\"Forceps,
        tube racks, etc\\\"\\n            check \\\"Phones, computers, etc.\\\"\\n
        \       end \\n    end\\n    \\n    #def prepare_W5_solution\\n        #show
        do\\n            #title \\\"Prepare W5 solution\\\"\\n            #note \\\"Add
        the following materials to a clean and labelled test tube:\\\"\\n            #check
        \\\"2 mM MES (pH 5.7)\\\"\\n            #check \\\"154 mM NaCl\\\"\\n            #check
        \\\"125 mM CaCl2\\\"\\n            #check \\\"5 mM KCl\\\"\\n            #note
        \\\"Store W5 solution at room temperature.\\\"\\n        #end \\n    #end\\n
        \   \\n    #def prepare_MMG_solution\\n        #show do\\n            #title
        \\\"Prepare MMG solution\\\"\\n            #note \\\"Add the following materials
        to another clean and labelled test tube:\\\"\\n            #check \\\"4 mM
        MES (pH 5.7)\\\"\\n            #check \\\"0.4 M mannitol\\\"\\n            #check
        \\\"15 mM MgCl2\\\"\\n            #note \\\"Store MMG solution at room temperature.\\\"\\n
        \       #end \\n    #end\\n    \\n    def retrive_and_dilute_dish_contents\\n
        \       show do\\n            title \\\"Retrieve and dilute protoplasts\\\"\\n
        \           note \\\"1. Turn off the shaker. Move beaker from shaker to fume
        food.  The fluid contained in the dish should be a yellow/green color.  If
        using plant leaves (v.s. cell culture), give the solution a gentle swirl to
        release the protoplasts from the leaves.\\\"\\n            note \\\"2. Add
        W5 solution directly to the petri dish.  The volume of W5 solution added should
        be equal to the volume of enzyme solution in the dish (default to 10 mL).\\\"\\n
        \           #Chelsea - I want the volume of final enzyme solotuion used in
        the previous protocol (Treat with cellulase) be displayed here if possible\\n
        \           note \\\"Document the time that cell wall digestion ended.\\\"\\n
        \           #collect time\\n            #is it possible for the collected
        start time and end time to be used to calculate, display, and store the total
        incubation time?\\n            note \\\"4. Document volume of W5 solution
        used.\\\"\\n            get \\\"number\\\", default: \\\"10\\\"\\n        end
        \\n    end\\n    \\n    def filter_solution\\n        show do\\n            title
        \\\"Filter solution containing protoplasts\\\"\\n            note \\\"1. Wash
        100-um nylon mesh with 1 mL of water.\\\"\\n            note \\\"2. Dry nylon
        mesh with kimwipe to remove excess water.\\\"\\n            note \\\"3. Wet
        nylon mesh with 1 mL of W5 solution.\\\"\\n            note \\\"4. Filter
        protoplast and enzyme solution through nylon mesh into a 50 mL Falcon tube.\\\"\\n
        \           note \\\"Label the top and sides of the Falcon tube (date, intials,
        experimental conditions).\\\"\\n        end \\n    end\\n    \\n    def resuspend_in_W5_solution\\n
        \       show do\\n            title \\\"First resuspension (in W5 solution)\\\"\\n
        \           operations.each do |op|\\n                test_tube = op.input(INPUT).item
        \           \\n                note \\\"1. Centrifuge the Falcon tube containing
        the flow through at 100g for 2 minutes.  A small pellet should form at the
        bottom of the test tube.\\\"\\n                note \\\"2. Use vacuum and
        red and blue pipette tips to remove as much supernatant as possible without
        disturbing the pellet.\\\"\\n                note \\\"3. Gently resuspend
        the pellet in 4 mL of W5 solution by gentle swirling (later, at 2x10^5 ml^\u20131
        in W5 solution)\\\"\\n                #note \\\"4. Rest test tube in the styrofoam
        rack in the refridgerator for at least 15 min.  Protoplasts will begin to
        settle and form a pellet.  Do not disturb the test tube.\\\" ##location says
        bench*\\n                check \\\"4. Rest test tube #{test_tube.id} from
        #{test_tube.location} for 15 minutes. Protoplasts will begin to settle and
        form a pellet. Do not disturb the test tube.\\\"\\n            end\\n        end
        \\n    end\\n    \\n    def sucrose_separation\\n        show do\\n            title
        \\\"Separate healthy protoplasts using sucrose grandient.\\\"\\n            note
        \\\"Pipette 8 mL of sucrose solution into a 15 mL Falcon tube (default to
        50% surose).\\\"\\n            note \\\"Slowly pipette all 4 mL of W5/protoplast
        suspension on top of the sucrose solution.  Make sure to pipette up and down
        each time you pippette to resuspend the protoplasts.  Also, make sure to keep
        a sterile environment and ethanol your pipettes.\\\"\\n            note \\\"Centrifuge
        the 15 mL Flacon tubes at 720xg for 13 min.\\\"\\n        end\\n    end\\n
        \   \\n    def resuspend_in_MMG_solution\\n        show do\\n            title
        \\\"Second resuspension (in MMG solution) and store\\\"\\n            #note
        \\\"Use vacuum and red and blue pipette tips to remove as much supernatant
        as possible without disturbing the settled protoplasts.\\\"\\n            note
        \\\"Harvest isolated protoplasts (in layer) from the falcon tube into a 2
        mL ependorf tube.\\\"\\n            note \\\"Resuspend the protoplasts with
        500 um of MMG solution.  Gently tap the side of the ependorf tune to resuspend.\\\"\\n
        \           #note \\\"Resuspend the pellet at 2x10^5 ml\u20131 in MMG solution
        by gently swirling.\\\"\\n            note \\\"Store the tube containing isolated
        protoplasts in DAWGMA's styrofoam box in the freezer.\\\"\\n        end \\n
        \   end\\n    \\n\\nend\\n\",\"parent_id\":1505,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:16:51.000-08:00\",\"updated_at\":\"2018-11-07T18:16:51.000-08:00\",\"user_id\":219},{\"id\":90773,\"name\":\"protocol\",\"content\":\"#Chelsea
        Wan\\n\\nclass Protocol\\n    \\n    INPUT = \\\"Digesting cells\\\"\\n    OUTPUT
        = \\\"Protoplasts\\\"\\n\\n  def main\\n\\n    sterile_technique_reminder\\n
        \   \\n    operations.retrieve\\n    \\n    #prepare_W5_solution\\n    \\n
        \   #prepare_MMG_solution\\n    \\n    retrive_and_dilute_dish_contents\\n
        \   \\n    filter_solution\\n    \\n    resuspend_in_W5_solution\\n    \\n
        \   sucrose_separation\\n    \\n    resuspend_in_MMG_solution\\n    \\n  end\\n\\n
        \   def sterile_technique_reminder\\n        show do\\n            title \\\"General
        sterile technique reminders\\\"\\n            note \\\"Always wear the appropriate
        PPEs.\\\"\\n            note \\\"Clean gloves with ethanol often.\\\"\\n            note
        \\\"Clean the following with 80% ethanol:\\\"\\n            check \\\"Lab
        bench\\\"\\n            check \\\"Pipettes\\\"\\n            check \\\"Forceps,
        tube racks, etc\\\"\\n            check \\\"Phones, computers, etc.\\\"\\n
        \       end \\n    end\\n    \\n    #def prepare_W5_solution\\n        #show
        do\\n            #title \\\"Prepare W5 solution\\\"\\n            #note \\\"Add
        the following materials to a clean and labelled test tube:\\\"\\n            #check
        \\\"2 mM MES (pH 5.7)\\\"\\n            #check \\\"154 mM NaCl\\\"\\n            #check
        \\\"125 mM CaCl2\\\"\\n            #check \\\"5 mM KCl\\\"\\n            #note
        \\\"Store W5 solution at room temperature.\\\"\\n        #end \\n    #end\\n
        \   \\n    #def prepare_MMG_solution\\n        #show do\\n            #title
        \\\"Prepare MMG solution\\\"\\n            #note \\\"Add the following materials
        to another clean and labelled test tube:\\\"\\n            #check \\\"4 mM
        MES (pH 5.7)\\\"\\n            #check \\\"0.4 M mannitol\\\"\\n            #check
        \\\"15 mM MgCl2\\\"\\n            #note \\\"Store MMG solution at room temperature.\\\"\\n
        \       #end \\n    #end\\n    \\n    def retrive_and_dilute_dish_contents\\n
        \       show do\\n            title \\\"Retrieve and dilute protoplasts\\\"\\n
        \           note \\\"1. Turn off the shaker. Move beaker from shaker to fume
        food.  The fluid contained in the dish should be a yellow/green color.  If
        using plant leaves (v.s. cell culture), give the solution a gentle swirl to
        release the protoplasts from the leaves.\\\"\\n            note \\\"2. Add
        W5 solution directly to the petri dish.  The volume of W5 solution added should
        be equal to the volume of enzyme solution in the dish (default to 10 mL).\\\"\\n
        \           #Chelsea - I want the volume of final enzyme solotuion used in
        the previous protocol (Treat with cellulase) be displayed here if possible\\n
        \           note \\\"Document the time that cell wall digestion ended.\\\"\\n
        \           #collect time\\n            #is it possible for the collected
        start time and end time to be used to calculate, display, and store the total
        incubation time?\\n            note \\\"4. Document volume of W5 solution
        used.\\\"\\n            get \\\"number\\\", default: \\\"10\\\"\\n        end
        \\n    end\\n    \\n    def filter_solution\\n        show do\\n            title
        \\\"Filter solution containing protoplasts\\\"\\n            note \\\"1. Wash
        100-um nylon mesh with 1 mL of water.\\\"\\n            note \\\"2. Dry nylon
        mesh with kimwipe to remove excess water.\\\"\\n            note \\\"3. Wet
        nylon mesh with 1 mL of W5 solution.\\\"\\n            note \\\"4. Filter
        protoplast and enzyme solution through nylon mesh into a 50 mL Falcon tube.\\\"\\n
        \           note \\\"Label the top and sides of the Falcon tube (date, intials,
        experimental conditions).\\\"\\n        end \\n    end\\n    \\n    def resuspend_in_W5_solution\\n
        \       show do\\n            title \\\"First resuspension (in W5 solution)\\\"\\n
        \           operations.each do |op|\\n                test_tube = op.input(INPUT).item
        \           \\n                note \\\"1. Centrifuge the Falcon tube containing
        the flow through at 100g for 2 minutes.  A small pellet should form at the
        bottom of the test tube.\\\"\\n                note \\\"2. Use vacuum and
        red and blue pipette tips to remove as much supernatant as possible without
        disturbing the pellet.\\\"\\n                note \\\"3. Gently resuspend
        the pellet in 4 mL of W5 solution by gentle swirling (later, at 2x10^5 ml^\u20131
        in W5 solution)\\\"\\n                #note \\\"4. Rest test tube in the styrofoam
        rack in the refridgerator for at least 15 min.  Protoplasts will begin to
        settle and form a pellet.  Do not disturb the test tube.\\\" ##done ##location
        says bench*\\n                check \\\"4. Rest test tube #{test_tube.id}
        from #{test_tube.location} for 15 minutes. Protoplasts will begin to settle
        and form a pellet. Do not disturb the test tube.\\\"\\n            end\\n
        \       end \\n    end\\n    \\n    def sucrose_separation\\n        show
        do\\n            title \\\"Separate healthy protoplasts using sucrose grandient.\\\"\\n
        \           note \\\"Pipette 8 mL of sucrose solution into a 15 mL Falcon
        tube (default to 50% surose).\\\"\\n            note \\\"Slowly pipette all
        4 mL of W5/protoplast suspension on top of the sucrose solution.  Make sure
        to pipette up and down each time you pippette to resuspend the protoplasts.
        \ Also, make sure to keep a sterile environment and ethanol your pipettes.\\\"\\n
        \           note \\\"Centrifuge the 15 mL Flacon tubes at 720xg for 13 min.\\\"\\n
        \       end\\n    end\\n    \\n    def resuspend_in_MMG_solution\\n        show
        do\\n            title \\\"Second resuspension (in MMG solution) and store\\\"\\n
        \           #note \\\"Use vacuum and red and blue pipette tips to remove as
        much supernatant as possible without disturbing the settled protoplasts.\\\"\\n
        \           note \\\"Harvest isolated protoplasts (in layer) from the falcon
        tube into a 2 mL ependorf tube.\\\"\\n            note \\\"Resuspend the protoplasts
        with 500 um of MMG solution.  Gently tap the side of the ependorf tune to
        resuspend.\\\"\\n            #note \\\"Resuspend the pellet at 2x10^5 ml\u20131
        in MMG solution by gentle swirling.\\\"\\n            note \\\"Store the tube
        containing isolated protoplasts in DAWGMA's styrofoam box in the freezer.\\\"\\n
        \       end \\n    end\\n    \\n\\nend\\n\",\"parent_id\":1505,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:15:43.000-08:00\",\"updated_at\":\"2018-11-07T18:15:43.000-08:00\",\"user_id\":219},{\"id\":90772,\"name\":\"protocol\",\"content\":\"#Chelsea
        Wan\\n\\nclass Protocol\\n    \\n    INPUT = \\\"Digesting cells\\\"\\n    OUTPUT
        = \\\"Protoplasts\\\"\\n\\n  def main\\n\\n    sterile_technique_reminder\\n
        \   \\n    operations.retrieve\\n    \\n    #prepare_W5_solution\\n    \\n
        \   #prepare_MMG_solution\\n    \\n    retrive_and_dilute_dish_contents\\n
        \   \\n    filter_solution\\n    \\n    resuspend_in_W5_solution\\n    \\n
        \   sucrose_separation\\n    \\n    resuspend_in_MMG_solution\\n    \\n  end\\n\\n
        \   def sterile_technique_reminder\\n        show do\\n            title \\\"General
        sterile technique reminders\\\"\\n            note \\\"Always wear the appropriate
        PPEs.\\\"\\n            note \\\"Clean gloves with ethanol often.\\\"\\n            note
        \\\"Clean the following with 80% ethanol:\\\"\\n            check \\\"Lab
        bench\\\"\\n            check \\\"Pipettes\\\"\\n            check \\\"Forceps,
        tube racks, etc\\\"\\n            check \\\"Phones, computers, etc.\\\"\\n
        \       end \\n    end\\n    \\n    #def prepare_W5_solution\\n        #show
        do\\n            #title \\\"Prepare W5 solution\\\"\\n            #note \\\"Add
        the following materials to a clean and labelled test tube:\\\"\\n            #check
        \\\"2 mM MES (pH 5.7)\\\"\\n            #check \\\"154 mM NaCl\\\"\\n            #check
        \\\"125 mM CaCl2\\\"\\n            #check \\\"5 mM KCl\\\"\\n            #note
        \\\"Store W5 solution at room temperature.\\\"\\n        #end \\n    #end\\n
        \   \\n    #def prepare_MMG_solution\\n        #show do\\n            #title
        \\\"Prepare MMG solution\\\"\\n            #note \\\"Add the following materials
        to another clean and labelled test tube:\\\"\\n            #check \\\"4 mM
        MES (pH 5.7)\\\"\\n            #check \\\"0.4 M mannitol\\\"\\n            #check
        \\\"15 mM MgCl2\\\"\\n            #note \\\"Store MMG solution at room temperature.\\\"\\n
        \       #end \\n    #end\\n    \\n    def retrive_and_dilute_dish_contents\\n
        \       show do\\n            title \\\"Retrieve and dilute protoplasts\\\"\\n
        \           note \\\"1. Turn off the shaker. Move beaker from shaker to fume
        food.  The fluid contained in the dish should be a yellow/green color.  If
        using plant leaves (v.s. cell culture), give the solution a gentle swirl to
        release the protoplasts from the leaves.\\\"\\n            note \\\"2. Add
        W5 solution directly to the petri dish.  The volume of W5 solution added should
        be equal to the volume of enzyme solution in the dish (default to 10 mL).\\\"\\n
        \           #Chelsea - I want the volume of final enzyme solotuion used in
        the previous protocol (Treat with cellulase) be displayed here if possible\\n
        \           note \\\"Document the time that cell wall digestion ended.\\\"\\n
        \           #collect time\\n            #is it possible for the collected
        start time and end time to be used to calculate, display, and store the total
        incubation time?\\n            note \\\"4. Document volume of W5 solution
        used.\\\"\\n            get \\\"number\\\", default: \\\"10\\\"\\n        end
        \\n    end\\n    \\n    def filter_solution\\n        show do\\n            title
        \\\"Filter solution containing protoplasts\\\"\\n            note \\\"1. Wash
        100-um nylon mesh with 1 mL of water.\\\"\\n            note \\\"2. Dry nylon
        mesh with kimwipe to remove excess water.\\\"\\n            note \\\"3. Wet
        nylon mesh with 1 mL of W5 solution.\\\"\\n            note \\\"4. Filter
        protoplast and enzyme solution through nylon mesh into a 50 mL Falcon tube.\\\"\\n
        \           note \\\"Label the top and sides of the Falcon tube (date, intials,
        experimental conditions).\\\"\\n        end \\n    end\\n    \\n    def resuspend_in_W5_solution\\n
        \       show do\\n            title \\\"First resuspension (in W5 solution)\\\"\\n
        \           operations.each do |op|\\n                tube = op.input(INPUT).item
        \           \\n                note \\\"1. Centrifuge the Falcon tube containing
        the flow through at 100g for 2 minutes.  A small pellet should form at the
        bottom of the test tube.\\\"\\n                note \\\"2. Use vacuum and
        red and blue pipette tips to remove as much supernatant as possible without
        disturbing the pellet.\\\"\\n                note \\\"3. Gently resuspend
        the pellet in 4 mL of W5 solution by gentle swirling (later, at 2x10^5 ml^\u20131
        in W5 solution)\\\"\\n                #note \\\"4. Rest test tube in the styrofoam
        rack in the refridgerator for at least 15 min.  Protoplasts will begin to
        settle and form a pellet.  Do not disturb the test tube.\\\" ##done ##location
        says bench*\\n                check \\\"4. Rest test tube #{tube.id} from
        #{tube.location} for 15 minutes. Protoplasts will begin to settle and form
        a pellet. Do not disturb the test tube.\\\"\\n            end\\n        end
        \\n    end\\n    \\n    def sucrose_separation\\n        show do\\n            title
        \\\"Separate healthy protoplasts using sucrose grandient.\\\"\\n            note
        \\\"Pipette 8 mL of sucrose solution into a 15 mL Falcon tube (default to
        50% surose).\\\"\\n            note \\\"Slowly pipette all 4 mL of W5/protoplast
        suspension on top of the sucrose solution.  Make sure to pipette up and down
        each time you pippette to resuspend the protoplasts.  Also, make sure to keep
        a sterile environment and ethanol your pipettes.\\\"\\n            note \\\"Centrifuge
        the 15 mL Flacon tubes at 720xg for 13 min.\\\"\\n        end\\n    end\\n
        \   \\n    def resuspend_in_MMG_solution\\n        show do\\n            title
        \\\"Second resuspension (in MMG solution) and store\\\"\\n            #note
        \\\"Use vacuum and red and blue pipette tips to remove as much supernatant
        as possible without disturbing the settled protoplasts.\\\"\\n            note
        \\\"Harvest isolated protoplasts (in layer) from the falcon tube into a 2
        mL ependorf tube.\\\"\\n            note \\\"Resuspend the protoplasts with
        500 um of MMG solution.  Gently tap the side of the ependorf tune to resuspend.\\\"\\n
        \           #note \\\"Resuspend the pellet at 2x10^5 ml\u20131 in MMG solution
        by gentle swirling.\\\"\\n            note \\\"Store the tube containing isolated
        protoplasts in DAWGMA's styrofoam box in the freezer.\\\"\\n        end \\n
        \   end\\n    \\n\\nend\\n\",\"parent_id\":1505,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:15:18.000-08:00\",\"updated_at\":\"2018-11-07T18:15:18.000-08:00\",\"user_id\":219},{\"id\":90771,\"name\":\"protocol\",\"content\":\"#Chelsea
        Wan\\n\\nclass Protocol\\n    \\n    INPUT = \\\"Digesting cells\\\"\\n    OUTPUT
        = \\\"Protoplasts\\\"\\n\\n  def main\\n\\n    sterile_technique_reminder\\n
        \   \\n    operations.retrieve\\n    \\n    #prepare_W5_solution\\n    \\n
        \   #prepare_MMG_solution\\n    \\n    retrive_and_dilute_dish_contents\\n
        \   \\n    filter_solution\\n    \\n    resuspend_in_W5_solution\\n    \\n
        \   sucrose_separation\\n    \\n    resuspend_in_MMG_solution\\n    \\n  end\\n\\n
        \   def sterile_technique_reminder\\n        show do\\n            title \\\"General
        sterile technique reminders\\\"\\n            note \\\"Always wear the appropriate
        PPEs.\\\"\\n            note \\\"Clean gloves with ethanol often.\\\"\\n            note
        \\\"Clean the following with 80% ethanol:\\\"\\n            check \\\"Lab
        bench\\\"\\n            check \\\"Pipettes\\\"\\n            check \\\"Forceps,
        tube racks, etc\\\"\\n            check \\\"Phones, computers, etc.\\\"\\n
        \       end \\n    end\\n    \\n    #def prepare_W5_solution\\n        #show
        do\\n            #title \\\"Prepare W5 solution\\\"\\n            #note \\\"Add
        the following materials to a clean and labelled test tube:\\\"\\n            #check
        \\\"2 mM MES (pH 5.7)\\\"\\n            #check \\\"154 mM NaCl\\\"\\n            #check
        \\\"125 mM CaCl2\\\"\\n            #check \\\"5 mM KCl\\\"\\n            #note
        \\\"Store W5 solution at room temperature.\\\"\\n        #end \\n    #end\\n
        \   \\n    #def prepare_MMG_solution\\n        #show do\\n            #title
        \\\"Prepare MMG solution\\\"\\n            #note \\\"Add the following materials
        to another clean and labelled test tube:\\\"\\n            #check \\\"4 mM
        MES (pH 5.7)\\\"\\n            #check \\\"0.4 M mannitol\\\"\\n            #check
        \\\"15 mM MgCl2\\\"\\n            #note \\\"Store MMG solution at room temperature.\\\"\\n
        \       #end \\n    #end\\n    \\n    def retrive_and_dilute_dish_contents\\n
        \       show do\\n            title \\\"Retrieve and dilute protoplasts\\\"\\n
        \           note \\\"1. Turn off the shaker. Move beaker from shaker to fume
        food.  The fluid contained in the dish should be a yellow/green color.  If
        using plant leaves (v.s. cell culture), give the solution a gentle swirl to
        release the protoplasts from the leaves.\\\"\\n            note \\\"2. Add
        W5 solution directly to the petri dish.  The volume of W5 solution added should
        be equal to the volume of enzyme solution in the dish (default to 10 mL).\\\"\\n
        \           #Chelsea - I want the volume of final enzyme solotuion used in
        the previous protocol (Treat with cellulase) be displayed here if possible\\n
        \           note \\\"Document the time that cell wall digestion ended.\\\"\\n
        \           #collect time\\n            #is it possible for the collected
        start time and end time to be used to calculate, display, and store the total
        incubation time?\\n            note \\\"4. Document volume of W5 solution
        used.\\\"\\n            get \\\"number\\\", default: \\\"10\\\"\\n        end
        \\n    end\\n    \\n    def filter_solution\\n        show do\\n            title
        \\\"Filter solution containing protoplasts\\\"\\n            note \\\"1. Wash
        100-um nylon mesh with 1 mL of water.\\\"\\n            note \\\"2. Dry nylon
        mesh with kimwipe to remove excess water.\\\"\\n            note \\\"3. Wet
        nylon mesh with 1 mL of W5 solution.\\\"\\n            note \\\"4. Filter
        protoplast and enzyme solution through nylon mesh into a 50 mL Falcon tube.\\\"\\n
        \           note \\\"Label the top and sides of the Falcon tube (date, intials,
        experimental conditions).\\\"\\n        end \\n    end\\n    \\n    def resuspend_in_W5_solution\\n
        \       show do\\n            title \\\"First resuspension (in W5 solution)\\\"\\n
        \           operations.each do |op|\\n                tube = op.input(INPUT).item
        \           \\n                note \\\"1. Centrifuge the Falcon tube containing
        the flow through at 100g for 2 minutes.  A small pellet should form at the
        bottom of the test tube.\\\"\\n                note \\\"2. Use vacuum and
        red and blue pipette tips to remove as much supernatant as possible without
        disturbing the pellet.\\\"\\n                note \\\"3. Gently resuspend
        the pellet in 4 mL of W5 solution by gentle swirling (later, at 2x10^5 ml^\u20131
        in W5 solution)\\\"\\n                #note \\\"4. Rest test tube in the styrofoam
        rack in the refridgerator for at least 15 min.  Protoplasts will begin to
        settle and form a pellet.  Do not disturb the test tube.\\\" ##done\\n                check
        \\\"4. Rest test tube #{tube.id} from #{tube.location} for 15 minutes. Protoplasts
        will begin to settle and form a pellet. Do not disturb the test tube.\\\"\\n
        \           end\\n        end \\n    end\\n    \\n    def sucrose_separation\\n
        \       show do\\n            title \\\"Separate healthy protoplasts using
        sucrose grandient.\\\"\\n            note \\\"Pipette 8 mL of sucrose solution
        into a 15 mL Falcon tube (default to 50% surose).\\\"\\n            note \\\"Slowly
        pipette all 4 mL of W5/protoplast suspension on top of the sucrose solution.
        \ Make sure to pipette up and down each time you pippette to resuspend the
        protoplasts.  Also, make sure to keep a sterile environment and ethanol your
        pipettes.\\\"\\n            note \\\"Centrifuge the 15 mL Flacon tubes at
        720xg for 13 min.\\\"\\n        end\\n    end\\n    \\n    def resuspend_in_MMG_solution\\n
        \       show do\\n            title \\\"Second resuspension (in MMG solution)
        and store\\\"\\n            #note \\\"Use vacuum and red and blue pipette
        tips to remove as much supernatant as possible without disturbing the settled
        protoplasts.\\\"\\n            note \\\"Harvest isolated protoplasts (in layer)
        from the falcon tube into a 2 mL ependorf tube.\\\"\\n            note \\\"Resuspend
        the protoplasts with 500 um of MMG solution.  Gently tap the side of the ependorf
        tune to resuspend.\\\"\\n            #note \\\"Resuspend the pellet at 2x10^5
        ml\u20131 in MMG solution by gentle swirling.\\\"\\n            note \\\"Store
        the tube containing isolated protoplasts in DAWGMA's styrofoam box in the
        freezer.\\\"\\n        end \\n    end\\n    \\n\\nend\\n\",\"parent_id\":1505,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:14:28.000-08:00\",\"updated_at\":\"2018-11-07T18:14:28.000-08:00\",\"user_id\":219},{\"id\":90770,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n
        \       \\r\\n    # Remove the overexpression culture from the shaker.\\r\\n
        \   operations.retrieve.make\\r\\n        \\r\\n    op_in_overexpression =
        []\\r\\n    op_out_cell_pellet = []\\r\\n    op_out_after = []\\r\\n    op_count
        = 0\\r\\n    operations.running.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overexpression \\u003c\\u003c op.input(\\\"Overexpression\\\").item.id\\r\\n
        \       op_out_cell_pellet \\u003c\\u003c op.output(\\\"Cell pellet\\\").item.id\\r\\n
        \       op_out_after \\u003c\\u003c op.output(\\\"After IPTG\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n    # Reserve 1ml cell culture after IPTG induction in
        Eppendorf with design ID \\r\\n    reserve_culture_after_iptg(op_count,op_in_overexpression,op_out_after)\\r\\n
        \   \\r\\n    # Take four tubes and label them with numbers.\\r\\n    take_tubes_and_label(op_count,op_in_overexpression,op_out_cell_pellet)\\r\\n
        \       \\r\\n    scale_balancing\\r\\n    \\r\\n    spin_down_cell(op_count,op_out_after,op_in_overexpression,op_out_cell_pellet)\\r\\n\\r\\n
        \   # Pour the culture medium into four tubes and harvest cells by centrifugation
        under 4696 g-force for 30mins at 4\xB0C.\\r\\n    # Remove the suspension
        and keep the pellet.\\r\\n    # Measure OD600 value cell culture after IPTG
        induction by nanodrop (Prof. James Carother\u2019s lab).\\r\\n    od_value_after
        = measure_od_value op_out_after\\r\\n        \\r\\n    # Record the OD value.\\r\\n
        \   i = 0\\r\\n    operations.running.each do |op|\\r\\n        sample_after
        = op.output(\\\"After IPTG\\\").item\\r\\n        sample_after.associate :od_value,
        od_value_after[i]\\r\\n        i = i + 1\\r\\n    end\\r\\n        \\r\\n
        \   # Weigh the pellet.\\r\\n    #sample_weight = weigh_pellet op_out_cell_pellet\\r\\n
        \   \\r\\n    # Record the pellet weight.\\r\\n    #i = 0\\r\\n    #operations.running.each
        do |op|\\r\\n        #pellet = op.output(\\\"Cell pellet\\\").item\\r\\n        #pellet.associate
        :weight, sample_weight[i]\\r\\n        #i = i + 1\\r\\n    #end\\r\\n    \\r\\n
        \   # Store at -80\xB0C.\\r\\n    \\r\\n      operations.running.each do |op|\\r\\n
        \     op.output(\\\"Cell pellet\\\").child_item.move \\\"-80\xB0C freezer\\\"\\r\\n
        \   end\\r\\n    \\r\\n     operations.store(io: \\\"output\\\", interactive:
        true, method: 'boxes')\\r\\n   \\r\\n    return {}\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def measure_od_value(meas_sample)\\r\\n    od_value = []\\r\\n    show do\\r\\n
        \     title \\\"Measure OD600 value\\\"\\r\\n      #after IPTG\\r\\n      check
        \\\"Grab a box of 1000 \xB5l tip, a P1000 pipettor, a tip waste container,
        #{meas_sample.size+1} plastic cuvettes and 1 mL of LB in a 1.5 mL tube.\\\"\\r\\n
        \     check \\\"Bring the samples (ID: #{meas_sample.to_sentence}) to Prof.
        James Carother\u2019s lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 of mL LB
        \\u003cb\\u003e\\u003e\\u003c/b\\u003e measure\\\"\\r\\n      check \\\"Measure
        and record OD600 value.\\\"\\r\\n      image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    \\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n
        \       title \\\"Enter OD value\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"Enter OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\n  def reserve_culture_after_iptg(op_count,op_in_overexpression,op_out_after)\\r\\n
        \   op_table = [[\\\"Cell curture ID\\\",\\\"Volume\\\",\\\"1.5 mL tube ID\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c
        op_in_overexpression[i]\\r\\n        row \\u003c\\u003c \\\"1 mL\\\"\\r\\n
        \       row \\u003c\\u003c {content:op_out_after[i], check: true}\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n        title
        \\\"Pre-cool a centrifuge\\\"\\r\\n        bullet \\\"Set the centrifuge to
        4\xB0C.\\\"\\r\\n        image \\\"Actions/ProteinPurification/centrifuge.jpg\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Reserve 1 mL of
        cell culture\\\"\\r\\n        # after IPTG induction\\r\\n        check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 1.5 mL tube(s).\\\"\\r\\n        check
        \\\"Label the tube with ID: #{op_out_after.to_sentence}.\\\"\\r\\n        check
        \\\"Transfer 1 mL of cell culture to the corresponding 1.5mL tube by using
        a motorized pipet filler.\\\"\\r\\n        table op_table\\r\\n        warning
        \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def take_tubes_and_label(op_count,op_in_overexpression,op_out_cell_pellet)\\r\\n
        \   op_table = [[\\\"Cell culture ID\\\",\\\"Volume\\\",\\\"225mL Falcon tube
        ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op_in_overexpression[i]\\r\\n        row \\u003c\\u003c \\\"200
        mL\\\"\\r\\n        row \\u003c\\u003c {content:op_out_cell_pellet[i], check:
        true}\\r\\n        op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do \\r\\n      title \\\"Grab tubes and label with ID\\\"\\r\\n      check
        \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 225 mL Falcon tube(s)
        and label with ID: #{op_out_cell_pellet.to_sentence}.\\\"\\r\\n      check
        \\\"Pour 200 mL of cell culture to the corresponding tube and screw the caps.\\\"\\r\\n
        \     table op_table\\r\\n      image \\\"Actions/ProteinPurification/225_falcon_tube.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def scale_balancing\\r\\n    show do\\r\\n
        \       title \\\"Scale balancing\\\"\\r\\n        bullet \\\"Perform this
        step using the scale inside the gel room.\\\"\\r\\n        check \\\"Zero
        the scale with an empty 225 mL tube and a beaker.\\\"\\r\\n        check \\\"Weigh
        the tube and make sure to balance.\\\"\\r\\n        check \\\"If the balance
        is off, add LB until a balance is reached.\\\"\\r\\n        warning \\\"Pairwise
        is sufficient. Balance samples in tubes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def spin_down_cell(op_count,op_out_after,op_in_overexpression,op_out_cell_pellet)\\r\\n
        \   \\r\\n    op_table = [[\\\"Cell culture ID\\\",\\\"Volume\\\",\\\"225
        mL Falcon tube ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n        row
        = []\\r\\n        row \\u003c\\u003c op_in_overexpression[i]\\r\\n        row
        \\u003c\\u003c \\\"all the remaining cell culture\\\"\\r\\n        row \\u003c\\u003c
        {content:op_out_cell_pellet[i], check: true}\\r\\n        op_table \\u003c\\u003c
        row\\r\\n    end\\r\\n    \\r\\n    run = (op_count/4).floor\\r\\n    remainder
        = op_count % 4\\r\\n    if (remainder) != 0\\r\\n        run = run + 1\\r\\n
        \   end\\r\\n    \\r\\n    for i in 1..run\\r\\n        if (i*4 \\u003e op_count)\\r\\n
        \           leng = remainder\\r\\n        else\\r\\n            leng = 4\\r\\n
        \       end\\r\\n        tube_id = op_out_after[(i-1)*4,leng]\\r\\n        \\r\\n
        \       show do\\r\\n            title \\\"Spin down the cell\\\"\\r\\n            bullet
        \\\"Perform the steps with the following tubes: #{op_out_cell_pellet.to_sentence}.\\\"\\r\\n
        \           check \\\"Spin tubes at 4696g for 15 minutes.\\\"\\r\\n            check
        \\\"Remove tubes from the centrifuge and pour off supernatant.\\\"\\r\\n        end\\r\\n
        \       show do \\r\\n            title \\\"Spin down the cell\\\"\\r\\n            bullet
        \\\"Perform the steps with the following tubes: #{op_out_cell_pellet.to_sentence}.\\\"\\r\\n
        \           check \\\"Pour the remaining cell culture to the corresponding
        tube.\\\"\\r\\n            table op_table\\r\\n            warning \\\"Pairwise
        is sufficient. Balance samples in tubes.\\\"\\r\\n            warning \\\"Scale
        balancing. If the balance is off, add LB until a balance is reached.\\\"\\r\\n
        \           check \\\"Spin tubes at 4696g for 15 minutes.\\\"\\r\\n            check
        \\\"Remove tubes from the centrifuge.\\\"\\r\\n            check \\\"Pour
        off supernatant and store the pellet in -80\xB0C freezer.\\\"\\r\\n        end\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n=begin\\r\\n  def weigh_pellet op_out_cell_pellet\\r\\n
        \   sample_weight = []\\r\\n    show do\\r\\n        title \\\"Weigh the cell
        pellet\\\"\\r\\n        note \\\"Weigh the cell pellet using scale.\\\"\\r\\n
        \       check \\\"Zero the scale with an empty 225mL falcon tube\\\"\\r\\n
        \       note \\\"Weigh each cell pellet and enter the weights in the following
        order (corresponsing to sample ID):\\\"\\r\\n    end\\r\\n    op_out_cell_pellet.each
        do |id|\\r\\n      weight_tmp = show do\\r\\n        title \\\"Weigh the cell
        pellet\\\"\\r\\n        get \\\"number\\\", var: \\\"x\\\", label: \\\"Enter
        weight value(g) with ID:#{id}\\\", default: 0\\r\\n      end\\r\\n      sample_weight
        \\u003c\\u003c weight_tmp[:x]\\r\\n    end\\r\\n    return sample_weight\\r\\n
        \ end\\r\\n=end\\r\\n  \\r\\nend\",\"parent_id\":1158,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:11:18.000-08:00\",\"updated_at\":\"2018-11-07T18:11:18.000-08:00\",\"user_id\":200},{\"id\":90769,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n
        \       \\r\\n    # Remove the overexpression culture from the shaker.\\r\\n
        \   operations.retrieve.make\\r\\n        \\r\\n    op_in_overexpression =
        []\\r\\n    op_out_overexpression = []\\r\\n    op_out_before = []\\r\\n    op_count
        = 0\\r\\n    operations.running.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overexpression \\u003c\\u003c op.input(\\\"Overexpression\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \       op_out_before \\u003c\\u003c op.output(\\\"Before IPTG\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    # Reserve 1ml cell culture before IPTG induction
        in Eppendorf with design ID\\r\\n    reserve_culture_before_iptg(op_count,op_in_overexpression,op_out_before)\\r\\n
        \   \\r\\n    # Add 800uL isopropyl-1-thio-beta-D-galactopyranoside (IPTG)
        into the culture.\\r\\n    add_iptg(op_count,op_in_overexpression)\\r\\n    \\r\\n
        \   relabel_overexpression(op_count,op_in_overexpression,op_out_overexpression)\\r\\n
        \       \\r\\n    # Keep the culture in 37 \xB0C shaker for 4 hours.\\r\\n
        \   # After 4 hours, remove the culture from the shaker.\\r\\n    culture_in_shaker_for_4hrs\\r\\n
        \   \\r\\n    # Measure OD600 value cell culture before IPTG induction by
        nanodrop (Prof. James Carother\u2019s lab).\\r\\n    od_value_before = measure_od_value(op_out_before)\\r\\n
        \       \\r\\n    # Record the OD value.\\r\\n    i = 0\\r\\n    operations.running.each
        do |op|\\r\\n        sample_before = op.output(\\\"Before IPTG\\\").item\\r\\n
        \       sample_before.associate :od_value, od_value_before[i]\\r\\n        i
        = i + 1\\r\\n    end\\r\\n    \\r\\n    spin_down_pellet(op_out_before)\\r\\n
        \   \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n    end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n\\r\\n
        \ def reserve_culture_before_iptg(op_count,op_in_overexpression,op_out_before)\\r\\n
        \   op_table = [[\\\"Cell curture ID\\\",\\\"Volume\\\",\\\"1.5mL tube ID\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c
        op_in_overexpression[i]\\r\\n        row \\u003c\\u003c \\\"1 mL\\\"\\r\\n
        \       row \\u003c\\u003c {content:op_out_before[i], check: true}\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n      title \\\"Reserve
        1 mL of cell culture before IPTG induction\\\"\\r\\n      check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5mL tube(s).\\\"\\r\\n      check \\\"Label tubes with ID: #{op_out_before.to_sentence}.\\\"\\r\\n
        \     check \\\" Transfer 1 mL of cell culture to the corresponding 1.5 mL
        tube by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def add_iptg(op_count,op_in_overexpression)\\r\\n
        \   show do \\r\\n      title \\\"IPTG induction\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e IPTG aliquot(s) from a box labeled
        \\u003cb\\u003eprotein purification\\u003c/b\\u003e in -20\xB0C freezer (B1-165).\\\"\\r\\n
        \     check \\\"Add one IPTG aliquot to each flask: #{op_in_overexpression.to_sentence}.\\\"
        \\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def relabel_overexpression(op_count,op_in_overexpression,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Old sample ID\\\",\\\"New Label\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c op_in_overexpression[i]\\r\\n
        \       row \\u003c\\u003c {content:op_out_overexpression[i], check: true}\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n        title
        \\\"Relabel flasks with new ID\\\"\\r\\n        check \\\"Write ID #{op_out_overexpression.to_sentence}
        on a piece of lab tape and affix it on the old labels.\\\"\\r\\n        table
        op_table\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def culture_in_shaker_for_4hrs\\r\\n
        \   show do \\r\\n      title \\\"Incubate\\\"\\r\\n      check \\\"Incubate
        cell culture at 37\xB0C shaker incubator for 4 hours.\\\"\\r\\n      bullet
        \\\"\\u003ca href=\\\\'https://www.google.com/search?q=4%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 4 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Harvest
        Cell\\\\'\\u003c/b\\u003e protocol.\\\"\\r\\n      check \\\"While the cell
        cultures incubate, finish this protocol by completing the remaining tasks.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def measure_od_value(meas_sample)\\r\\n
        \   od_value = []\\r\\n    show do\\r\\n      bullet \\\"Measure OD600 value
        of cell culture before IPTG induction.\\\"\\r\\n      check \\\"Grab a box
        of 1000 \xB5l tip, a P1000 pipettor, a tip waste container, #{meas_sample.size+1}
        plastic cuvettes and 1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring
        the samples (ID: #{meas_sample.to_sentence}) to Prof. James Carother\u2019s
        lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL of LB
        \\u003cb\\u003e\\u003e\\u003c/b\\u003e measure\\\"\\r\\n      check \\\"Measure
        and record OD600 value.\\\"\\r\\n      image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value\\\"\\r\\n        get \\\"number\\\", var: \\\"x\\\", label:
        \\\"Enter OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n      od_value
        \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n  end\\r\\n
        \ \\r\\n  def spin_down_pellet(op_out_before)\\r\\n    show do\\r\\n        title
        \\\"Spin down cell\\\"\\r\\n        bullet \\\"Perform the steps with the
        following tubes: #{op_out_before.to_sentence}.\\\"\\r\\n        check \\\"Spin
        down at 6000g for 5 minutes.\\\"\\r\\n        check \\\"Remove tubes from
        the centrifuge. Pour off supernatant and keep the pellet.\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\nend\",\"parent_id\":1154,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:11:06.000-08:00\",\"updated_at\":\"2018-11-07T18:11:06.000-08:00\",\"user_id\":200},{\"id\":90768,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight.to_sentence}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5 mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Retrieve #{op_out_overexpression.to_sentence} from 37\xB0C
        shaker.\\\"\\r\\n        check \\\"Transfer 1mL of cell culture to the corresponding
        1.5 mL tube by using a motorized pipet filler.\\\"\\r\\n        check \\\"Return
        the cell culture to 37\xB0C shaker.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n
        \ def measure_od_value(meas_sample)\\r\\n    od_value = []\\r\\n    show do\\r\\n
        \     title \\\"Measure OD600 value of cell culture\\\"\\r\\n      check \\\"Grab
        a box of 1000 \xB5l tip, a P1000 pipettor, a tip waste container, #{meas_sample.size+1}
        plastic cuvettes and 1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring
        the samples (ID: #{meas_sample.to_sentence}) to Prof. James Carother\u2019s
        lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL of LB
        \\u003cb\\u003e\\u003e\\u003c/b\\u003e measure\\\"\\r\\n      check \\\"Measure
        and record OD600 value.\\\"\\r\\n      image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:08:23.000-08:00\",\"updated_at\":\"2018-11-07T18:08:23.000-08:00\",\"user_id\":200},{\"id\":90767,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight.to_sentence}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5 mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Retrieve #{op_out_overexpression.to_sentence} from 37\xB0C
        shaker.\\\"\\r\\n        check \\\"Transfer 1mL of cell culture to the corresponding
        1.5 mL tube by using a motorized pipet filler.\\\"\\r\\n        check \\\"Return
        the cell culture to 37\xB0C shaker.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n
        \ def measure_od_value(meas_sample)\\r\\n    od_value = []\\r\\n    show do\\r\\n
        \     title \\\"Measure OD600 value of cell culture\\\"\\r\\n      check \\\"Grab
        a box of 1000 \xB5l tip, a P1000 pipettor, a tip waste container, #{meas_sample.size+1}
        plastic cuvettes and 1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring
        the samples (ID: #{meas_sample.to_sentence}) to Prof. James Carother\u2019s
        lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL of LB
        \\u003cb\\u003e\\u003e\\u003c/b\\u003e measure\\\"\\r\\n      check \\\"Measure
        and record the OD600 value.\\\"\\r\\n      image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:08:04.000-08:00\",\"updated_at\":\"2018-11-07T18:08:04.000-08:00\",\"user_id\":200},{\"id\":90766,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight.to_sentence}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5 mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Retrieve #{op_out_overexpression.to_sentence} from 37\xB0C
        shaker.\\\"\\r\\n        check \\\"Transfer 1mL of cell culture to the corresponding
        1.5 mL tube by using a motorized pipet filler.\\\"\\r\\n        check \\\"Return
        the cell culture to 37\xB0C shaker.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n
        \ def measure_od_value(meas_sample)\\r\\n    od_value = []\\r\\n    show do\\r\\n
        \     title \\\"Measure OD600 value of cell culture\\\"\\r\\n      check \\\"Grab
        a box of 1000 \xB5l tip, a P1000 pipettor, a tip waste container, #{meas_sample.size+1}
        plastic cuvettes and 1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring
        the samples (ID: #{meas_sample.to_sentence}) to Prof. James Carother\u2019s
        lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record the OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:07:28.000-08:00\",\"updated_at\":\"2018-11-07T18:07:28.000-08:00\",\"user_id\":200},{\"id\":90765,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight.to_sentence}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5 mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Retrieve #{op_out_overexpression.to_sentence} from 37\xB0C
        shaker.\\\"\\r\\n        check \\\"Transfer 1mL of cell culture to the corresponding
        1.5 mL tube by using a motorized pipet filler.\\\"\\r\\n        check \\\"Return
        the cell culture to 37\xB0C shaker.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n
        \ def measure_od_value(meas_sample)\\r\\n    od_value = []\\r\\n    show do\\r\\n
        \     title \\\"Measure OD600 value of cell culture\\\"\\r\\n      check \\\"Grab
        a box of 1000 \xB5l tip, a P1000 pipettor, a tip waste container, #{meas_sample.size+1}
        plastic cuvettes and 1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring
        the samples (ID: #{meas_sample.to_sentence}) to Prof. James Carother\u2019s
        lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record the OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:07:21.000-08:00\",\"updated_at\":\"2018-11-07T18:07:21.000-08:00\",\"user_id\":200},{\"id\":90764,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight.to_sentence}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5 mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Retrieve #{op_out_overexpression.to_sentence} from 37\xB0C
        shaker.\\\"\\r\\n        check \\\"Transfer 1mL of cell culture to the corresponding
        1.5 mL tube by using a motorized pipet filler.\\\"\\r\\n        check \\\"Return
        the cell culture to 37\xB0C shaker.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n
        \ def measure_od_value(meas_sample)\\r\\n    od_value = []\\r\\n    show do\\r\\n
        \     title \\\"Measure OD600 value of cell culture\\\"\\r\\n      check \\\"Grab
        a box of 1000 \xB5l tip, a P1000 pipettor, a tip waste container, #{meas_sample.size+1}
        plastic cuvettes and 1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring
        the samples (ID #{meas_sample.to_sentence}) to Prof. James Carother\u2019s
        lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record the OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:06:42.000-08:00\",\"updated_at\":\"2018-11-07T18:06:42.000-08:00\",\"user_id\":200},{\"id\":90763,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight.to_sentence}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5 mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Transfer 1mL of cell culture to the corresponding 1.5 mL
        tube by using a motorized pipet filler.\\\"\\r\\n        check \\\"Return
        the cell culture to 37\xB0C shaker.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n
        \ def measure_od_value(meas_sample)\\r\\n    od_value = []\\r\\n    show do\\r\\n
        \     title \\\"Measure OD600 value of cell culture\\\"\\r\\n      check \\\"Grab
        a box of 1000 \xB5l tip, a P1000 pipettor, a tip waste container, #{meas_sample.size+1}
        plastic cuvettes and 1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring
        the samples (ID #{meas_sample.to_sentence}) to Prof. James Carother\u2019s
        lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record the OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:05:30.000-08:00\",\"updated_at\":\"2018-11-07T18:05:30.000-08:00\",\"user_id\":200},{\"id\":90762,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight.to_sentence}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5 mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Transfer 1mL of cell culture to the corresponding 1.5 mL
        tube.\\\"\\r\\n        check \\\"Return the cell culture to 37\xB0C shaker.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def measure_od_value(meas_sample)\\r\\n
        \   od_value = []\\r\\n    show do\\r\\n      title \\\"Measure OD600 value
        of cell culture\\\"\\r\\n      check \\\"Grab a box of 1000 \xB5l tip, a P1000
        pipettor, a tip waste container, #{meas_sample.size+1} plastic cuvettes and
        1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring the samples (ID
        #{meas_sample.to_sentence}) to Prof. James Carother\u2019s lab.\\\"\\r\\n
        \     check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record the OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:04:43.000-08:00\",\"updated_at\":\"2018-11-07T18:04:43.000-08:00\",\"user_id\":200},{\"id\":90761,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight.to_sentence}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5 mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Transfer 1mL of cell culture to the corresponding 1.5mL
        tube.\\\"\\r\\n        check \\\"Return the cell culture to 37\xB0C shaker.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def measure_od_value(meas_sample)\\r\\n
        \   od_value = []\\r\\n    show do\\r\\n      title \\\"Measure OD600 value
        of cell culture\\\"\\r\\n      check \\\"Grab a box of 1000 \xB5l tip, a P1000
        pipettor, a tip waste container, #{meas_sample.size+1} plastic cuvettes and
        1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring the samples (ID
        #{meas_sample.to_sentence}) to Prof. James Carother\u2019s lab.\\\"\\r\\n
        \     check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record the OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:04:36.000-08:00\",\"updated_at\":\"2018-11-07T18:04:36.000-08:00\",\"user_id\":200},{\"id\":90760,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight.to_sentence}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Transfer 1mL of cell culture to the corresponding 1.5mL
        tube.\\\"\\r\\n        check \\\"Return the cell culture to 37\xB0C shaker.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def measure_od_value(meas_sample)\\r\\n
        \   od_value = []\\r\\n    show do\\r\\n      title \\\"Measure OD600 value
        of cell culture\\\"\\r\\n      check \\\"Grab a box of 1000 \xB5l tip, a P1000
        pipettor, a tip waste container, #{meas_sample.size+1} plastic cuvettes and
        1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring the samples (ID
        #{meas_sample.to_sentence}) to Prof. James Carother\u2019s lab.\\\"\\r\\n
        \     check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record the OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:04:29.000-08:00\",\"updated_at\":\"2018-11-07T18:04:29.000-08:00\",\"user_id\":200},{\"id\":90758,\"name\":\"protocol\",\"content\":\"#Chelsea
        Wan\\n\\nclass Protocol\\n    \\n    INPUT = \\\"Digesting cells\\\"\\n    OUTPUT
        = \\\"Protoplasts\\\"\\n\\n  def main\\n\\n    sterile_technique_reminder\\n
        \   \\n    operations.retrieve\\n    \\n    #prepare_W5_solution\\n    \\n
        \   #prepare_MMG_solution\\n    \\n    retrive_and_dilute_dish_contents\\n
        \   \\n    filter_solution\\n    \\n    resuspend_in_W5_solution\\n    \\n
        \   sucrose_separation\\n    \\n    resuspend_in_MMG_solution\\n    \\n  end\\n\\n
        \   def sterile_technique_reminder\\n        show do\\n            title \\\"General
        sterile technique reminders\\\"\\n            note \\\"Always wear the appropriate
        PPEs.\\\"\\n            note \\\"Clean gloves with ethanol often.\\\"\\n            note
        \\\"Clean the following with 80% ethanol:\\\"\\n            check \\\"Lab
        bench\\\"\\n            check \\\"Pipettes\\\"\\n            check \\\"Forceps,
        tube racks, etc\\\"\\n            check \\\"Phones, computers, etc.\\\"\\n
        \       end \\n    end\\n    \\n    #def prepare_W5_solution\\n        #show
        do\\n            #title \\\"Prepare W5 solution\\\"\\n            #note \\\"Add
        the following materials to a clean and labelled test tube:\\\"\\n            #check
        \\\"2 mM MES (pH 5.7)\\\"\\n            #check \\\"154 mM NaCl\\\"\\n            #check
        \\\"125 mM CaCl2\\\"\\n            #check \\\"5 mM KCl\\\"\\n            #note
        \\\"Store W5 solution at room temperature.\\\"\\n        #end \\n    #end\\n
        \   \\n    #def prepare_MMG_solution\\n        #show do\\n            #title
        \\\"Prepare MMG solution\\\"\\n            #note \\\"Add the following materials
        to another clean and labelled test tube:\\\"\\n            #check \\\"4 mM
        MES (pH 5.7)\\\"\\n            #check \\\"0.4 M mannitol\\\"\\n            #check
        \\\"15 mM MgCl2\\\"\\n            #note \\\"Store MMG solution at room temperature.\\\"\\n
        \       #end \\n    #end\\n    \\n    def retrive_and_dilute_dish_contents\\n
        \       show do\\n            title \\\"Retrieve and dilute protoplasts\\\"\\n
        \           note \\\"1. Turn off the shaker. Move beaker from shaker to fume
        food.  The fluid contained in the dish should be a yellow/green color.  If
        using plant leaves (v.s. cell culture), give the solution a gentle swirl to
        release the protoplasts from the leaves.\\\"\\n            note \\\"2. Add
        W5 solution directly to the petri dish.  The volume of W5 solution added should
        be equal to the volume of enzyme solution in the dish (default to 10 mL).\\\"\\n
        \           #Chelsea - I want the volume of final enzyme solotuion used in
        the previous protocol (Treat with cellulase) be displayed here if possible\\n
        \           note \\\"Document the time that cell wall digestion ended.\\\"\\n
        \           #collect time\\n            #is it possible for the collected
        start time and end time to be used to calculate, display, and store the total
        incubation time?\\n            note \\\"4. Document volume of W5 solution
        used.\\\"\\n            get \\\"number\\\", default: \\\"10\\\"\\n        end
        \\n    end\\n    \\n    def filter_solution\\n        show do\\n            title
        \\\"Filter solution containing protoplasts\\\"\\n            note \\\"1. Wash
        100-um nylon mesh with 1 mL of water.\\\"\\n            note \\\"2. Dry nylon
        mesh with kimwipe to remove excess water.\\\"\\n            note \\\"3. Wet
        nylon mesh with 1 mL of W5 solution.\\\"\\n            note \\\"4. Filter
        protoplast and enzyme solution through nylon mesh into a 50 mL Falcon tube.\\\"\\n
        \           note \\\"Label the top and sides of the Falcon tube (date, intials,
        experimental conditions).\\\"\\n        end \\n    end\\n    \\n    def resuspend_in_W5_solution\\n
        \       show do\\n            title \\\"First resuspension (in W5 solution)\\\"\\n
        \           note \\\"1. Centrifuge the Falcon tube containing the flow through
        at 100g for 2 minutes.  A small pellet should form at the bottom of the test
        tube.\\\"\\n            note \\\"2. Use vacuum and red and blue pipette tips
        to remove as much supernatant as possible without disturbing the pellet.\\\"\\n
        \           note \\\"3. Gently resuspend the pellet in 4 mL of W5 solution
        by gentle swirling (later, at 2x10^5 ml^\u20131 in W5 solution)\\\"\\n            #note
        \\\"4. Rest test tube in the styrofoam rack in the refridgerator for at least
        15 min.  Protoplasts will begin to settle and forma  pellet.  Do not disturb
        the test tube.\\\"\\n        end \\n    end\\n    \\n    def sucrose_separation\\n
        \       show do\\n            title \\\"Separate healthy protoplasts using
        sucrose grandient.\\\"\\n            note \\\"Pipette 8 mL of sucrose solution
        into a 15 mL Falcon tube (default to 50% surose).\\\"\\n            note \\\"Slowly
        pipette all 4 mL of W5/protoplast suspension on top of the sucrose solution.
        \ Make sure to pipette up and down each time you pippette to resuspend the
        protoplasts.  Also, make sure to keep a sterile environment and ethanol your
        pipettes.\\\"\\n            note \\\"Centrifuge the 15 mL Flacon tubes at
        720xg for 13 min.\\\"\\n        end\\n    end\\n    \\n    def resuspend_in_MMG_solution\\n
        \       show do\\n            title \\\"Second resuspension (in MMG solution)
        and store\\\"\\n            #note \\\"Use vacuum and red and blue pipette
        tips to remove as much supernatant as possible without disturbing the settled
        protoplasts.\\\"\\n            note \\\"Harvest isolated protoplasts (in layer)
        from the falcon tube into a 2 mL ependorf tube.\\\"\\n            note \\\"Resuspend
        the protoplasts with 500 um of MMG solution.  Gently tap the side of the ependorf
        tune to resuspend.\\\"\\n            #note \\\"Resuspend the pellet at 2x10^5
        ml\u20131 in MMG solution by gentle swirling.\\\"\\n            note \\\"Store
        the tube containing isolated protoplasts in DAWGMA's styrofoam box in the
        freezer.\\\"\\n        end \\n    end\\n    \\n\\nend\\n\",\"parent_id\":1505,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:01:51.000-08:00\",\"updated_at\":\"2018-11-07T18:01:51.000-08:00\",\"user_id\":219},{\"id\":90759,\"name\":\"precondition\",\"content\":\"def
        precondition(_op)\\n  true\\nend\",\"parent_id\":1505,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:01:51.000-08:00\",\"updated_at\":\"2018-11-07T18:01:51.000-08:00\",\"user_id\":219},{\"id\":90757,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight.to_sentence}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab #{op_count}
        1.5mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Transfer 1mL of cell culture to the corresponding 1.5mL
        tube.\\\"\\r\\n        check \\\"Return the cell culture to 37\xB0C shaker.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def measure_od_value(meas_sample)\\r\\n
        \   od_value = []\\r\\n    show do\\r\\n      title \\\"Measure OD600 value
        of cell culture\\\"\\r\\n      check \\\"Grab a box of 1000 \xB5l tip, a P1000
        pipettor, a tip waste container, #{meas_sample.size+1} plastic cuvettes and
        1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring the samples (ID
        #{meas_sample.to_sentence}) to Prof. James Carother\u2019s lab.\\\"\\r\\n
        \     check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record the OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:01:15.000-08:00\",\"updated_at\":\"2018-11-07T18:01:15.000-08:00\",\"user_id\":200},{\"id\":90756,\"name\":\"protocol\",\"content\":\"#Chelsea
        Wan\\n\\nclass Protocol\\n    \\n    INPUT = \u201CDigesting cells\u201D\\n
        \   OUTPUT = \u201CProtoplasts\u201D\\n\\n  def main\\n\\n    sterile_technique_reminder\\n
        \   \\n    operations.retrieve\\n    \\n    #prepare_W5_solution\\n    \\n
        \   #prepare_MMG_solution\\n    \\n    retrive_and_dilute_dish_contents\\n
        \   \\n    filter_solution\\n    \\n    resuspend_in_W5_solution\\n    \\n
        \   sucrose_separation\\n    \\n    resuspend_in_MMG_solution\\n    \\n  end\\n\\n
        \   def sterile_technique_reminder\\n        show do\\n            title \\\"General
        sterile technique reminders\\\"\\n            note \\\"Always wear the appropriate
        PPEs.\\\"\\n            note \\\"Clean gloves with ethanol often.\\\"\\n            note
        \\\"Clean the following with 80% ethanol:\\\"\\n            check \\\"Lab
        bench\\\"\\n            check \\\"Pipettes\\\"\\n            check \\\"Forceps,
        tube racks, etc\\\"\\n            check \\\"Phones, computers, etc.\\\"\\n
        \       end \\n    end\\n    \\n    #def prepare_W5_solution\\n        #show
        do\\n            #title \\\"Prepare W5 solution\\\"\\n            #note \\\"Add
        the following materials to a clean and labelled test tube:\\\"\\n            #check
        \\\"2 mM MES (pH 5.7)\\\"\\n            #check \\\"154 mM NaCl\\\"\\n            #check
        \\\"125 mM CaCl2\\\"\\n            #check \\\"5 mM KCl\\\"\\n            #note
        \\\"Store W5 solution at room temperature.\\\"\\n        #end \\n    #end\\n
        \   \\n    #def prepare_MMG_solution\\n        #show do\\n            #title
        \\\"Prepare MMG solution\\\"\\n            #note \\\"Add the following materials
        to another clean and labelled test tube:\\\"\\n            #check \\\"4 mM
        MES (pH 5.7)\\\"\\n            #check \\\"0.4 M mannitol\\\"\\n            #check
        \\\"15 mM MgCl2\\\"\\n            #note \\\"Store MMG solution at room temperature.\\\"\\n
        \       #end \\n    #end\\n    \\n    def retrive_and_dilute_dish_contents\\n
        \       show do\\n            title \\\"Retrieve and dilute protoplasts\\\"\\n
        \           note \\\"1. Turn off the shaker. Move beaker from shaker to fume
        food.  The fluid contained in the dish should be a yellow/green color.  If
        using plant leaves (v.s. cell culture), give the solution a gentle swirl to
        release the protoplasts from the leaves.\\\"\\n            note \\\"2. Add
        W5 solution directly to the petri dish.  The volume of W5 solution added should
        be equal to the volume of enzyme solution in the dish (default to 10 mL).\\\"\\n
        \           #Chelsea - I want the volume of final enzyme solotuion used in
        the previous protocol (Treat with cellulase) be displayed here if possible\\n
        \           note \\\"Document the time that cell wall digestion ended.\\\"\\n
        \           #collect time\\n            #is it possible for the collected
        start time and end time to be used to calculate, display, and store the total
        incubation time?\\n            note \\\"4. Document volume of W5 solution
        used.\\\"\\n            get \\\"number\\\", default: \\\"10\\\"\\n        end
        \\n    end\\n    \\n    def filter_solution\\n        show do\\n            title
        \\\"Filter solution containing protoplasts\\\"\\n            note \\\"1. Wash
        100-um nylon mesh with 1 mL of water.\\\"\\n            note \\\"2. Dry nylon
        mesh with kimwipe to remove excess water.\\\"\\n            note \\\"3. Wet
        nylon mesh with 1 mL of W5 solution.\\\"\\n            note \\\"4. Filter
        protoplast and enzyme solution through nylon mesh into a 50 mL Falcon tube.\\\"\\n
        \           note \\\"Label the top and sides of the Falcon tube (date, intials,
        experimental conditions).\\\"\\n        end \\n    end\\n    \\n    def resuspend_in_W5_solution\\n
        \       show do\\n            title \\\"First resuspension (in W5 solution)\\\"\\n
        \           note \\\"1. Centrifuge the Falcon tube containing the flow through
        at 100g for 2 minutes.  A small pellet should form at the bottom of the test
        tube.\\\"\\n            note \\\"2. Use vacuum and red and blue pipette tips
        to remove as much supernatant as possible without disturbing the pellet.\\\"\\n
        \           note \\\"3. Gently resuspend the pellet in 4 mL of W5 solution
        by gentle swirling (later, at 2x10^5 ml^\u20131 in W5 solution)\\\"\\n            #note
        \\\"4. Rest test tube in the styrofoam rack in the refridgerator for at least
        15 min.  Protoplasts will begin to settle and forma  pellet.  Do not disturb
        the test tube.\\\"\\n        end \\n    end\\n    \\n    def sucrose_separation\\n
        \       show do\\n            title \\\"Separate healthy protoplasts using
        sucrose grandient.\\\"\\n            note \\\"Pipette 8 mL of sucrose solution
        into a 15 mL Falcon tube (default to 50% surose).\\\"\\n            note \\\"Slowly
        pipette all 4 mL of W5/protoplast suspension on top of the sucrose solution.
        \ Make sure to pipette up and down each time you pippette to resuspend the
        protoplasts.  Also, make sure to keep a sterile environment and ethanol your
        pipettes.\\\"\\n            note \\\"Centrifuge the 15 mL Flacon tubes at
        720xg for 13 min.\\\"\\n        end\\n    end\\n    \\n    def resuspend_in_MMG_solution\\n
        \       show do\\n            title \\\"Second resuspension (in MMG solution)
        and store\\\"\\n            #note \\\"Use vacuum and red and blue pipette
        tips to remove as much supernatant as possible without disturbing the settled
        protoplasts.\\\"\\n            note \\\"Harvest isolated protoplasts (in layer)
        from the falcon tube into a 2 mL ependorf tube.\\\"\\n            note \\\"Resuspend
        the protoplasts with 500 um of MMG solution.  Gently tap the side of the ependorf
        tune to resuspend.\\\"\\n            #note \\\"Resuspend the pellet at 2x10^5
        ml\u20131 in MMG solution by gentle swirling.\\\"\\n            note \\\"Store
        the tube containing isolated protoplasts in DAWGMA's styrofoam box in the
        freezer.\\\"\\n        end \\n    end\\n    \\n\\nend\\n\",\"parent_id\":1505,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:00:36.000-08:00\",\"updated_at\":\"2018-11-07T18:00:36.000-08:00\",\"user_id\":219},{\"id\":90755,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        check \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        check \\\"Write the ID: #{op_in_overnight}
        on the tube(s).\\\"\\r\\n        check \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab #{op_count}
        1.5mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Transfer 1mL of cell culture to the corresponding 1.5mL
        tube.\\\"\\r\\n        check \\\"Return the cell culture to 37\xB0C shaker.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def measure_od_value(meas_sample)\\r\\n
        \   od_value = []\\r\\n    show do\\r\\n      title \\\"Measure OD600 value
        of cell culture\\\"\\r\\n      check \\\"Grab a box of 1000 \xB5l tip, a P1000
        pipettor, a tip waste container, #{meas_sample.size+1} plastic cuvettes and
        1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring the samples (ID
        #{meas_sample.to_sentence}) to Prof. James Carother\u2019s lab.\\\"\\r\\n
        \     check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record the OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T18:00:14.000-08:00\",\"updated_at\":\"2018-11-07T18:00:14.000-08:00\",\"user_id\":200},{\"id\":90754,\"name\":\"protocol\",\"content\":\"#
        \\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n  include Feedback\\n\\n
        \ def main\\n    \\n    operations.retrieve(only: \\\"Plasmid\\\")\\n    operations.retrieve(only:
        \\\"Comp Cells (BL21DE3)\\\", interactive: false)\\n\\n    #operations.each
        do |op|\\n    #    comp_cell = op.input(\\\"Comp Cells (BL21DE3)\\\").item\\n
        \   #    comp_cell.location = \\\"-20C freezer\\\"\\n    #end\\n\\n    #show
        do\\n    #    title \\\"location\\\"\\n    #    operations.each do |op|\\n
        \   #        note \\\"location is at #{op.input(\\\"Comp Cells (BL21DE3)\\\").item.location}\\\"\\n
        \   #    end\\n    #end\\n\\n    operations.make\\n\\n    op_in_plasmid =
        []\\n    op_in_comp_cells = []\\n    op_out_transformed_ecoli = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_plasmid \\u003c\\u003c op.input(\\\"Plasmid\\\").item.id\\n
        \       op_in_comp_cells \\u003c\\u003c op.input(\\\"Comp Cells (BL21DE3)\\\").item.id\\n
        \       op_out_transformed_ecoli \\u003c\\u003c op.output(\\\"Transformed
        E.Coli\\\").item.id\\n    end\\n    \\n    # Take competent cells from -80\xB0C
        freezer, label the design ID on tubes (input).\\n    # Thaw Competent E. coli
        cells on ice for 10 minutes.\\n    label_comp_cell_tubes(op_count, op_out_transformed_ecoli)\\n
        \   \\n    # Add 1 uL plasmid DNA to the competent cell aliquot. Carefully
        flick the tube 4\u20135 times to mix cells and DNA. [Note] Do not vortex!\\n
        \   add_dna_to_competent_cell(op_count, op_out_transformed_ecoli,op_in_plasmid)\\n
        \   \\n    # Place the mixture on ice for 30 minutes. [Note] Do not mix. Set
        a 30 minutes timer.\\n    # Prepare a heat plate and Set the temperature to
        42\xB0C. Add water into the wells of heat blocks.\\n    place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    \\n    # When time is up, Heat the shock mixture
        at 42\xB0C for exactly 10 seconds. [Note] Do not mix!\\n    # Place on ice
        for 5 minutes. [Note] Do not mix!\\n    heat_stock_10sec_5min( op_out_transformed_ecoli)\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n    pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    \\n    # Incubate transformants\\n    incubate_transformants(op_count,
        op_out_transformed_ecoli)\\n\\n    # Clean up\\n    clean_up\\n      \\n    #
        Move items\\n      operations.running.each do |op|\\n        op.output(\\\"Transformed
        E.Coli\\\").item.move \\\"37\xB0C shaker\\\"\\n      end\\n\\n    # Store
        dna stocks\\n      all_stocks = operations.running.map { |op| [op.input(\\\"Plasmid\\\").item,
        op.temporary[:old_stock]] }.flatten.uniq\\n      all_stocks.compact!\\n      release
        all_stocks, interactive: true, method: \\\"boxes\\\"\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n    \\n    return {}\\n  end\\n\\n  #
        Take competent cells from -80\xB0C freezer, label the design ID on tubes (input).\\n
        \ # Thaw Competent E. coli cells on ice for 10 minutes.\\n  def label_comp_cell_tubes(op_count,
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Grab and label
        tubes\\\"\\n        check \\\"Grab a ice bucket and fill it with ice.\\\"\\n
        \       check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e BL21DE3
        competent cells from -80\xB0C freezer.\\\"\\n        check \\\"Label competent
        cell tubes with ID: #{ op_out_transformed_ecoli.to_sentence}\\\"\\n        check
        \\\"Thaw competent cell on ice for 10 minutes.\\\"\\n        timer initial:
        { hours: 0, minutes: 10, seconds: 0}\\n    end\\n  end\\n\\n  # Add 1 uL plasmid
        DNA to the competent cell aliquot. Carefully flick the tube 4\u20135 times
        to mix cells and DNA. [Note] Do not vortex!\\n  def add_dna_to_competent_cell(op_count,
        op_out_transformed_ecoli,op_in_plasmid)\\n    op_table = [[\\\"Plasmid DNA
        ID\\\",\\\"Volume\\\",\\\"Competent cell ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c op_in_plasmid[i]\\n        row
        \\u003c\\u003c \\\"1 \xB5l\\\"\\n        row \\u003c\\u003c {content: op_out_transformed_ecoli[i],
        check: true}\\n        op_table \\u003c\\u003c row\\n    end\\n    show do\\n
        \       title \\\"Mix DNA with competent cell\\\"\\n        check \\\"Add
        1 \xB5l of plasmid DNA to the corresponding competent cell tube.\\\"\\n        table
        op_table\\n        check \\\"Carefully flick the tube 5 times to mix the competent
        cell and plasmid DNA.\\\"\\n        warning \\\"Do not vortex.\\\"\\n        \\n
        \   end\\n  end\\n\\n  # Place the mixture on ice for 30 minutes. [Note] Do
        not mix. Set a 30-minute timer.\\n  # Prepare a heat plate and Set the temperature
        to 42\xB0C. Add water into the wells of heat blocks.\\n  def place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Incubate on ice\\\"\\n
        \       check \\\"Incubate #{ op_out_transformed_ecoli.to_sentence} on ice
        for 30 minutes.\\\"\\n        warning \\\"Do not disturb tubes at this step.\\\"\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\n        check
        \\\"Preheat a heat plate to 42\xB0C.\\\"\\n    end\\n  end\\n\\n    # When
        time is up, Heat the shock mixture at 42\xB0C for exactly 10 seconds. [Note]
        Do not mix!\\n    # Place on ice for 5 minutes. [Note] Do not mix!\\n  def
        heat_stock_10sec_5min( op_out_transformed_ecoli)\\n    show do\\n        title
        \\\"Heat Shock cells\\\"\\n        check \\\"Place #{ op_out_transformed_ecoli.to_sentence}
        on the 42\xB0C heat block for exactly 40 seconds.\\\"\\n        timer initial:
        { hours: 0, minutes: 0, seconds: 40}\\n        warning \\\"Don't mix or disturb
        tubes at this step. Don't heat cells over 40 seconds.\\\"\\n    end\\n  end\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n  def pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Cell Recovery\\\"\\n
        \       check \\\"Place #{ op_out_transformed_ecoli.to_sentence} on ice for
        5 minutes.\\\"\\n        timer initial: { hours: 0, minutes: 5, seconds: 0}\\n
        \       check \\\"Add 950 \xB5l of LB into each tube.\\\"  \\n    end\\n  end\\n\\n
        \   # This method tells the technician to incubate the E. coli transformants.\\n
        \ def incubate_transformants(op_count, op_out_transformed_ecoli)\\n    show
        do \\n        title \\\"Incubate in 37\xB0C shaker\\\"\\n        check \\\"Place
        #{ op_out_transformed_ecoli.to_sentence} inside the glass flask in 37\xB0C
        shaker.\\\"\\n        check \\\"Incubate for 1 hour.\\\"\\n        bullet
        \\\"\\u003ca href=\\\\'https://www.google.com/search?q=1%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 1 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Plate
        Transformed Cells (BL21DE3)\\\\'\\u003c/b\\u003e protocol.\\\"\\n        check
        \\\"While the cell cultures incubate, finish this protocol by completing the
        remaining tasks.\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        of LB + AMP plates and place them into the still 37\xB0C incubator.\\\"\\n
        \   end\\n  end\\n  \\n    # This method tells the technician to clean up
        items used in this protocol.\\n  def clean_up\\n    show do\\n      title
        \\\"Clean up\\\"\\n      check \\\"Return the ice bucket.\\\"\\n    end\\n
        \ end\\n\\nend\\n\",\"parent_id\":1547,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:44:49.000-08:00\",\"updated_at\":\"2018-11-07T17:44:49.000-08:00\",\"user_id\":200},{\"id\":90753,\"name\":\"protocol\",\"content\":\"#
        \\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n  include Feedback\\n\\n
        \ def main\\n    \\n    operations.retrieve(only: \\\"Plasmid\\\")\\n    operations.retrieve(only:
        \\\"Comp Cells (BL21DE3)\\\", interactive: false)\\n\\n    #operations.each
        do |op|\\n    #    comp_cell = op.input(\\\"Comp Cells (BL21DE3)\\\").item\\n
        \   #    comp_cell.location = \\\"-20C freezer\\\"\\n    #end\\n\\n    #show
        do\\n    #    title \\\"location\\\"\\n    #    operations.each do |op|\\n
        \   #        note \\\"location is at #{op.input(\\\"Comp Cells (BL21DE3)\\\").item.location}\\\"\\n
        \   #    end\\n    #end\\n\\n    operations.make\\n\\n    op_in_plasmid =
        []\\n    op_in_comp_cells = []\\n    op_out_transformed_ecoli = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_plasmid \\u003c\\u003c op.input(\\\"Plasmid\\\").item.id\\n
        \       op_in_comp_cells \\u003c\\u003c op.input(\\\"Comp Cells (BL21DE3)\\\").item.id\\n
        \       op_out_transformed_ecoli \\u003c\\u003c op.output(\\\"Transformed
        E.Coli\\\").item.id\\n    end\\n    \\n    # Take competent cells from -80\xB0C
        freezer, label the design ID on tubes (input).\\n    # Thaw Competent E. coli
        cells on ice for 10 minutes.\\n    label_comp_cell_tubes(op_count, op_out_transformed_ecoli)\\n
        \   \\n    # Add 1 uL plasmid DNA to the competent cell aliquot. Carefully
        flick the tube 4\u20135 times to mix cells and DNA. [Note] Do not vortex!\\n
        \   add_dna_to_competent_cell(op_count, op_out_transformed_ecoli,op_in_plasmid)\\n
        \   \\n    # Place the mixture on ice for 30 minutes. [Note] Do not mix. Set
        a 30 minutes timer.\\n    # Prepare a heat plate and Set the temperature to
        42\xB0C. Add water into the wells of heat blocks.\\n    place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    \\n    # When time is up, Heat the shock mixture
        at 42\xB0C for exactly 10 seconds. [Note] Do not mix!\\n    # Place on ice
        for 5 minutes. [Note] Do not mix!\\n    heat_stock_10sec_5min( op_out_transformed_ecoli)\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n    pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    \\n    # Incubate transformants\\n    incubate_transformants(op_count,
        op_out_transformed_ecoli)\\n\\n    # Clean up\\n    clean_up\\n      \\n    #
        Move items\\n      operations.running.each do |op|\\n        op.output(\\\"Transformed
        E.Coli\\\").item.move \\\"37\xB0C shaker\\\"\\n      end\\n\\n    # Store
        dna stocks\\n      all_stocks = operations.running.map { |op| [op.input(\\\"Plasmid\\\").item,
        op.temporary[:old_stock]] }.flatten.uniq\\n      all_stocks.compact!\\n      release
        all_stocks, interactive: true, method: \\\"boxes\\\"\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n    \\n    return {}\\n  end\\n\\n  #
        Take competent cells from -80\xB0C freezer, label the design ID on tubes (input).\\n
        \ # Thaw Competent E. coli cells on ice for 10 minutes.\\n  def label_comp_cell_tubes(op_count,
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Grab and label
        tubes\\\"\\n        check \\\"Grab a ice bucket and fill it with ice.\\\"\\n
        \       check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e BL21DE3
        competent cells from -80\xB0C freezer.\\\"\\n        check \\\"Label competent
        cell tubes with ID: #{ op_out_transformed_ecoli.to_sentence}\\\"\\n        check
        \\\"Thaw competent cell on ice for 10 minutes.\\\"\\n        timer initial:
        { hours: 0, minutes: 10, seconds: 0}\\n    end\\n  end\\n\\n  # Add 1 uL plasmid
        DNA to the competent cell aliquot. Carefully flick the tube 4\u20135 times
        to mix cells and DNA. [Note] Do not vortex!\\n  def add_dna_to_competent_cell(op_count,
        op_out_transformed_ecoli,op_in_plasmid)\\n    op_table = [[\\\"Plasmid DNA
        ID\\\",\\\"Volume\\\",\\\"Competent cell ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c op_in_plasmid[i]\\n        row
        \\u003c\\u003c \\\"1 \xB5l\\\"\\n        row \\u003c\\u003c {content: op_out_transformed_ecoli[i],
        check: true}\\n        op_table \\u003c\\u003c row\\n    end\\n    show do\\n
        \       title \\\"Mix DNA with competent cell\\\"\\n        check \\\"Add
        1 \xB5l of plasmid DNA to the corresponding competent cell tube.\\\"\\n        table
        op_table\\n        check \\\"Carefully flick the tube 5 times to mix the competent
        cell and plasmid DNA.\\\"\\n        warning \\\"Do not vortex.\\\"\\n        \\n
        \   end\\n  end\\n\\n  # Place the mixture on ice for 30 minutes. [Note] Do
        not mix. Set a 30-minute timer.\\n  # Prepare a heat plate and Set the temperature
        to 42\xB0C. Add water into the wells of heat blocks.\\n  def place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Incubate on ice\\\"\\n
        \       check \\\"Incubate #{ op_out_transformed_ecoli.to_sentence} on ice
        for 30 minutes.\\\"\\n        warning \\\"Do not disturb tubes at this step.\\\"\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\n        check
        \\\"Preheat a heat plate to 42\xB0C.\\\"\\n    end\\n  end\\n\\n    # When
        time is up, Heat the shock mixture at 42\xB0C for exactly 10 seconds. [Note]
        Do not mix!\\n    # Place on ice for 5 minutes. [Note] Do not mix!\\n  def
        heat_stock_10sec_5min( op_out_transformed_ecoli)\\n    show do\\n        title
        \\\"Heat Shock cells\\\"\\n        check \\\"Place #{ op_out_transformed_ecoli.to_sentence}
        on the 42\xB0C heat block for exactly 40 seconds.\\\"\\n        timer initial:
        { hours: 0, minutes: 0, seconds: 40}\\n        warning \\\"Don't mix or disturb
        tubes at this step. Don't heat cells over 40 seconds.\\\"\\n    end\\n  end\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n  def pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Cell Recovery\\\"\\n
        \       check \\\"Place #{ op_out_transformed_ecoli.to_sentence} on ice for
        5 minutes.\\\"\\n        timer initial: { hours: 0, minutes: 5, seconds: 0}\\n
        \       check \\\"Add 950 \xB5l of LB into each tube.\\\"  \\n    end\\n  end\\n\\n
        \   # This method tells the technician to incubate the E. coli transformants.\\n
        \ def incubate_transformants(op_count, op_out_transformed_ecoli)\\n    show
        do \\n        title \\\"Incubate in 37\xB0C shaker\\\"\\n        check \\\"Place
        tubes #{ op_out_transformed_ecoli.to_sentence} inside the glass flask in 37\xB0C
        shaker.\\\"\\n        check \\\"Incubate for 1 hour.\\\"\\n        bullet
        \\\"\\u003ca href=\\\\'https://www.google.com/search?q=1%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 1 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Plate
        Transformed Cells (BL21DE3)\\\\'\\u003c/b\\u003e protocol.\\\"\\n        check
        \\\"While the cell cultures incubate, finish this protocol by completing the
        remaining tasks.\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        of LB + AMP plates and place them into the still 37\xB0C incubator.\\\"\\n
        \   end\\n  end\\n  \\n    # This method tells the technician to clean up
        items used in this protocol.\\n  def clean_up\\n    show do\\n      title
        \\\"Clean up\\\"\\n      check \\\"Return the ice bucket.\\\"\\n    end\\n
        \ end\\n\\nend\\n\",\"parent_id\":1547,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:44:26.000-08:00\",\"updated_at\":\"2018-11-07T17:44:26.000-08:00\",\"user_id\":200},{\"id\":90752,\"name\":\"protocol\",\"content\":\"#
        \\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n  include Feedback\\n\\n
        \ def main\\n    \\n    operations.retrieve(only: \\\"Plasmid\\\")\\n    operations.retrieve(only:
        \\\"Comp Cells (BL21DE3)\\\", interactive: false)\\n\\n    #operations.each
        do |op|\\n    #    comp_cell = op.input(\\\"Comp Cells (BL21DE3)\\\").item\\n
        \   #    comp_cell.location = \\\"-20C freezer\\\"\\n    #end\\n\\n    #show
        do\\n    #    title \\\"location\\\"\\n    #    operations.each do |op|\\n
        \   #        note \\\"location is at #{op.input(\\\"Comp Cells (BL21DE3)\\\").item.location}\\\"\\n
        \   #    end\\n    #end\\n\\n    operations.make\\n\\n    op_in_plasmid =
        []\\n    op_in_comp_cells = []\\n    op_out_transformed_ecoli = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_plasmid \\u003c\\u003c op.input(\\\"Plasmid\\\").item.id\\n
        \       op_in_comp_cells \\u003c\\u003c op.input(\\\"Comp Cells (BL21DE3)\\\").item.id\\n
        \       op_out_transformed_ecoli \\u003c\\u003c op.output(\\\"Transformed
        E.Coli\\\").item.id\\n    end\\n    \\n    # Take competent cells from -80\xB0C
        freezer, label the design ID on tubes (input).\\n    # Thaw Competent E. coli
        cells on ice for 10 minutes.\\n    label_comp_cell_tubes(op_count, op_out_transformed_ecoli)\\n
        \   \\n    # Add 1 uL plasmid DNA to the competent cell aliquot. Carefully
        flick the tube 4\u20135 times to mix cells and DNA. [Note] Do not vortex!\\n
        \   add_dna_to_competent_cell(op_count, op_out_transformed_ecoli,op_in_plasmid)\\n
        \   \\n    # Place the mixture on ice for 30 minutes. [Note] Do not mix. Set
        a 30 minutes timer.\\n    # Prepare a heat plate and Set the temperature to
        42\xB0C. Add water into the wells of heat blocks.\\n    place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    \\n    # When time is up, Heat the shock mixture
        at 42\xB0C for exactly 10 seconds. [Note] Do not mix!\\n    # Place on ice
        for 5 minutes. [Note] Do not mix!\\n    heat_stock_10sec_5min( op_out_transformed_ecoli)\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n    pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    \\n    # Incubate transformants\\n    incubate_transformants(op_count,
        op_out_transformed_ecoli)\\n\\n    # Clean up\\n    clean_up\\n      \\n    #
        Move items\\n      operations.running.each do |op|\\n        op.output(\\\"Transformed
        E.Coli\\\").item.move \\\"37\xB0C shaker\\\"\\n      end\\n\\n    # Store
        dna stocks\\n      all_stocks = operations.running.map { |op| [op.input(\\\"Plasmid\\\").item,
        op.temporary[:old_stock]] }.flatten.uniq\\n      all_stocks.compact!\\n      release
        all_stocks, interactive: true, method: \\\"boxes\\\"\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n    \\n    return {}\\n  end\\n\\n  #
        Take competent cells from -80\xB0C freezer, label the design ID on tubes (input).\\n
        \ # Thaw Competent E. coli cells on ice for 10 minutes.\\n  def label_comp_cell_tubes(op_count,
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Grab and label
        tubes\\\"\\n        check \\\"Grab a ice bucket and fill it with ice.\\\"\\n
        \       check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e BL21DE3
        competent cells from -80\xB0C freezer.\\\"\\n        check \\\"Label competent
        cell tubes with ID: #{ op_out_transformed_ecoli.to_sentence}\\\"\\n        check
        \\\"Thaw competent cell on ice for 10 minutes.\\\"\\n        timer initial:
        { hours: 0, minutes: 10, seconds: 0}\\n    end\\n  end\\n\\n  # Add 1 uL plasmid
        DNA to the competent cell aliquot. Carefully flick the tube 4\u20135 times
        to mix cells and DNA. [Note] Do not vortex!\\n  def add_dna_to_competent_cell(op_count,
        op_out_transformed_ecoli,op_in_plasmid)\\n    op_table = [[\\\"Plasmid DNA
        ID\\\",\\\"Volume\\\",\\\"Competent cell ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c op_in_plasmid[i]\\n        row
        \\u003c\\u003c \\\"1 \xB5l\\\"\\n        row \\u003c\\u003c {content: op_out_transformed_ecoli[i],
        check: true}\\n        op_table \\u003c\\u003c row\\n    end\\n    show do\\n
        \       title \\\"Mix DNA with competent cell\\\"\\n        check \\\"Add
        1 \xB5l of plasmid DNA to the corresponding competent cell tube.\\\"\\n        table
        op_table\\n        check \\\"Carefully flick the tube 5 times to mix the competent
        cell and plasmid DNA.\\\"\\n        warning \\\"Do not vortex.\\\"\\n        \\n
        \   end\\n  end\\n\\n  # Place the mixture on ice for 30 minutes. [Note] Do
        not mix. Set a 30-minute timer.\\n  # Prepare a heat plate and Set the temperature
        to 42\xB0C. Add water into the wells of heat blocks.\\n  def place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Incubate on ice\\\"\\n
        \       check \\\"Incubate #{ op_out_transformed_ecoli.to_sentence} on ice
        for 30 minutes.\\\"\\n        warning \\\"Do not disturb tubes at this step.\\\"\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\n        check
        \\\"Preheat a heat plate to 42\xB0C.\\\"\\n    end\\n  end\\n\\n    # When
        time is up, Heat the shock mixture at 42\xB0C for exactly 10 seconds. [Note]
        Do not mix!\\n    # Place on ice for 5 minutes. [Note] Do not mix!\\n  def
        heat_stock_10sec_5min( op_out_transformed_ecoli)\\n    show do\\n        title
        \\\"Heat Shock cells\\\"\\n        check \\\"Place #{ op_out_transformed_ecoli.to_sentence}
        on the 42\xB0C heat block for exactly 40 seconds.\\\"\\n        timer initial:
        { hours: 0, minutes: 0, seconds: 40}\\n        warning \\\"Don't mix or disturb
        tubes at this step. Don't heat cells over 40 seconds.\\\"\\n    end\\n  end\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n  def pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Cell Recovery\\\"\\n
        \       check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} on
        ice for 5 minutes.\\\"\\n        timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n        check \\\"Add 950 \xB5l of LB into each tube.\\\"  \\n    end\\n
        \ end\\n\\n    # This method tells the technician to incubate the E. coli
        transformants.\\n  def incubate_transformants(op_count, op_out_transformed_ecoli)\\n
        \   show do \\n        title \\\"Incubate in 37\xB0C shaker\\\"\\n        check
        \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} inside the glass
        flask in 37\xB0C shaker.\\\"\\n        check \\\"Incubate for 1 hour.\\\"\\n
        \       bullet \\\"\\u003ca href=\\\\'https://www.google.com/search?q=1%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 1 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Plate
        Transformed Cells (BL21DE3)\\\\'\\u003c/b\\u003e protocol.\\\"\\n        check
        \\\"While the cell cultures incubate, finish this protocol by completing the
        remaining tasks.\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        of LB + AMP plates and place them into the still 37\xB0C incubator.\\\"\\n
        \   end\\n  end\\n  \\n    # This method tells the technician to clean up
        items used in this protocol.\\n  def clean_up\\n    show do\\n      title
        \\\"Clean up\\\"\\n      check \\\"Return the ice bucket.\\\"\\n    end\\n
        \ end\\n\\nend\\n\",\"parent_id\":1547,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:43:53.000-08:00\",\"updated_at\":\"2018-11-07T17:43:53.000-08:00\",\"user_id\":200},{\"id\":90751,\"name\":\"protocol\",\"content\":\"#
        \\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n  include Feedback\\n\\n
        \ def main\\n    \\n    operations.retrieve(only: \\\"Plasmid\\\")\\n    operations.retrieve(only:
        \\\"Comp Cells (BL21DE3)\\\", interactive: false)\\n\\n    #operations.each
        do |op|\\n    #    comp_cell = op.input(\\\"Comp Cells (BL21DE3)\\\").item\\n
        \   #    comp_cell.location = \\\"-20C freezer\\\"\\n    #end\\n\\n    #show
        do\\n    #    title \\\"location\\\"\\n    #    operations.each do |op|\\n
        \   #        note \\\"location is at #{op.input(\\\"Comp Cells (BL21DE3)\\\").item.location}\\\"\\n
        \   #    end\\n    #end\\n\\n    operations.make\\n\\n    op_in_plasmid =
        []\\n    op_in_comp_cells = []\\n    op_out_transformed_ecoli = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_plasmid \\u003c\\u003c op.input(\\\"Plasmid\\\").item.id\\n
        \       op_in_comp_cells \\u003c\\u003c op.input(\\\"Comp Cells (BL21DE3)\\\").item.id\\n
        \       op_out_transformed_ecoli \\u003c\\u003c op.output(\\\"Transformed
        E.Coli\\\").item.id\\n    end\\n    \\n    # Take competent cells from -80\xB0C
        freezer, label the design ID on tubes (input).\\n    # Thaw Competent E. coli
        cells on ice for 10 minutes.\\n    label_comp_cell_tubes(op_count, op_out_transformed_ecoli)\\n
        \   \\n    # Add 1 uL plasmid DNA to the competent cell aliquot. Carefully
        flick the tube 4\u20135 times to mix cells and DNA. [Note] Do not vortex!\\n
        \   add_dna_to_competent_cell(op_count, op_out_transformed_ecoli,op_in_plasmid)\\n
        \   \\n    # Place the mixture on ice for 30 minutes. [Note] Do not mix. Set
        a 30 minutes timer.\\n    # Prepare a heat plate and Set the temperature to
        42\xB0C. Add water into the wells of heat blocks.\\n    place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    \\n    # When time is up, Heat the shock mixture
        at 42\xB0C for exactly 10 seconds. [Note] Do not mix!\\n    # Place on ice
        for 5 minutes. [Note] Do not mix!\\n    heat_stock_10sec_5min( op_out_transformed_ecoli)\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n    pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    \\n    # Incubate transformants\\n    incubate_transformants(op_count,
        op_out_transformed_ecoli)\\n\\n    # Clean up\\n    clean_up\\n      \\n    #
        Move items\\n      operations.running.each do |op|\\n        op.output(\\\"Transformed
        E.Coli\\\").item.move \\\"37\xB0C shaker\\\"\\n      end\\n\\n    # Store
        dna stocks\\n      all_stocks = operations.running.map { |op| [op.input(\\\"Plasmid\\\").item,
        op.temporary[:old_stock]] }.flatten.uniq\\n      all_stocks.compact!\\n      release
        all_stocks, interactive: true, method: \\\"boxes\\\"\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n    \\n    return {}\\n  end\\n\\n  #
        Take competent cells from -80\xB0C freezer, label the design ID on tubes (input).\\n
        \ # Thaw Competent E. coli cells on ice for 10 minutes.\\n  def label_comp_cell_tubes(op_count,
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Grab and label
        tubes\\\"\\n        check \\\"Grab a ice bucket and fill it with ice.\\\"\\n
        \       check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e BL21DE3
        competent cells from -80\xB0C freezer.\\\"\\n        check \\\"Label competent
        cell tubes with ID: #{ op_out_transformed_ecoli.to_sentence}\\\"\\n        check
        \\\"Thaw competent cell on ice for 10 minutes.\\\"\\n        timer initial:
        { hours: 0, minutes: 10, seconds: 0}\\n    end\\n  end\\n\\n  # Add 1 uL plasmid
        DNA to the competent cell aliquot. Carefully flick the tube 4\u20135 times
        to mix cells and DNA. [Note] Do not vortex!\\n  def add_dna_to_competent_cell(op_count,
        op_out_transformed_ecoli,op_in_plasmid)\\n    op_table = [[\\\"Plasmid DNA
        ID\\\",\\\"Volume\\\",\\\"Competent cell ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c op_in_plasmid[i]\\n        row
        \\u003c\\u003c \\\"1 \xB5l\\\"\\n        row \\u003c\\u003c {content: op_out_transformed_ecoli[i],
        check: true}\\n        op_table \\u003c\\u003c row\\n    end\\n    show do\\n
        \       title \\\"Mix DNA with competent cell\\\"\\n        check \\\"Add
        1 \xB5l of plasmid DNA to the corresponding competent cell tube.\\\"\\n        table
        op_table\\n        check \\\"Carefully flick the tube 5 times to mix the competent
        cell and plasmid DNA.\\\"\\n        warning \\\"Do not vortex.\\\"\\n        \\n
        \   end\\n  end\\n\\n  # Place the mixture on ice for 30 minutes. [Note] Do
        not mix. Set a 30-minute timer.\\n  # Prepare a heat plate and Set the temperature
        to 42\xB0C. Add water into the wells of heat blocks.\\n  def place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Incubate on ice\\\"\\n
        \       check \\\"Incubate #{ op_out_transformed_ecoli.to_sentence} on ice
        for 30 minutes.\\\"\\n        warning \\\"Do not disturb tubes at this step.\\\"\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\n        check
        \\\"Preheat a heat plate to 42\xB0C.\\\"\\n    end\\n  end\\n\\n    # When
        time is up, Heat the shock mixture at 42\xB0C for exactly 10 seconds. [Note]
        Do not mix!\\n    # Place on ice for 5 minutes. [Note] Do not mix!\\n  def
        heat_stock_10sec_5min( op_out_transformed_ecoli)\\n    show do\\n        title
        \\\"Heat Shock cells\\\"\\n        check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence}
        on the 42\xB0C heat block for exactly 40 seconds.\\\"\\n        timer initial:
        { hours: 0, minutes: 0, seconds: 40}\\n        warning \\\"Don't mix or disturb
        tubes at this step. Don't heat cells over 40 seconds.\\\"\\n    end\\n  end\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n  def pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Cell Recovery\\\"\\n
        \       check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} on
        ice for 5 minutes.\\\"\\n        timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n        check \\\"Add 950 \xB5l of LB into each tube.\\\"  \\n    end\\n
        \ end\\n\\n    # This method tells the technician to incubate the E. coli
        transformants.\\n  def incubate_transformants(op_count, op_out_transformed_ecoli)\\n
        \   show do \\n        title \\\"Incubate in 37\xB0C shaker\\\"\\n        check
        \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} inside the glass
        flask in 37\xB0C shaker.\\\"\\n        check \\\"Incubate for 1 hour.\\\"\\n
        \       bullet \\\"\\u003ca href=\\\\'https://www.google.com/search?q=1%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 1 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Plate
        Transformed Cells (BL21DE3)\\\\'\\u003c/b\\u003e protocol.\\\"\\n        check
        \\\"While the cell cultures incubate, finish this protocol by completing the
        remaining tasks.\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        of LB + AMP plates and place them into the still 37\xB0C incubator.\\\"\\n
        \   end\\n  end\\n  \\n    # This method tells the technician to clean up
        items used in this protocol.\\n  def clean_up\\n    show do\\n      title
        \\\"Clean up\\\"\\n      check \\\"Return the ice bucket.\\\"\\n    end\\n
        \ end\\n\\nend\\n\",\"parent_id\":1547,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:43:08.000-08:00\",\"updated_at\":\"2018-11-07T17:43:08.000-08:00\",\"user_id\":200},{\"id\":90750,\"name\":\"protocol\",\"content\":\"#
        \\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n  include Feedback\\n\\n
        \ def main\\n    \\n    operations.retrieve(only: \\\"Plasmid\\\")\\n    operations.retrieve(only:
        \\\"Comp Cells (BL21DE3)\\\", interactive: false)\\n\\n    #operations.each
        do |op|\\n    #    comp_cell = op.input(\\\"Comp Cells (BL21DE3)\\\").item\\n
        \   #    comp_cell.location = \\\"-20C freezer\\\"\\n    #end\\n\\n    #show
        do\\n    #    title \\\"location\\\"\\n    #    operations.each do |op|\\n
        \   #        note \\\"location is at #{op.input(\\\"Comp Cells (BL21DE3)\\\").item.location}\\\"\\n
        \   #    end\\n    #end\\n\\n    operations.make\\n\\n    op_in_plasmid =
        []\\n    op_in_comp_cells = []\\n    op_out_transformed_ecoli = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_plasmid \\u003c\\u003c op.input(\\\"Plasmid\\\").item.id\\n
        \       op_in_comp_cells \\u003c\\u003c op.input(\\\"Comp Cells (BL21DE3)\\\").item.id\\n
        \       op_out_transformed_ecoli \\u003c\\u003c op.output(\\\"Transformed
        E.Coli\\\").item.id\\n    end\\n    \\n    # Take competent cells from -80\xB0C
        freezer, label the design ID on tubes (input).\\n    # Thaw Competent E. coli
        cells on ice for 10 minutes.\\n    label_comp_cell_tubes(op_count, op_out_transformed_ecoli)\\n
        \   \\n    # Add 1 uL plasmid DNA to the competent cell aliquot. Carefully
        flick the tube 4\u20135 times to mix cells and DNA. [Note] Do not vortex!\\n
        \   add_dna_to_competent_cell(op_count, op_out_transformed_ecoli,op_in_plasmid)\\n
        \   \\n    # Place the mixture on ice for 30 minutes. [Note] Do not mix. Set
        a 30 minutes timer.\\n    # Prepare a heat plate and Set the temperature to
        42\xB0C. Add water into the wells of heat blocks.\\n    place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    \\n    # When time is up, Heat the shock mixture
        at 42\xB0C for exactly 10 seconds. [Note] Do not mix!\\n    # Place on ice
        for 5 minutes. [Note] Do not mix!\\n    heat_stock_10sec_5min( op_out_transformed_ecoli)\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n    pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    \\n    # Incubate transformants\\n    incubate_transformants(op_count,
        op_out_transformed_ecoli)\\n\\n    # Clean up\\n    clean_up\\n      \\n    #
        Move items\\n      operations.running.each do |op|\\n        op.output(\\\"Transformed
        E.Coli\\\").item.move \\\"37\xB0C shaker\\\"\\n      end\\n\\n    # Store
        dna stocks\\n      all_stocks = operations.running.map { |op| [op.input(\\\"Plasmid\\\").item,
        op.temporary[:old_stock]] }.flatten.uniq\\n      all_stocks.compact!\\n      release
        all_stocks, interactive: true, method: \\\"boxes\\\"\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n    \\n    return {}\\n  end\\n\\n  #
        Take competent cells from -80\xB0C freezer, label the design ID on tubes (input).\\n
        \ # Thaw Competent E. coli cells on ice for 10 minutes.\\n  def label_comp_cell_tubes(op_count,
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Grab and label
        tubes\\\"\\n        check \\\"Grab a ice bucket and fill it with ice.\\\"\\n
        \       check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e BL21DE3
        competent cells from -80\xB0C freezer.\\\"\\n        check \\\"Label competent
        cell tubes with ID: #{ op_out_transformed_ecoli.to_sentence}\\\"\\n        check
        \\\"Thaw competent cell on ice for 10 minutes.\\\"\\n        timer initial:
        { hours: 0, minutes: 10, seconds: 0}\\n    end\\n  end\\n\\n  # Add 1 uL plasmid
        DNA to the competent cell aliquot. Carefully flick the tube 4\u20135 times
        to mix cells and DNA. [Note] Do not vortex!\\n  def add_dna_to_competent_cell(op_count,
        op_out_transformed_ecoli,op_in_plasmid)\\n    op_table = [[\\\"Plasmid DNA
        ID\\\",\\\"Volume\\\",\\\"Competent cell ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c op_in_plasmid[i]\\n        row
        \\u003c\\u003c \\\"1 \xB5l\\\"\\n        row \\u003c\\u003c {content: op_out_transformed_ecoli[i],
        check: true}\\n        op_table \\u003c\\u003c row\\n    end\\n    show do\\n
        \       title \\\"Mix DNA with competent cell\\\"\\n        check \\\"Add
        1 \xB5l of plasmid DNA to the corresponding competent cell tube.\\\"\\n        table
        op_table\\n        check \\\"Carefully flick the tube 5 times to mix the competent
        cell and plasmid DNA.\\\"\\n        warning \\\"Do not vortex.\\\"\\n        \\n
        \   end\\n  end\\n\\n  # Place the mixture on ice for 30 minutes. [Note] Do
        not mix. Set a 30-minute timer.\\n  # Prepare a heat plate and Set the temperature
        to 42\xB0C. Add water into the wells of heat blocks.\\n  def place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Incubate on ice\\\"\\n
        \       check \\\"Incubate tubes #{ op_out_transformed_ecoli.to_sentence}
        on ice for 30 minutes.\\\"\\n        warning \\\"Do not disturb tubes at this
        step.\\\"\\n        timer initial: { hours: 0, minutes: 30, seconds: 0}\\n
        \       check \\\"Preheat a heat plate to 42\xB0C.\\\"\\n    end\\n  end\\n\\n
        \   # When time is up, Heat the shock mixture at 42\xB0C for exactly 10 seconds.
        [Note] Do not mix!\\n    # Place on ice for 5 minutes. [Note] Do not mix!\\n
        \ def heat_stock_10sec_5min( op_out_transformed_ecoli)\\n    show do\\n        title
        \\\"Heat Shock cells\\\"\\n        check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence}
        on the 42\xB0C heat block for exactly 40 seconds.\\\"\\n        timer initial:
        { hours: 0, minutes: 0, seconds: 40}\\n        warning \\\"Don't mix or disturb
        tubes at this step. Don't heat cells over 40 seconds.\\\"\\n    end\\n  end\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n  def pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Cell Recovery\\\"\\n
        \       check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} on
        ice for 5 minutes.\\\"\\n        timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n        check \\\"Add 950 \xB5l of LB into each tube.\\\"  \\n    end\\n
        \ end\\n\\n    # This method tells the technician to incubate the E. coli
        transformants.\\n  def incubate_transformants(op_count, op_out_transformed_ecoli)\\n
        \   show do \\n        title \\\"Incubate in 37\xB0C shaker\\\"\\n        check
        \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} inside the glass
        flask in 37\xB0C shaker.\\\"\\n        check \\\"Incubate for 1 hour.\\\"\\n
        \       bullet \\\"\\u003ca href=\\\\'https://www.google.com/search?q=1%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 1 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Plate
        Transformed Cells (BL21DE3)\\\\'\\u003c/b\\u003e protocol.\\\"\\n        check
        \\\"While the cell cultures incubate, finish this protocol by completing the
        remaining tasks.\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        of LB + AMP plates and place them into the still 37\xB0C incubator.\\\"\\n
        \   end\\n  end\\n  \\n    # This method tells the technician to clean up
        items used in this protocol.\\n  def clean_up\\n    show do\\n      title
        \\\"Clean up\\\"\\n      check \\\"Return the ice bucket.\\\"\\n    end\\n
        \ end\\n\\nend\\n\",\"parent_id\":1547,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:42:45.000-08:00\",\"updated_at\":\"2018-11-07T17:42:45.000-08:00\",\"user_id\":200},{\"id\":90749,\"name\":\"protocol\",\"content\":\"#
        \\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n  include Feedback\\n\\n
        \ def main\\n    \\n    operations.retrieve(only: \\\"Plasmid\\\")\\n    operations.retrieve(only:
        \\\"Comp Cells (BL21DE3)\\\", interactive: false)\\n\\n    #operations.each
        do |op|\\n    #    comp_cell = op.input(\\\"Comp Cells (BL21DE3)\\\").item\\n
        \   #    comp_cell.location = \\\"-20C freezer\\\"\\n    #end\\n\\n    #show
        do\\n    #    title \\\"location\\\"\\n    #    operations.each do |op|\\n
        \   #        note \\\"location is at #{op.input(\\\"Comp Cells (BL21DE3)\\\").item.location}\\\"\\n
        \   #    end\\n    #end\\n\\n    operations.make\\n\\n    op_in_plasmid =
        []\\n    op_in_comp_cells = []\\n    op_out_transformed_ecoli = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_plasmid \\u003c\\u003c op.input(\\\"Plasmid\\\").item.id\\n
        \       op_in_comp_cells \\u003c\\u003c op.input(\\\"Comp Cells (BL21DE3)\\\").item.id\\n
        \       op_out_transformed_ecoli \\u003c\\u003c op.output(\\\"Transformed
        E.Coli\\\").item.id\\n    end\\n    \\n    # Take competent cells from -80\xB0C
        freezer, label the design ID on tubes (input).\\n    # Thaw Competent E. coli
        cells on ice for 10 minutes.\\n    label_comp_cell_tubes(op_count, op_out_transformed_ecoli)\\n
        \   \\n    # Add 1 uL plasmid DNA to the competent cell aliquot. Carefully
        flick the tube 4\u20135 times to mix cells and DNA. [Note] Do not vortex!\\n
        \   add_dna_to_competent_cell(op_count, op_out_transformed_ecoli,op_in_plasmid)\\n
        \   \\n    # Place the mixture on ice for 30 minutes. [Note] Do not mix. Set
        a 30 minutes timer.\\n    # Prepare a heat plate and Set the temperature to
        42\xB0C. Add water into the wells of heat blocks.\\n    place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    \\n    # When time is up, Heat the shock mixture
        at 42\xB0C for exactly 10 seconds. [Note] Do not mix!\\n    # Place on ice
        for 5 minutes. [Note] Do not mix!\\n    heat_stock_10sec_5min( op_out_transformed_ecoli)\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n    pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    \\n    # Incubate transformants\\n    incubate_transformants(op_count,
        op_out_transformed_ecoli)\\n\\n    # Clean up\\n    clean_up\\n      \\n    #
        Move items\\n      operations.running.each do |op|\\n        op.output(\\\"Transformed
        E.Coli\\\").item.move \\\"37\xB0C shaker\\\"\\n      end\\n\\n    # Store
        dna stocks\\n      all_stocks = operations.running.map { |op| [op.input(\\\"Plasmid\\\").item,
        op.temporary[:old_stock]] }.flatten.uniq\\n      all_stocks.compact!\\n      release
        all_stocks, interactive: true, method: \\\"boxes\\\"\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n    \\n    return {}\\n  end\\n\\n  #
        Take competent cells from -80\xB0C freezer, label the design ID on tubes (input).\\n
        \ # Thaw Competent E. coli cells on ice for 10 minutes.\\n  def label_comp_cell_tubes(op_count,
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Grab and label
        tubes\\\"\\n        check \\\"Grab a ice bucket and fill it with ice.\\\"\\n
        \       check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e BL21DE3
        competent cells from -80\xB0C freezer.\\\"\\n        check \\\"Label competent
        cell tubes with ID: #{ op_out_transformed_ecoli.to_sentence}\\\"\\n        check
        \\\"Thaw competent cell on ice for 10 minutes.\\\"\\n        timer initial:
        { hours: 0, minutes: 10, seconds: 0}\\n    end\\n  end\\n\\n  # Add 1 uL plasmid
        DNA to the competent cell aliquot. Carefully flick the tube 4\u20135 times
        to mix cells and DNA. [Note] Do not vortex!\\n  def add_dna_to_competent_cell(op_count,
        op_out_transformed_ecoli,op_in_plasmid)\\n    op_table = [[\\\"Plasmid DNA
        ID\\\",\\\"Volume\\\",\\\"Competent cell ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c op_in_plasmid[i]\\n        row
        \\u003c\\u003c \\\"1 \xB5l\\\"\\n        row \\u003c\\u003c {content: op_out_transformed_ecoli[i],
        check: true}\\n        op_table \\u003c\\u003c row\\n    end\\n    show do\\n
        \       title \\\"Mix DNA with competent cell\\\"\\n        check \\\"Add
        1 \xB5l of plasmid DNA to the corresponding competent cell tube.\\\"\\n        table
        op_table\\n        check \\\"Carefully flick tubes 5 times to mix the competent
        cell and plasmid DNA.\\\"\\n        warning \\\"Do not vortex.\\\"\\n        \\n
        \   end\\n  end\\n\\n  # Place the mixture on ice for 30 minutes. [Note] Do
        not mix. Set a 30-minute timer.\\n  # Prepare a heat plate and Set the temperature
        to 42\xB0C. Add water into the wells of heat blocks.\\n  def place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Incubate on ice\\\"\\n
        \       check \\\"Incubate tubes #{ op_out_transformed_ecoli.to_sentence}
        on ice for 30 minutes.\\\"\\n        warning \\\"Do not disturb tubes at this
        step.\\\"\\n        timer initial: { hours: 0, minutes: 30, seconds: 0}\\n
        \       check \\\"Preheat a heat plate to 42\xB0C.\\\"\\n    end\\n  end\\n\\n
        \   # When time is up, Heat the shock mixture at 42\xB0C for exactly 10 seconds.
        [Note] Do not mix!\\n    # Place on ice for 5 minutes. [Note] Do not mix!\\n
        \ def heat_stock_10sec_5min( op_out_transformed_ecoli)\\n    show do\\n        title
        \\\"Heat Shock cells\\\"\\n        check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence}
        on the 42\xB0C heat block for exactly 40 seconds.\\\"\\n        timer initial:
        { hours: 0, minutes: 0, seconds: 40}\\n        warning \\\"Don't mix or disturb
        tubes at this step. Don't heat cells over 40 seconds.\\\"\\n    end\\n  end\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n  def pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Cell Recovery\\\"\\n
        \       check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} on
        ice for 5 minutes.\\\"\\n        timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n        check \\\"Add 950 \xB5l of LB into each tube.\\\"  \\n    end\\n
        \ end\\n\\n    # This method tells the technician to incubate the E. coli
        transformants.\\n  def incubate_transformants(op_count, op_out_transformed_ecoli)\\n
        \   show do \\n        title \\\"Incubate in 37\xB0C shaker\\\"\\n        check
        \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} inside the glass
        flask in 37\xB0C shaker.\\\"\\n        check \\\"Incubate for 1 hour.\\\"\\n
        \       bullet \\\"\\u003ca href=\\\\'https://www.google.com/search?q=1%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 1 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Plate
        Transformed Cells (BL21DE3)\\\\'\\u003c/b\\u003e protocol.\\\"\\n        check
        \\\"While the cell cultures incubate, finish this protocol by completing the
        remaining tasks.\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        of LB + AMP plates and place them into the still 37\xB0C incubator.\\\"\\n
        \   end\\n  end\\n  \\n    # This method tells the technician to clean up
        items used in this protocol.\\n  def clean_up\\n    show do\\n      title
        \\\"Clean up\\\"\\n      check \\\"Return the ice bucket.\\\"\\n    end\\n
        \ end\\n\\nend\\n\",\"parent_id\":1547,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:42:29.000-08:00\",\"updated_at\":\"2018-11-07T17:42:29.000-08:00\",\"user_id\":200},{\"id\":90748,\"name\":\"protocol\",\"content\":\"#
        \\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n  include Feedback\\n\\n
        \ def main\\n    \\n    operations.retrieve(only: \\\"Plasmid\\\")\\n    operations.retrieve(only:
        \\\"Comp Cells (BL21DE3)\\\", interactive: false)\\n\\n    #operations.each
        do |op|\\n    #    comp_cell = op.input(\\\"Comp Cells (BL21DE3)\\\").item\\n
        \   #    comp_cell.location = \\\"-20C freezer\\\"\\n    #end\\n\\n    #show
        do\\n    #    title \\\"location\\\"\\n    #    operations.each do |op|\\n
        \   #        note \\\"location is at #{op.input(\\\"Comp Cells (BL21DE3)\\\").item.location}\\\"\\n
        \   #    end\\n    #end\\n\\n    operations.make\\n\\n    op_in_plasmid =
        []\\n    op_in_comp_cells = []\\n    op_out_transformed_ecoli = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_plasmid \\u003c\\u003c op.input(\\\"Plasmid\\\").item.id\\n
        \       op_in_comp_cells \\u003c\\u003c op.input(\\\"Comp Cells (BL21DE3)\\\").item.id\\n
        \       op_out_transformed_ecoli \\u003c\\u003c op.output(\\\"Transformed
        E.Coli\\\").item.id\\n    end\\n    \\n    # Take competent cells from -80\xB0C
        freezer, label the design ID on tubes (input).\\n    # Thaw Competent E. coli
        cells on ice for 10 minutes.\\n    label_comp_cell_tubes(op_count, op_out_transformed_ecoli)\\n
        \   \\n    # Add 1 uL plasmid DNA to the competent cell aliquot. Carefully
        flick the tube 4\u20135 times to mix cells and DNA. [Note] Do not vortex!\\n
        \   add_dna_to_competent_cell(op_count, op_out_transformed_ecoli,op_in_plasmid)\\n
        \   \\n    # Place the mixture on ice for 30 minutes. [Note] Do not mix. Set
        a 30 minutes timer.\\n    # Prepare a heat plate and Set the temperature to
        42\xB0C. Add water into the wells of heat blocks.\\n    place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    \\n    # When time is up, Heat the shock mixture
        at 42\xB0C for exactly 10 seconds. [Note] Do not mix!\\n    # Place on ice
        for 5 minutes. [Note] Do not mix!\\n    heat_stock_10sec_5min( op_out_transformed_ecoli)\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n    pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    \\n    # Incubate transformants\\n    incubate_transformants(op_count,
        op_out_transformed_ecoli)\\n\\n    # Clean up\\n    clean_up\\n      \\n    #
        Move items\\n      operations.running.each do |op|\\n        op.output(\\\"Transformed
        E.Coli\\\").item.move \\\"37\xB0C shaker\\\"\\n      end\\n\\n    # Store
        dna stocks\\n      all_stocks = operations.running.map { |op| [op.input(\\\"Plasmid\\\").item,
        op.temporary[:old_stock]] }.flatten.uniq\\n      all_stocks.compact!\\n      release
        all_stocks, interactive: true, method: \\\"boxes\\\"\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n    \\n    return {}\\n  end\\n\\n  #
        Take competent cells from -80\xB0C freezer, label the design ID on tubes (input).\\n
        \ # Thaw Competent E. coli cells on ice for 10 minutes.\\n  def label_comp_cell_tubes(op_count,
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Grab and label
        tubes\\\"\\n        check \\\"Grab a ice bucket and fill it with ice.\\\"\\n
        \       check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e BL21DE3
        competent cells from -80\xB0C freezer.\\\"\\n        check \\\"Label competent
        cell tubes with ID: #{ op_out_transformed_ecoli.to_sentence}\\\"\\n        check
        \\\"Thaw competent cell on ice for 10 minutes.\\\"\\n        timer initial:
        { hours: 0, minutes: 10, seconds: 0}\\n    end\\n  end\\n\\n  # Add 1 uL plasmid
        DNA to the competent cell aliquot. Carefully flick the tube 4\u20135 times
        to mix cells and DNA. [Note] Do not vortex!\\n  def add_dna_to_competent_cell(op_count,
        op_out_transformed_ecoli,op_in_plasmid)\\n    op_table = [[\\\"Plasmid DNA
        ID\\\",\\\"Volume\\\",\\\"Competent cell ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c op_in_plasmid[i]\\n        row
        \\u003c\\u003c \\\"1 \xB5l\\\"\\n        row \\u003c\\u003c {content: op_out_transformed_ecoli[i],
        check: true}\\n        op_table \\u003c\\u003c row\\n    end\\n    show do\\n
        \       title \\\"Mix DNA with competent cell\\\"\\n        check \\\"Add
        1 \xB5l of plasmid DNA to the corresponding competent cell tube.\\\"\\n        table
        op_table\\n        check \\\"Carefully flick tubes 5 times to mix competent
        cells and plasmid DNA.\\\"\\n        warning \\\"Do not vortex.\\\"\\n        \\n
        \   end\\n  end\\n\\n  # Place the mixture on ice for 30 minutes. [Note] Do
        not mix. Set a 30-minute timer.\\n  # Prepare a heat plate and Set the temperature
        to 42\xB0C. Add water into the wells of heat blocks.\\n  def place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Incubate on ice\\\"\\n
        \       check \\\"Incubate tubes #{ op_out_transformed_ecoli.to_sentence}
        on ice for 30 minutes.\\\"\\n        warning \\\"Do not disturb tubes at this
        step.\\\"\\n        timer initial: { hours: 0, minutes: 30, seconds: 0}\\n
        \       check \\\"Preheat a heat plate to 42\xB0C.\\\"\\n    end\\n  end\\n\\n
        \   # When time is up, Heat the shock mixture at 42\xB0C for exactly 10 seconds.
        [Note] Do not mix!\\n    # Place on ice for 5 minutes. [Note] Do not mix!\\n
        \ def heat_stock_10sec_5min( op_out_transformed_ecoli)\\n    show do\\n        title
        \\\"Heat Shock cells\\\"\\n        check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence}
        on the 42\xB0C heat block for exactly 40 seconds.\\\"\\n        timer initial:
        { hours: 0, minutes: 0, seconds: 40}\\n        warning \\\"Don't mix or disturb
        tubes at this step. Don't heat cells over 40 seconds.\\\"\\n    end\\n  end\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n  def pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Cell Recovery\\\"\\n
        \       check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} on
        ice for 5 minutes.\\\"\\n        timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n        check \\\"Add 950 \xB5l of LB into each tube.\\\"  \\n    end\\n
        \ end\\n\\n    # This method tells the technician to incubate the E. coli
        transformants.\\n  def incubate_transformants(op_count, op_out_transformed_ecoli)\\n
        \   show do \\n        title \\\"Incubate in 37\xB0C shaker\\\"\\n        check
        \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} inside the glass
        flask in 37\xB0C shaker.\\\"\\n        check \\\"Incubate for 1 hour.\\\"\\n
        \       bullet \\\"\\u003ca href=\\\\'https://www.google.com/search?q=1%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 1 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Plate
        Transformed Cells (BL21DE3)\\\\'\\u003c/b\\u003e protocol.\\\"\\n        check
        \\\"While the cell cultures incubate, finish this protocol by completing the
        remaining tasks.\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        of LB + AMP plates and place them into the still 37\xB0C incubator.\\\"\\n
        \   end\\n  end\\n  \\n    # This method tells the technician to clean up
        items used in this protocol.\\n  def clean_up\\n    show do\\n      title
        \\\"Clean up\\\"\\n      check \\\"Return the ice bucket.\\\"\\n    end\\n
        \ end\\n\\nend\\n\",\"parent_id\":1547,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:41:54.000-08:00\",\"updated_at\":\"2018-11-07T17:41:54.000-08:00\",\"user_id\":200},{\"id\":90747,\"name\":\"protocol\",\"content\":\"#
        \\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n  include Feedback\\n\\n
        \ def main\\n    \\n    operations.retrieve(only: \\\"Plasmid\\\")\\n    operations.retrieve(only:
        \\\"Comp Cells (BL21DE3)\\\", interactive: false)\\n\\n    #operations.each
        do |op|\\n    #    comp_cell = op.input(\\\"Comp Cells (BL21DE3)\\\").item\\n
        \   #    comp_cell.location = \\\"-20C freezer\\\"\\n    #end\\n\\n    #show
        do\\n    #    title \\\"location\\\"\\n    #    operations.each do |op|\\n
        \   #        note \\\"location is at #{op.input(\\\"Comp Cells (BL21DE3)\\\").item.location}\\\"\\n
        \   #    end\\n    #end\\n\\n    operations.make\\n\\n    op_in_plasmid =
        []\\n    op_in_comp_cells = []\\n    op_out_transformed_ecoli = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_plasmid \\u003c\\u003c op.input(\\\"Plasmid\\\").item.id\\n
        \       op_in_comp_cells \\u003c\\u003c op.input(\\\"Comp Cells (BL21DE3)\\\").item.id\\n
        \       op_out_transformed_ecoli \\u003c\\u003c op.output(\\\"Transformed
        E.Coli\\\").item.id\\n    end\\n    \\n    # Take competent cells from -80\xB0C
        freezer, label the design ID on tubes (input).\\n    # Thaw Competent E. coli
        cells on ice for 10 minutes.\\n    label_comp_cell_tubes(op_count, op_out_transformed_ecoli)\\n
        \   \\n    # Add 1 uL plasmid DNA to the competent cell aliquot. Carefully
        flick the tube 4\u20135 times to mix cells and DNA. [Note] Do not vortex!\\n
        \   add_dna_to_competent_cell(op_count, op_out_transformed_ecoli,op_in_plasmid)\\n
        \   \\n    # Place the mixture on ice for 30 minutes. [Note] Do not mix. Set
        a 30 minutes timer.\\n    # Prepare a heat plate and Set the temperature to
        42\xB0C. Add water into the wells of heat blocks.\\n    place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    \\n    # When time is up, Heat the shock mixture
        at 42\xB0C for exactly 10 seconds. [Note] Do not mix!\\n    # Place on ice
        for 5 minutes. [Note] Do not mix!\\n    heat_stock_10sec_5min( op_out_transformed_ecoli)\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n    pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    \\n    # Incubate transformants\\n    incubate_transformants(op_count,
        op_out_transformed_ecoli)\\n\\n    # Clean up\\n    clean_up\\n      \\n    #
        Move items\\n      operations.running.each do |op|\\n        op.output(\\\"Transformed
        E.Coli\\\").item.move \\\"37\xB0C shaker\\\"\\n      end\\n\\n    # Store
        dna stocks\\n      all_stocks = operations.running.map { |op| [op.input(\\\"Plasmid\\\").item,
        op.temporary[:old_stock]] }.flatten.uniq\\n      all_stocks.compact!\\n      release
        all_stocks, interactive: true, method: \\\"boxes\\\"\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n    \\n    return {}\\n  end\\n\\n  #
        Take competent cells from -80\xB0C freezer, label the design ID on tubes (input).\\n
        \ # Thaw Competent E. coli cells on ice for 10 minutes.\\n  def label_comp_cell_tubes(op_count,
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Grab and label
        tubes\\\"\\n        check \\\"Grab a ice bucket and fill it with ice.\\\"\\n
        \       check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e BL21DE3
        competent cells from -80\xB0C freezer.\\\"\\n        check \\\"Label competent
        cell tubes with ID: #{ op_out_transformed_ecoli.to_sentence}\\\"\\n        check
        \\\"Thaw competent cell on ice for 10 minutes.\\\"\\n        timer initial:
        { hours: 0, minutes: 10, seconds: 0}\\n    end\\n  end\\n\\n  # Add 1 uL plasmid
        DNA to the competent cell aliquot. Carefully flick the tube 4\u20135 times
        to mix cells and DNA. [Note] Do not vortex!\\n  def add_dna_to_competent_cell(op_count,
        op_out_transformed_ecoli,op_in_plasmid)\\n    op_table = [[\\\"Plasmid DNA
        ID\\\",\\\"Volume\\\",\\\"Competent cell ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c op_in_plasmid[i]\\n        row
        \\u003c\\u003c \\\"1 \xB5l\\\"\\n        row \\u003c\\u003c {content: op_out_transformed_ecoli[i],
        check: true}\\n        op_table \\u003c\\u003c row\\n    end\\n    show do\\n
        \       title \\\"Mix DNA with competent cell\\\"\\n        check \\\"Add
        1 \xB5l of plasmid DNA to the corresponding competent cell tubes.\\\"\\n        table
        op_table\\n        check \\\"Carefully flick tubes 5 times to mix competent
        cells and plasmid DNA.\\\"\\n        warning \\\"Do not vortex.\\\"\\n        \\n
        \   end\\n  end\\n\\n  # Place the mixture on ice for 30 minutes. [Note] Do
        not mix. Set a 30-minute timer.\\n  # Prepare a heat plate and Set the temperature
        to 42\xB0C. Add water into the wells of heat blocks.\\n  def place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Incubate on ice\\\"\\n
        \       check \\\"Incubate tubes #{ op_out_transformed_ecoli.to_sentence}
        on ice for 30 minutes.\\\"\\n        warning \\\"Do not disturb tubes at this
        step.\\\"\\n        timer initial: { hours: 0, minutes: 30, seconds: 0}\\n
        \       check \\\"Preheat a heat plate to 42\xB0C.\\\"\\n    end\\n  end\\n\\n
        \   # When time is up, Heat the shock mixture at 42\xB0C for exactly 10 seconds.
        [Note] Do not mix!\\n    # Place on ice for 5 minutes. [Note] Do not mix!\\n
        \ def heat_stock_10sec_5min( op_out_transformed_ecoli)\\n    show do\\n        title
        \\\"Heat Shock cells\\\"\\n        check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence}
        on the 42\xB0C heat block for exactly 40 seconds.\\\"\\n        timer initial:
        { hours: 0, minutes: 0, seconds: 40}\\n        warning \\\"Don't mix or disturb
        tubes at this step. Don't heat cells over 40 seconds.\\\"\\n    end\\n  end\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n  def pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Cell Recovery\\\"\\n
        \       check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} on
        ice for 5 minutes.\\\"\\n        timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n        check \\\"Add 950 \xB5l of LB into each tube.\\\"  \\n    end\\n
        \ end\\n\\n    # This method tells the technician to incubate the E. coli
        transformants.\\n  def incubate_transformants(op_count, op_out_transformed_ecoli)\\n
        \   show do \\n        title \\\"Incubate in 37\xB0C shaker\\\"\\n        check
        \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} inside the glass
        flask in 37\xB0C shaker.\\\"\\n        check \\\"Incubate for 1 hour.\\\"\\n
        \       bullet \\\"\\u003ca href=\\\\'https://www.google.com/search?q=1%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 1 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Plate
        Transformed Cells (BL21DE3)\\\\'\\u003c/b\\u003e protocol.\\\"\\n        check
        \\\"While the cell cultures incubate, finish this protocol by completing the
        remaining tasks.\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        of LB + AMP plates and place them into the still 37\xB0C incubator.\\\"\\n
        \   end\\n  end\\n  \\n    # This method tells the technician to clean up
        items used in this protocol.\\n  def clean_up\\n    show do\\n      title
        \\\"Clean up\\\"\\n      check \\\"Return the ice bucket.\\\"\\n    end\\n
        \ end\\n\\nend\\n\",\"parent_id\":1547,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:41:13.000-08:00\",\"updated_at\":\"2018-11-07T17:41:13.000-08:00\",\"user_id\":200},{\"id\":90746,\"name\":\"protocol\",\"content\":\"needs
        \\\"Standard Libs/AssociationManagement\\\"\\nneeds \\\"Tissue Culture Libs/CollectionDisplay\\\"\\nneeds
        \\\"High Throughput Culturing/ExperimentInitializer\\\"\\n\\n# HIDDEN INPUTS!\\n#
        - media\\n# - antibiotics\\n\\n# HIDDEN OUTPUTS!\\n# - antibiotic media for
        Recover step (next operation)\\n# - IF pre-make media option THEN\\n#       -
        enough antibiotic media for full induction experiment\\n\\nclass Protocol\\n
        \ include AssociationManagement\\n  include PartProvenance\\n  include ExperimentInitializer\\n
        \ include CollectionDisplay\\n  \\n  # Antibiotic Parameters\\n  STOCK_KAN_CONC
        = 10#mg/mL\\n  FINAL_KAN_CONC = \\\"Kanamycin Concentration (\xB5g/mL)\\\"\\n
        \ STOCK_CHLOR_CONC = 25#mg/mL\\n  FINAL_CHLOR_CONC = \\\"Chloramphenicol Concentration
        (\xB5g/mL)\\\"\\n  \\n  def main\\n\\n    if operations.size != 1\\n      raise
        \\\"Manager Error: this protocol only accepts batches of single operations,
        retry as singleton\\\"\\n    end\\n    operations.retrieve.make\\n    op =
        operations.first\\n    \\n    experimental_plates = op.output_array(\\\"Overnight
        Experimental Prep Plate\\\").map { |fv| fv.collection }\\n    \\n    # dummy_op
        = Operation.find()\\n    \\n    # generate condition list as list of hashes
        using inputs\\n    condition_list = op.input_array(\\\"Culture Condition\\\").map
        do |fv|\\n      # these operations have already been checked for validity
        in precondition\\n      definition_op = FieldValue.find(fv.wires_as_dest.first.from_id).operation\\n
        \     \\n      condition_replicates = []\\n      definition_op.input(\\\"Replicates\\\").val.to_i.times
        do |rep|\\n      \\n          # extract condition definition\\n          ovn_antibiotic
        \ = definition_op.input(\\\"Overnight Antibiotic\\\").val\\n          exp_antibiotic
        \ = definition_op.input(\\\"Experimental Antibiotic\\\").val\\n          media_type
        \     = definition_op.input(\\\"Type of Media\\\").val\\n          inducers
        \       = definition_op.input(\\\"Inducer(s) as  {\\\\\\\"name\\\\\\\": mM_concentration}\\\").val\\n
        \         \\n          # input json turns keys to symbols, we will turn them
        back into strings for consistency\\n          inducers_string_keys = {}\\n
        \         inducers.each do |k, v|\\n            inducers_string_keys[k.to_s]
        = v\\n          end\\n          \\n          # each element of conditions
        is a hash representing the full definition of a well in the exp plate \\n
        \         condition_replicates \\u003c\\u003c {\\n            target_sample:
        \ definition_op.input(\\\"Target Sample\\\").item,\\n            ovn_antibiotic:
        ovn_antibiotic,\\n            exp_antibiotic: exp_antibiotic,\\n            media_type:
        \    media_type,\\n            inducers:       inducers_string_keys\\n          }
        #elements of condition list, mapped from inputs\\n      end\\n      condition_replicates\\n
        \   end\\n    \\n    condition_list.flatten!\\n    \\n    #TODO bad bad bad
        this condition list isn't right\\n        show do\\n            note condition_list.to_json\\n
        \       end\\n    \\n    # Sort conditions into Array of 96w Matricies, each
        matrix element has a condition definition hash\\n    # Matricies correspond
        to output plates\\n    scheme = generate_plate_scheme(condition_list)\\n    \\n
        \       show do\\n            note scheme.to_json\\n        end\\n\\n    \\n
        \   # Bookkeeping and calculations\\n    total_media_hash = Hash.new(0)\\n
        \   experimental_plates.each_with_index do |out_plate, idx|\\n      # Use
        scheme to load up output plates with correct parts and part data associations\\n
        \     condition_layout_mat = scheme[idx]\\n      \\n      item_mat             =
        condition_layout_mat.map { |row| row.map { |col| col[:target_sample] if col
        }}           # Matrix\\u003cItem\\u003e\\n      sample_mat           = condition_layout_mat.map
        { |row| row.map { |col| col[:target_sample].sample.id if col }} # Matrix\\u003cSampleId\\u003e\\n
        \     ovn_antibiotic_mat   = condition_layout_mat.map { |row| row.map { |col|
        col[:ovn_antibiotic] if col }}          # Matrix\\u003cantibiotic name\\u003e\\n
        \     exp_antibiotic_mat   = condition_layout_mat.map { |row| row.map { |col|
        col[:exp_antibiotic] if col }}          # Matrix\\u003cantibiotic name\\u003e\\n
        \     media_type_mat       = condition_layout_mat.map { |row| row.map { |col|
        col[:media_type] if col }}              # Matrix\\u003cmedia name\\u003e\\n
        \     inducer_mat          = condition_layout_mat.map { |row| row.map { |col|
        col[:inducers] if col }}    # Matrix\\u003cHash\\u003cinducer name, inducer
        conc\\u003e\\u003e\\n      \\n      # create all parts for output plate\\n
        \     out_plate.associate_matrix(sample_mat)\\n      \\n      # add associations
        to plate parts\\n      out_plate.set_data_matrix(\\\"Overnight Antibiotic\\\",
        ovn_antibiotic_mat)\\n      out_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",
        exp_antibiotic_mat)\\n      out_plate.set_data_matrix(\\\"Type of Media\\\",
        media_type_mat)\\n      out_plate.set_data_matrix(\\\"Inducers\\\", inducer_mat)\\n
        \     \\n      # add provenance associations to plate parts\\n      record_experimental_plate_provenance(item_mat,
        out_plate)\\n      \\n      \\n      # decide whether to prepare all the media
        needed for a full nc workflow, or only the media needed\\n      # to make
        an experiment ready glycerol stock plate\\n      if op.input(\\\"Prepare Experimental
        Media now?\\\").val == \\\"yes\\\"\\n        calculate_total_media(ovn_antibiotic_mat,
        exp_antibiotic_mat, media_type_mat, total_media_hash, (1000 + 200 + 200 +
        3000))\\n        out_plate.associate(\\\"prepare_media_cookie\\\", \\\"yes\\\")\\n
        \     else\\n        calculate_total_media(ovn_antibiotic_mat, exp_antibiotic_mat,
        media_type_mat, total_media_hash, 1000)\\n      end\\n    end\\n    \\n    #
        make whatever media is needed\\n    make_media_instructions(total_media_hash,
        op)\\n    \\n    # instruct technician to fill plate with media and transfer
        samples to media\\n    experimental_plates.each_with_index do |out_plate,
        idx|\\n      # Use scheme to load up output plates with correct parts and
        part data associations (pretty ugly that we are doing this extraction twice
        over)\\n      condition_layout_mat = scheme[idx]\\n      item_mat             =
        condition_layout_mat.map { |row| row.map { |col| col[:target_sample] if col
        }}           # Matrix\\u003cItem\\u003e\\n      ovn_antibiotic_mat   = condition_layout_mat.map
        { |row| row.map { |col| col[:ovn_antibiotic] if col }}          # Matrix\\u003cantibiotic
        name\\u003e\\n      media_type_mat       = condition_layout_mat.map { |row|
        row.map { |col| col[:media_type] if col }}              # Matrix\\u003cmedia
        name\\u003e\\n\\n      # fill plate wells with correct type of media\\n      fill_plate_with_media(out_plate,
        ovn_antibiotic_mat, media_type_mat)\\n      \\n      # direct technician to
        begin transfer samples and media into output plate, preparing for overnight\\n
        \     sample_transfer(out_plate, item_mat)\\n    end\\n    \\n    # begin
        incubation for all plates\\n    begin_incubation(experimental_plates, op.input(\\\"Temperature
        (\xB0C)\\\").val.to_i)\\n    \\n    operations.store(interactive: false)\\n\\n
        \   {}\\n\\n  end\\n  \\n  # On the output experimental plate, record the
        sources for each part\\n  # as the input item that corresponds to it as defined
        in item layout.\\n  #\\n  # @param out_plate [Item]  output collection, destination
        of transfered samples\\n  #                 for this protocol\\n  # @param
        item_layout [Array\\u003cArray\\u003cItem\\u003e\\u003e]  input items, arranged
        in a matrix\\n  #                 as they will appear in the output collection\\n
        \ def record_experimental_plate_provenance(item_layout, out_plate)\\n    plate_associations
        = AssociationMap.new(out_plate)\\n    item_layout.each_with_index do |row,
        r_idx|\\n      row.each_with_index do |from_item, c_idx|\\n        if from_item
        #note every slot in matrix has a from item\\n            from_associations
        = AssociationMap.new(from_item)\\n            add_provenance({\\n                from:
        from_item, \\n                from_map: from_associations,\\n                to:
        out_plate, \\n                to_coord: [r_idx, c_idx], \\n                to_map:
        plate_associations\\n            })\\n            from_associations.save\\n
        \       end\\n      end\\n    end\\n    plate_associations.save\\n  end\\n
        \ \\n  def sample_transfer(out_plate, item_mat)\\n    #create rclist by item
        for this plate\\n    item_to_coordlist = Hash.new { |h, k| h[k] = [] }\\n
        \   item_mat.each_with_index do |row, r_idx|\\n      row.each_with_index do
        |col, c_idx|\\n        if col\\n            item_to_coordlist[col] \\u003c\\u003c
        [r_idx, c_idx]\\n        end\\n      end\\n    end\\n    \\n    # transfer
        scraping into wells\\n    item_to_coordlist.each do |item, coordlist|\\n      show
        do\\n        title \\\"Filling 96 Deep Well \\u003cb\\u003e#{out_plate.id}
        with Samples\\u003c/b\\u003e\\\"\\n        separator\\n        note \\\"Use
        a pipette tip to scrape out some of #{item} into each of the highlighted wells
        on #{out_plate}\\\"\\n        table highlight_alpha_rc(out_plate, coordlist)
        {|r,c| item.id }\\n      end\\n    end\\n  end\\n  \\n  def begin_incubation(experimental_plates,
        temp)\\n    experimental_plates.each do |plate|\\n      plate.move \\\"#{temp}
        C Shaker incubator\\\"\\n    end\\n    \\n    show do\\n      title \\\"Incubating
        Plates\\\"\\n      note \\\"Move #{experimental_plates.to_sentence} to the
        #{temp}\xB0C incubator and place on shaker - 800rpm.\\\"\\n    end\\n  end\\n
        \ \\n  # Direct tech to aliquot and create antibiotic media\\n  def make_media_instructions(total_media_hash,
        op)\\n    total_media_hash.each do |media, quant|\\n      kan_stk_vol = 0\\n
        \     chlor_stk_vol = 0\\n      (media.include? 'Kan') ? kan_stk_vol = (op.input(FINAL_KAN_CONC).val.to_f
        * (quant))/(STOCK_KAN_CONC*1000) : 0\\n      (media.include? 'Chlor') ? chlor_stk_vol
        = (op.input(FINAL_CHLOR_CONC).val.to_f * (quant))/(STOCK_CHLOR_CONC*1000)
        : 0\\n      show do\\n        if kan_stk_vol == 0 \\u0026\\u0026 chlor_stk_vol
        == 0\\n          title \\\"Aliquoting #{media} Media\\\"\\n          separator\\n
        \         check \\\"In the appropriate container aliquot: \\u003cb\\u003e#{quant.to_f/1000}mL\\u003c/b\\u003e
        of \\u003cb\\u003e#{media} Media\\u003c/b\\u003e\\\"\\n          check \\\"Label,
        date, \\u0026 initial the container: \\u003cb\\u003e#{media} Media\\u003c/b\\u003e\\\"\\n
        \       else\\n          title \\\"Creating Antibiotic Media: #{media}\\\"\\n
        \         separator\\n          check \\\"In the appropriate container aliquot:
        \\u003cb\\u003e#{quant.to_f/1000}mL\\u003c/b\\u003e of \\u003cb\\u003e#{media.split('
        ').first} Media\\u003c/b\\u003e\\\"\\n          check \\\"To that aliquot,
        add \\u003cb\\u003e#{kan_stk_vol}\xB5l\\u003c/b\\u003e of \\u003cb\\u003eKanamycin
        Stock (#{STOCK_KAN_CONC}mg/mL)\\u003c/b\\u003e\\\" if (kan_stk_vol \\u003e
        0)\\n          check \\\"To that aliquot, add \\u003cb\\u003e#{chlor_stk_vol}\xB5l\\u003c/b\\u003e
        of \\u003cb\\u003eChloramphenicol Stock (#{STOCK_CHLOR_CONC}mg/mL)\\u003c/b\\u003e\\\"
        if (chlor_stk_vol \\u003e 0)\\n          check \\\"Label, date, \\u0026 initial
        the container: \\u003cb\\u003e#{media}\\u003c/b\\u003e\\\"\\n        end\\n
        \     end\\n    end\\n  end\\n  \\nend\\n\",\"parent_id\":1498,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:30:05.000-08:00\",\"updated_at\":\"2018-11-07T17:30:05.000-08:00\",\"user_id\":193},{\"id\":90745,\"name\":\"protocol\",\"content\":\"needs
        \\\"Standard Libs/AssociationManagement\\\"\\nneeds \\\"Tissue Culture Libs/CollectionDisplay\\\"\\nneeds
        \\\"High Throughput Culturing/ExperimentInitializer\\\"\\n\\n# HIDDEN INPUTS!\\n#
        - media\\n# - antibiotics\\n\\n# HIDDEN OUTPUTS!\\n# - antibiotic media for
        Recover step (next operation)\\n# - IF pre-make media option THEN\\n#       -
        enough antibiotic media for full induction experiment\\n\\nclass Protocol\\n
        \ include AssociationManagement\\n  include PartProvenance\\n  include ExperimentInitializer\\n
        \ include CollectionDisplay\\n  \\n  # Antibiotic Parameters\\n  STOCK_KAN_CONC
        = 10#mg/mL\\n  FINAL_KAN_CONC = \\\"Kanamycin Concentration (\xB5g/mL)\\\"\\n
        \ STOCK_CHLOR_CONC = 25#mg/mL\\n  FINAL_CHLOR_CONC = \\\"Chloramphenicol Concentration
        (\xB5g/mL)\\\"\\n  \\n  def main\\n\\n    if operations.size != 1\\n      raise
        \\\"Manager Error: this protocol only accepts batches of single operations,
        retry as singleton\\\"\\n    end\\n    operations.retrieve.make\\n    op =
        operations.first\\n    \\n    experimental_plates = op.output_array(\\\"Overnight
        Experimental Prep Plate\\\").map { |fv| fv.collection }\\n    \\n    # dummy_op
        = Operation.find()\\n    \\n    # generate condition list as list of hashes
        using inputs\\n    condition_list = op.input_array(\\\"Culture Condition\\\").map
        do |fv|\\n      # these operations have already been checked for validity
        in precondition\\n      definition_op = FieldValue.find(fv.wires_as_dest.first.from_id).operation\\n
        \     \\n      condition_replicates = []\\n      definition_op.input(\\\"Replicates\\\").val.to_i.times
        do |rep|\\n      \\n          # extract condition definition\\n          ovn_antibiotic
        \ = definition_op.input(\\\"Overnight Antibiotic\\\").val\\n          exp_antibiotic
        \ = definition_op.input(\\\"Experimental Antibiotic\\\").val\\n          media_type
        \     = definition_op.input(\\\"Type of Media\\\").val\\n          inducers
        \       = definition_op.input(\\\"Inducer(s) as  {\\\\\\\"name\\\\\\\": mM_concentration}\\\").val\\n
        \         \\n          # input json turns keys to symbols, we will turn them
        back into strings for consistency\\n          inducers_string_keys = {}\\n
        \         inducers.each do |k, v|\\n            inducers_string_keys[k.to_s]
        = v\\n          end\\n          \\n          # each element of conditions
        is a hash representing the full definition of a well in the exp plate \\n
        \         condition_replicates \\u003c\\u003c {\\n            target_sample:
        \ definition_op.input(\\\"Target Sample\\\").item,\\n            ovn_antibiotic:
        ovn_antibiotic,\\n            exp_antibiotic: exp_antibiotic,\\n            media_type:
        \    media_type,\\n            inducers:       inducers_string_keys\\n          }
        #elements of condition list, mapped from inputs\\n      end\\n      condition_replicates\\n
        \   end\\n    \\n    condition_list.flatten!\\n    \\n        show do\\n            note
        condition_list.to_json\\n        end\\n    \\n    # Sort conditions into Array
        of 96w Matricies, each matrix element has a condition definition hash\\n    #
        Matricies correspond to output plates\\n    scheme = generate_plate_scheme(condition_list)\\n
        \   \\n        show do\\n            note scheme.to_json\\n        end\\n\\n
        \   \\n    # Bookkeeping and calculations\\n    total_media_hash = Hash.new(0)\\n
        \   experimental_plates.each_with_index do |out_plate, idx|\\n      # Use
        scheme to load up output plates with correct parts and part data associations\\n
        \     condition_layout_mat = scheme[idx]\\n      \\n      item_mat             =
        condition_layout_mat.map { |row| row.map { |col| col[:target_sample] if col
        }}           # Matrix\\u003cItem\\u003e\\n      sample_mat           = condition_layout_mat.map
        { |row| row.map { |col| col[:target_sample].sample.id if col }} # Matrix\\u003cSampleId\\u003e\\n
        \     ovn_antibiotic_mat   = condition_layout_mat.map { |row| row.map { |col|
        col[:ovn_antibiotic] if col }}          # Matrix\\u003cantibiotic name\\u003e\\n
        \     exp_antibiotic_mat   = condition_layout_mat.map { |row| row.map { |col|
        col[:exp_antibiotic] if col }}          # Matrix\\u003cantibiotic name\\u003e\\n
        \     media_type_mat       = condition_layout_mat.map { |row| row.map { |col|
        col[:media_type] if col }}              # Matrix\\u003cmedia name\\u003e\\n
        \     inducer_mat          = condition_layout_mat.map { |row| row.map { |col|
        col[:inducers] if col }}    # Matrix\\u003cHash\\u003cinducer name, inducer
        conc\\u003e\\u003e\\n      \\n      # create all parts for output plate\\n
        \     out_plate.associate_matrix(sample_mat)\\n      \\n      # add associations
        to plate parts\\n      out_plate.set_data_matrix(\\\"Overnight Antibiotic\\\",
        ovn_antibiotic_mat)\\n      out_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",
        exp_antibiotic_mat)\\n      out_plate.set_data_matrix(\\\"Type of Media\\\",
        media_type_mat)\\n      out_plate.set_data_matrix(\\\"Inducers\\\", inducer_mat)\\n
        \     \\n      # add provenance associations to plate parts\\n      record_experimental_plate_provenance(item_mat,
        out_plate)\\n      \\n      \\n      # decide whether to prepare all the media
        needed for a full nc workflow, or only the media needed\\n      # to make
        an experiment ready glycerol stock plate\\n      if op.input(\\\"Prepare Experimental
        Media now?\\\").val == \\\"yes\\\"\\n        calculate_total_media(ovn_antibiotic_mat,
        exp_antibiotic_mat, media_type_mat, total_media_hash, (1000 + 200 + 200 +
        3000))\\n        out_plate.associate(\\\"prepare_media_cookie\\\", \\\"yes\\\")\\n
        \     else\\n        calculate_total_media(ovn_antibiotic_mat, exp_antibiotic_mat,
        media_type_mat, total_media_hash, 1000)\\n      end\\n    end\\n    \\n    #
        make whatever media is needed\\n    make_media_instructions(total_media_hash,
        op)\\n    \\n    # instruct technician to fill plate with media and transfer
        samples to media\\n    experimental_plates.each_with_index do |out_plate,
        idx|\\n      # Use scheme to load up output plates with correct parts and
        part data associations (pretty ugly that we are doing this extraction twice
        over)\\n      condition_layout_mat = scheme[idx]\\n      item_mat             =
        condition_layout_mat.map { |row| row.map { |col| col[:target_sample] if col
        }}           # Matrix\\u003cItem\\u003e\\n      ovn_antibiotic_mat   = condition_layout_mat.map
        { |row| row.map { |col| col[:ovn_antibiotic] if col }}          # Matrix\\u003cantibiotic
        name\\u003e\\n      media_type_mat       = condition_layout_mat.map { |row|
        row.map { |col| col[:media_type] if col }}              # Matrix\\u003cmedia
        name\\u003e\\n\\n      # fill plate wells with correct type of media\\n      fill_plate_with_media(out_plate,
        ovn_antibiotic_mat, media_type_mat)\\n      \\n      # direct technician to
        begin transfer samples and media into output plate, preparing for overnight\\n
        \     sample_transfer(out_plate, item_mat)\\n    end\\n    \\n    # begin
        incubation for all plates\\n    begin_incubation(experimental_plates, op.input(\\\"Temperature
        (\xB0C)\\\").val.to_i)\\n    \\n    operations.store(interactive: false)\\n\\n
        \   {}\\n\\n  end\\n  \\n  # On the output experimental plate, record the
        sources for each part\\n  # as the input item that corresponds to it as defined
        in item layout.\\n  #\\n  # @param out_plate [Item]  output collection, destination
        of transfered samples\\n  #                 for this protocol\\n  # @param
        item_layout [Array\\u003cArray\\u003cItem\\u003e\\u003e]  input items, arranged
        in a matrix\\n  #                 as they will appear in the output collection\\n
        \ def record_experimental_plate_provenance(item_layout, out_plate)\\n    plate_associations
        = AssociationMap.new(out_plate)\\n    item_layout.each_with_index do |row,
        r_idx|\\n      row.each_with_index do |from_item, c_idx|\\n        if from_item
        #note every slot in matrix has a from item\\n            from_associations
        = AssociationMap.new(from_item)\\n            add_provenance({\\n                from:
        from_item, \\n                from_map: from_associations,\\n                to:
        out_plate, \\n                to_coord: [r_idx, c_idx], \\n                to_map:
        plate_associations\\n            })\\n            from_associations.save\\n
        \       end\\n      end\\n    end\\n    plate_associations.save\\n  end\\n
        \ \\n  def sample_transfer(out_plate, item_mat)\\n    #create rclist by item
        for this plate\\n    item_to_coordlist = Hash.new { |h, k| h[k] = [] }\\n
        \   item_mat.each_with_index do |row, r_idx|\\n      row.each_with_index do
        |col, c_idx|\\n        if col\\n            item_to_coordlist[col] \\u003c\\u003c
        [r_idx, c_idx]\\n        end\\n      end\\n    end\\n    \\n    # transfer
        scraping into wells\\n    item_to_coordlist.each do |item, coordlist|\\n      show
        do\\n        title \\\"Filling 96 Deep Well \\u003cb\\u003e#{out_plate.id}
        with Samples\\u003c/b\\u003e\\\"\\n        separator\\n        note \\\"Use
        a pipette tip to scrape out some of #{item} into each of the highlighted wells
        on #{out_plate}\\\"\\n        table highlight_alpha_rc(out_plate, coordlist)
        {|r,c| item.id }\\n      end\\n    end\\n  end\\n  \\n  def begin_incubation(experimental_plates,
        temp)\\n    experimental_plates.each do |plate|\\n      plate.move \\\"#{temp}
        C Shaker incubator\\\"\\n    end\\n    \\n    show do\\n      title \\\"Incubating
        Plates\\\"\\n      note \\\"Move #{experimental_plates.to_sentence} to the
        #{temp}\xB0C incubator and place on shaker - 800rpm.\\\"\\n    end\\n  end\\n
        \ \\n  # Direct tech to aliquot and create antibiotic media\\n  def make_media_instructions(total_media_hash,
        op)\\n    total_media_hash.each do |media, quant|\\n      kan_stk_vol = 0\\n
        \     chlor_stk_vol = 0\\n      (media.include? 'Kan') ? kan_stk_vol = (op.input(FINAL_KAN_CONC).val.to_f
        * (quant))/(STOCK_KAN_CONC*1000) : 0\\n      (media.include? 'Chlor') ? chlor_stk_vol
        = (op.input(FINAL_CHLOR_CONC).val.to_f * (quant))/(STOCK_CHLOR_CONC*1000)
        : 0\\n      show do\\n        if kan_stk_vol == 0 \\u0026\\u0026 chlor_stk_vol
        == 0\\n          title \\\"Aliquoting #{media} Media\\\"\\n          separator\\n
        \         check \\\"In the appropriate container aliquot: \\u003cb\\u003e#{quant.to_f/1000}mL\\u003c/b\\u003e
        of \\u003cb\\u003e#{media} Media\\u003c/b\\u003e\\\"\\n          check \\\"Label,
        date, \\u0026 initial the container: \\u003cb\\u003e#{media} Media\\u003c/b\\u003e\\\"\\n
        \       else\\n          title \\\"Creating Antibiotic Media: #{media}\\\"\\n
        \         separator\\n          check \\\"In the appropriate container aliquot:
        \\u003cb\\u003e#{quant.to_f/1000}mL\\u003c/b\\u003e of \\u003cb\\u003e#{media.split('
        ').first} Media\\u003c/b\\u003e\\\"\\n          check \\\"To that aliquot,
        add \\u003cb\\u003e#{kan_stk_vol}\xB5l\\u003c/b\\u003e of \\u003cb\\u003eKanamycin
        Stock (#{STOCK_KAN_CONC}mg/mL)\\u003c/b\\u003e\\\" if (kan_stk_vol \\u003e
        0)\\n          check \\\"To that aliquot, add \\u003cb\\u003e#{chlor_stk_vol}\xB5l\\u003c/b\\u003e
        of \\u003cb\\u003eChloramphenicol Stock (#{STOCK_CHLOR_CONC}mg/mL)\\u003c/b\\u003e\\\"
        if (chlor_stk_vol \\u003e 0)\\n          check \\\"Label, date, \\u0026 initial
        the container: \\u003cb\\u003e#{media}\\u003c/b\\u003e\\\"\\n        end\\n
        \     end\\n    end\\n  end\\n  \\nend\\n\",\"parent_id\":1498,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:26:17.000-08:00\",\"updated_at\":\"2018-11-07T17:26:17.000-08:00\",\"user_id\":193},{\"id\":90744,\"name\":\"protocol\",\"content\":\"needs
        \\\"Standard Libs/AssociationManagement\\\"\\nneeds \\\"Tissue Culture Libs/CollectionDisplay\\\"\\nneeds
        \\\"High Throughput Culturing/ExperimentInitializer\\\"\\n\\n# HIDDEN INPUTS!\\n#
        - media\\n# - antibiotics\\n\\n# HIDDEN OUTPUTS!\\n# - antibiotic media for
        Recover step (next operation)\\n# - IF pre-make media option THEN\\n#       -
        enough antibiotic media for full induction experiment\\n\\nclass Protocol\\n
        \ include AssociationManagement\\n  include PartProvenance\\n  include ExperimentInitializer\\n
        \ include CollectionDisplay\\n  \\n  # Antibiotic Parameters\\n  STOCK_KAN_CONC
        = 10#mg/mL\\n  FINAL_KAN_CONC = \\\"Kanamycin Concentration (\xB5g/mL)\\\"\\n
        \ STOCK_CHLOR_CONC = 25#mg/mL\\n  FINAL_CHLOR_CONC = \\\"Chloramphenicol Concentration
        (\xB5g/mL)\\\"\\n  \\n  def main\\n\\n    if operations.size != 1\\n      raise
        \\\"Manager Error: this protocol only accepts batches of single operations,
        retry as singleton\\\"\\n    end\\n    operations.retrieve.make\\n    op =
        operations.first\\n    \\n    experimental_plates = op.output_array(\\\"Overnight
        Experimental Prep Plate\\\").map { |fv| fv.collection }\\n    \\n    # dummy_op
        = Operation.find()\\n    \\n    # generate condition list as list of hashes
        using inputs\\n    condition_list = op.input_array(\\\"Culture Condition\\\").map
        do |fv|\\n      # these operations have already been checked for validity
        in precondition\\n      definition_op = FieldValue.find(fv.wires_as_dest.first.from_id).operation\\n
        \     \\n      condition_replicates = []\\n      definition_op.input(\\\"Replicates\\\").val.to_i.times
        do |rep|\\n      \\n          # extract condition definition\\n          ovn_antibiotic
        \ = definition_op.input(\\\"Overnight Antibiotic\\\").val\\n          exp_antibiotic
        \ = definition_op.input(\\\"Experimental Antibiotic\\\").val\\n          media_type
        \     = definition_op.input(\\\"Type of Media\\\").val\\n          inducers
        \       = definition_op.input(\\\"Inducer(s) as  {\\\\\\\"name\\\\\\\": mM_concentration}\\\").val\\n
        \         \\n          # input json turns keys to symbols, we will turn them
        back into strings for consistency\\n          inducers_string_keys = {}\\n
        \         inducers.each do |k, v|\\n            inducers_string_keys[k.to_s]
        = v\\n          end\\n          \\n          # each element of conditions
        is a hash representing the full definition of a well in the exp plate \\n
        \         condition_replicates \\u003c\\u003c {\\n            target_sample:
        \ definition_op.input(\\\"Target Sample\\\").item,\\n            ovn_antibiotic:
        ovn_antibiotic,\\n            exp_antibiotic: exp_antibiotic,\\n            media_type:
        \    media_type,\\n            inducers:       inducers_string_keys\\n          }
        #elements of condition list, mapped from inputs\\n      end\\n      condition_replicates\\n
        \   end\\n    \\n    condition_list.flatten!\\n    \\n    if debug\\n        show
        do\\n            note condition_list.to_json\\n        end\\n    end\\n    \\n
        \   # Sort conditions into Array of 96w Matricies, each matrix element has
        a condition definition hash\\n    # Matricies correspond to output plates\\n
        \   scheme = generate_plate_scheme(condition_list)\\n    \\n    if debug\\n
        \       show do\\n            note scheme.to_json\\n        end\\n    end\\n
        \   \\n    # Bookkeeping and calculations\\n    total_media_hash = Hash.new(0)\\n
        \   experimental_plates.each_with_index do |out_plate, idx|\\n      # Use
        scheme to load up output plates with correct parts and part data associations\\n
        \     condition_layout_mat = scheme[idx]\\n      \\n      item_mat             =
        condition_layout_mat.map { |row| row.map { |col| col[:target_sample] if col
        }}           # Matrix\\u003cItem\\u003e\\n      sample_mat           = condition_layout_mat.map
        { |row| row.map { |col| col[:target_sample].sample.id if col }} # Matrix\\u003cSampleId\\u003e\\n
        \     ovn_antibiotic_mat   = condition_layout_mat.map { |row| row.map { |col|
        col[:ovn_antibiotic] if col }}          # Matrix\\u003cantibiotic name\\u003e\\n
        \     exp_antibiotic_mat   = condition_layout_mat.map { |row| row.map { |col|
        col[:exp_antibiotic] if col }}          # Matrix\\u003cantibiotic name\\u003e\\n
        \     media_type_mat       = condition_layout_mat.map { |row| row.map { |col|
        col[:media_type] if col }}              # Matrix\\u003cmedia name\\u003e\\n
        \     inducer_mat          = condition_layout_mat.map { |row| row.map { |col|
        col[:inducers] if col }}    # Matrix\\u003cHash\\u003cinducer name, inducer
        conc\\u003e\\u003e\\n      \\n      # create all parts for output plate\\n
        \     out_plate.associate_matrix(sample_mat)\\n      \\n      # add associations
        to plate parts\\n      out_plate.set_data_matrix(\\\"Overnight Antibiotic\\\",
        ovn_antibiotic_mat)\\n      out_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",
        exp_antibiotic_mat)\\n      out_plate.set_data_matrix(\\\"Type of Media\\\",
        media_type_mat)\\n      out_plate.set_data_matrix(\\\"Inducers\\\", inducer_mat)\\n
        \     \\n      # add provenance associations to plate parts\\n      record_experimental_plate_provenance(item_mat,
        out_plate)\\n      \\n      \\n      # decide whether to prepare all the media
        needed for a full nc workflow, or only the media needed\\n      # to make
        an experiment ready glycerol stock plate\\n      if op.input(\\\"Prepare Experimental
        Media now?\\\").val == \\\"yes\\\"\\n        calculate_total_media(ovn_antibiotic_mat,
        exp_antibiotic_mat, media_type_mat, total_media_hash, (1000 + 200 + 200 +
        3000))\\n        out_plate.associate(\\\"prepare_media_cookie\\\", \\\"yes\\\")\\n
        \     else\\n        calculate_total_media(ovn_antibiotic_mat, exp_antibiotic_mat,
        media_type_mat, total_media_hash, 1000)\\n      end\\n    end\\n    \\n    #
        make whatever media is needed\\n    make_media_instructions(total_media_hash,
        op)\\n    \\n    # instruct technician to fill plate with media and transfer
        samples to media\\n    experimental_plates.each_with_index do |out_plate,
        idx|\\n      # Use scheme to load up output plates with correct parts and
        part data associations (pretty ugly that we are doing this extraction twice
        over)\\n      condition_layout_mat = scheme[idx]\\n      item_mat             =
        condition_layout_mat.map { |row| row.map { |col| col[:target_sample] if col
        }}           # Matrix\\u003cItem\\u003e\\n      ovn_antibiotic_mat   = condition_layout_mat.map
        { |row| row.map { |col| col[:ovn_antibiotic] if col }}          # Matrix\\u003cantibiotic
        name\\u003e\\n      media_type_mat       = condition_layout_mat.map { |row|
        row.map { |col| col[:media_type] if col }}              # Matrix\\u003cmedia
        name\\u003e\\n\\n      # fill plate wells with correct type of media\\n      fill_plate_with_media(out_plate,
        ovn_antibiotic_mat, media_type_mat)\\n      \\n      # direct technician to
        begin transfer samples and media into output plate, preparing for overnight\\n
        \     sample_transfer(out_plate, item_mat)\\n    end\\n    \\n    # begin
        incubation for all plates\\n    begin_incubation(experimental_plates, op.input(\\\"Temperature
        (\xB0C)\\\").val.to_i)\\n    \\n    operations.store(interactive: false)\\n\\n
        \   {}\\n\\n  end\\n  \\n  # On the output experimental plate, record the
        sources for each part\\n  # as the input item that corresponds to it as defined
        in item layout.\\n  #\\n  # @param out_plate [Item]  output collection, destination
        of transfered samples\\n  #                 for this protocol\\n  # @param
        item_layout [Array\\u003cArray\\u003cItem\\u003e\\u003e]  input items, arranged
        in a matrix\\n  #                 as they will appear in the output collection\\n
        \ def record_experimental_plate_provenance(item_layout, out_plate)\\n    plate_associations
        = AssociationMap.new(out_plate)\\n    item_layout.each_with_index do |row,
        r_idx|\\n      row.each_with_index do |from_item, c_idx|\\n        if from_item
        #note every slot in matrix has a from item\\n            from_associations
        = AssociationMap.new(from_item)\\n            add_provenance({\\n                from:
        from_item, \\n                from_map: from_associations,\\n                to:
        out_plate, \\n                to_coord: [r_idx, c_idx], \\n                to_map:
        plate_associations\\n            })\\n            from_associations.save\\n
        \       end\\n      end\\n    end\\n    plate_associations.save\\n  end\\n
        \ \\n  def sample_transfer(out_plate, item_mat)\\n    #create rclist by item
        for this plate\\n    item_to_coordlist = Hash.new { |h, k| h[k] = [] }\\n
        \   item_mat.each_with_index do |row, r_idx|\\n      row.each_with_index do
        |col, c_idx|\\n        if col\\n            item_to_coordlist[col] \\u003c\\u003c
        [r_idx, c_idx]\\n        end\\n      end\\n    end\\n    \\n    # transfer
        scraping into wells\\n    item_to_coordlist.each do |item, coordlist|\\n      show
        do\\n        title \\\"Filling 96 Deep Well \\u003cb\\u003e#{out_plate.id}
        with Samples\\u003c/b\\u003e\\\"\\n        separator\\n        note \\\"Use
        a pipette tip to scrape out some of #{item} into each of the highlighted wells
        on #{out_plate}\\\"\\n        table highlight_alpha_rc(out_plate, coordlist)
        {|r,c| item.id }\\n      end\\n    end\\n  end\\n  \\n  def begin_incubation(experimental_plates,
        temp)\\n    experimental_plates.each do |plate|\\n      plate.move \\\"#{temp}
        C Shaker incubator\\\"\\n    end\\n    \\n    show do\\n      title \\\"Incubating
        Plates\\\"\\n      note \\\"Move #{experimental_plates.to_sentence} to the
        #{temp}\xB0C incubator and place on shaker - 800rpm.\\\"\\n    end\\n  end\\n
        \ \\n  # Direct tech to aliquot and create antibiotic media\\n  def make_media_instructions(total_media_hash,
        op)\\n    total_media_hash.each do |media, quant|\\n      kan_stk_vol = 0\\n
        \     chlor_stk_vol = 0\\n      (media.include? 'Kan') ? kan_stk_vol = (op.input(FINAL_KAN_CONC).val.to_f
        * (quant))/(STOCK_KAN_CONC*1000) : 0\\n      (media.include? 'Chlor') ? chlor_stk_vol
        = (op.input(FINAL_CHLOR_CONC).val.to_f * (quant))/(STOCK_CHLOR_CONC*1000)
        : 0\\n      show do\\n        if kan_stk_vol == 0 \\u0026\\u0026 chlor_stk_vol
        == 0\\n          title \\\"Aliquoting #{media} Media\\\"\\n          separator\\n
        \         check \\\"In the appropriate container aliquot: \\u003cb\\u003e#{quant.to_f/1000}mL\\u003c/b\\u003e
        of \\u003cb\\u003e#{media} Media\\u003c/b\\u003e\\\"\\n          check \\\"Label,
        date, \\u0026 initial the container: \\u003cb\\u003e#{media} Media\\u003c/b\\u003e\\\"\\n
        \       else\\n          title \\\"Creating Antibiotic Media: #{media}\\\"\\n
        \         separator\\n          check \\\"In the appropriate container aliquot:
        \\u003cb\\u003e#{quant.to_f/1000}mL\\u003c/b\\u003e of \\u003cb\\u003e#{media.split('
        ').first} Media\\u003c/b\\u003e\\\"\\n          check \\\"To that aliquot,
        add \\u003cb\\u003e#{kan_stk_vol}\xB5l\\u003c/b\\u003e of \\u003cb\\u003eKanamycin
        Stock (#{STOCK_KAN_CONC}mg/mL)\\u003c/b\\u003e\\\" if (kan_stk_vol \\u003e
        0)\\n          check \\\"To that aliquot, add \\u003cb\\u003e#{chlor_stk_vol}\xB5l\\u003c/b\\u003e
        of \\u003cb\\u003eChloramphenicol Stock (#{STOCK_CHLOR_CONC}mg/mL)\\u003c/b\\u003e\\\"
        if (chlor_stk_vol \\u003e 0)\\n          check \\\"Label, date, \\u0026 initial
        the container: \\u003cb\\u003e#{media}\\u003c/b\\u003e\\\"\\n        end\\n
        \     end\\n    end\\n  end\\n  \\nend\\n\",\"parent_id\":1498,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:25:17.000-08:00\",\"updated_at\":\"2018-11-07T17:25:17.000-08:00\",\"user_id\":193},{\"id\":90743,\"name\":\"protocol\",\"content\":\"#
        By: Eriberto Lopez\\n# elopez3@uw.edu\\n# 05/30/18\\n# C l\\n\\n# Outline\\n#
        After 5hr incubation sample 4 24 Deep Well plates\\n# Prepare PBS + Kan plate
        for ribosomal arrest - PBS_Kan_Plate #\\n# Sample 24 Deep wells and transfer
        to PBS_Kan_Plate\\n# PBS_Kan_Plate - Measure OD \\u0026 GFP\\n# Incubate for
        1hr - may be able to keep overnight and run flow in the morning\\n# Prepare
        RNAprotect plate (RNAlater)\\n# Spin down plates, aspirate supernatant, and
        resuspend pellet in 1mL of PBS in order to transfer to RNA protect plate\\n#
        store RNA plate in -80C freezer for downstream processing\\n\\nneeds \\\"Standard
        Libs/Debug\\\"\\nneeds \\\"YG_Harmonization/Upload_PlateReader_Data\\\"\\nneeds
        \\\"YG_Harmonization/PlateReaderMethods\\\"\\nneeds \\\"Tissue Culture Libs/CollectionDisplay\\\"\\nneeds
        \\\"Induction - High Throughput/NovelChassisLib\\\" # Temporary EL\\n# needs
        \\\"Plate Reader Lib/PlateReaderHelper\\\"\\nneeds \\\"Induction - High Throughput/HighThroughputHelper\\\"\\n\\nclass
        Protocol\\n    \\n    include Debug\\n    include Upload_PlateReader_Data\\n
        \   include PlateReaderMethods\\n    include CollectionDisplay\\n    include
        NovelChassisLib\\n    # include PlateReaderHelper\\n    include HighThroughputHelper\\n
        \   \\n    #I/O\\n    INPUT = \\\"24 Deep Wells\\\"\\n    OUT_FC_PLT = \\\"Flow
        Cytometry Plate\\\"\\n    OUT_PLT_RDR_PLT = \\\"Plate Reader Plate\\\"\\n
        \   OUT_RNA_PLT = \\\"RNA Prep Plate\\\"\\n    \\n    # Constants\\n    FC_PLT_TRANSFER_VOL
        = 20#l\\n    PLT_RDR_PLT_TRANSERFER_VOL = 300#l\\n\\n\\n    def main\\n        \\n
        \       operations.make # Creates output plates\\n        \\n        intro()\\n
        \       \\n        operations.each { |op|\\n            # gather_materials(op)\\n
        \           \\n            # Piecing together matricies that were previously
        sliced up and associate to 24 Wells\\n            if debug\\n                p1
        = Collection.find(271333)\\n                p2 = Collection.find(271334)\\n
        \               p3 = Collection.find(271335)\\n                p4 = Collection.find(271336)\\n
        \               input_item_arr = [p1,p2,p3,p4]\\n            else\\n                input_item_arr
        = op.input_array(INPUT).collections\\n            end\\n            \\n            #
        from the associated matricies of the input 24 Wells piece together a new 96
        Well matrix\\n            transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out = transferring_24s_to_96_matricies(input_item_arr)\\n
        \           \\n            # Prep FC Plate - returns collection\\n            out_fc_plt
        = prepare_flow_cytometry_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Prepare Plate Reader Plate - returns collection\\n            plate_reader_plate
        = prepare_plate_reader_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Prepare RNA Plate - returns collection\\n            rna_plate
        = prepare_rna_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Grab 24 Deep Wells from Incubator shaker\\n            take
        input_item_arr, interactive: true\\n            \\n            # Transfer
        cultures from 24 Deep wells to FC flat bottom plate \\u0026 plate reader plate\\n
        \           coordinates_96 = ('A'..'H').to_a.map {|row| (1..12).to_a.map {|col|
        row + col.to_s}} # 96 Well coordinate map\\n            count = 0\\n            spin_down_plates
        = []\\n            input_item_arr.each do |plt|\\n                # find the
        rc_list from where the deep well transfer coords match the coordinates_96\\n
        \               display_rc_list = []\\n                deep_well_transfer_coords
        = plt.get('deep_well_transfer_coords') # Contains coords like: \\\"A1\\\",
        \\\"A2\\\"...\\n                deep_well_transfer_coords.flatten.each do
        |coord|\\n                    coordinates_96.map.each_with_index do |row,
        r_idx|\\n                        col_idx = row.each_index.select {|well| row[well]
        == coord}\\n                        col_idx.each {|c_idx| display_rc_list.push([r_idx,
        c_idx])}\\n                    end\\n                end\\n                \\n
        \               show do\\n                    title \\\"Transferring Culture
        to Output Plates\\\"\\n                    separator\\n                    note
        \\\"Follow the table below to transfer culture from the 24 Deep Well Plate
        #{plt.id} to Plate #{out_fc_plt.id} \\u0026 Plate #{plate_reader_plate.id}\\\"\\n
        \                   check \\\"To plate \\u003cb\\u003e#{out_fc_plt.id}\\u003c/b\\u003e
        transfer \\u003cb\\u003e#{FC_PLT_TRANSFER_VOL}l\\u003c/b\\u003e\\\"\\n                    check
        \\\"To plate \\u003cb\\u003e#{plate_reader_plate.id}\\u003c/b\\u003e transfer
        \\u003cb\\u003e#{PLT_RDR_PLT_TRANSERFER_VOL}l\\u003c/b\\u003e\\\"\\n                    if
        debug\\n                        collection = Collection.find(271292)\\n                    else\\n
        \                       collection = out_fc_plt # This is just for displaying
        both out_fc_plt and plate_reader_plate should have the same matricies associated
        in the same layout\\n                    end\\n                    bullet
        \\\"\\u003cb\\u003eCoordinates correspond to the wells in plate #{plt.id}\\u003c/b\\u003e\\\"\\n
        \                   table highlight_rc(collection, display_rc_list) {|r,c|
        \\\"#{coordinates_24(r, c)}\\\"}\\n                end\\n                count
        += 1\\n                spin_down_plates.push(plt.id)\\n                if
        count % 2 == 0 # Spin down every pair of 24DW plates in order to balance centrifuge\\n
        \                   show {\\n                        title \\\"Spin Down 24
        Deep Well Plates\\\"\\n                        separator\\n                        note
        \\\"Use the large centrifuge to spin down deep well plates\\\"\\n                        check
        \\\"Centrifuge plates \\u003cb\\u003e#{spin_down_plates.flatten}\\u003c/b\\u003e
        at \\u003cb\\u003e4C, 4000rpm, for 10 mins\\u003c/b\\u003e\\\"\\n                        note
        \\\"Once plates are finished being centrifuged aspirate supernatant without
        disturbing the cell pellets.\\\"\\n                        bullet \\\"Continue
        on to the next step once plates are being centrifuged.\\\"\\n                    }\\n
        \                   spin_down_plates = []\\n                end\\n            end\\n
        \           \\n            # Once 24 Deep wells have been spun down and supernatant
        has been removed\\n            input_item_arr.each do |plt|\\n                #
        find the rc_list from where the deep well transfer coords match the coordinates_96\\n
        \               display_rc_list = []\\n                deep_well_transfer_coords
        = plt.get('deep_well_transfer_coords') # Contains coords like: \\\"A1\\\",
        \\\"A2\\\"...\\n                deep_well_transfer_coords.flatten.each do
        |coord|\\n                    coordinates_96.map.each_with_index do |row,
        r_idx|\\n                        col_idx = row.each_index.select {|well| row[well]
        == coord}\\n                        col_idx.each {|c_idx| display_rc_list.push([r_idx,
        c_idx])}\\n                    end\\n                end\\n                \\n
        \               show do\\n                    title \\\"Resuspending Cell
        Pellets\\\"\\n                    separator\\n                    check \\\"To
        each well in Plate \\u003cb\\u003e#{plt.id}\\u003c/b\\u003e resuspend cell
        pellet in \\u003cb\\u003e0.5mL\\u003c/b\\u003e of \\u003cb\\u003eRNAlater
        Soln\\u003c/b\\u003e\\\"\\n                    note \\\"Next, transfer resuspended
        cell pellet from Plate \\u003cb\\u003e#{plt.id}\\u003c/b\\u003e to Plate \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e\\\"\\n
        \                   note \\\"Follow the table below to transfer culture from
        the 24 Deep Well plate to Plate #{rna_plate.id}\\\"\\n                    if
        debug\\n                        collection = Collection.find(271292)\\n                    else\\n
        \                       collection = out_fc_plt # This is just for displaying\\n
        \                   end\\n                    bullet \\\"\\u003cb\\u003eCoordinates
        correspond to the wells in plate #{plt.id}\\u003c/b\\u003e\\\"\\n                    table
        highlight_rc(collection, display_rc_list) {|r,c| \\\"#{coordinates_24(r, c)}\\\"}\\n
        \               end\\n            end            \\n            # Once RNA
        plate has been filled, centrifuge once more to remove supernatant\\n            show
        {\\n                title \\\"Collecting Cell Pellets\\\"\\n                separator\\n
        \               note \\\"Once all cell pellets have been resuspended and collected
        on to Plate #{rna_plate.id}\\\"\\n                check \\\"Centrifuge Plate
        \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e at \\u003cb\\u003e4C, 4000rpm,
        for 10 mins\\u003c/b\\u003e\\\"\\n                check \\\"Once done, remove
        supernatant, seal with aluminumn foil cover, and place in the -80C freezer.\\\"\\n
        \               rna_plate.location = \\\" -80C freezer\\\"\\n                rna_plate.save\\n
        \           }\\n        }\\n        \\n        cleaning_up()\\n        \\n
        \   end # Main\\n\\n\\n    def intro()\\n        show {\\n            title
        \\\"Introduction - High Throughput Sampling \\u0026 Harvesting\\\"\\n            separator\\n
        \           note \\\"In this protocol you will be sampling and harvesting
        cultures for measurements and downstream processing.\\\"\\n            note
        \\\"\\u003cb\\u003e1.\\u003c/b\\u003e Sample each culture and arrest ribosomal
        function with Kanamycin\\\"\\n            note \\\"\\u003cb\\u003e2.\\u003c/b\\u003e
        Measure OD \\u0026 GFP\\\"\\n            note \\\"\\u003cb\\u003e3.\\u003c/b\\u003e
        Harvest cells for RNA Sequencing.\\\"\\n        }\\n    end\\n    \\n    def
        gather_materials(op)\\n        show {            transfer_coordinates = build_96_matrix(deep_well_transfer_coords,
        display_rc_list)\\n\\n            title \\\"Gather Materials\\\"\\n            separator\\n
        \           check \\\"Set large centrifuge to 4C\\\"\\n            check \\\"In
        an appropriate container, aliquot \\u003cb\\u003e12.8mL\\u003c/b\\u003e of
        PBS \\u0026 label: \\u003cb\\u003ePBS+Kan\\u003c/b\\u003e\\\"\\n            bullet
        \\\"To the PBS add \\u003cb\\u003e3.2mL\\u003c/b\\u003e of Kan Stock Solution
        (10mg/mL)\\\"\\n            check \\\"Gather \\u003cb\\u003e2\\u003c/b\\u003e
        96 Well Flat Bottom (black) plate(s)\\\"\\n            check \\\"Gather \\u003cb\\u003e1\\u003c/b\\u003e
        96 Deep Well plate(s)\\\"\\n            check \\\"In an appropriate container,
        aliquot \\u003cb\\u003e15mL\\u003c/b\\u003e of \\u003cb\\u003eM9\\u003c/b\\u003e
        media \\u0026 label: \\u003cb\\u003eRNAlater Soln\\u003c/b\\u003e\\\"\\n            bullet
        \\\"To that media, add \\u003cb\\u003e30mL\\u003c/b\\u003e of \\u003cb\\u003eRNAlater\\u003c/b\\u003e\\\"\\n
        \       }\\n    end\\n    def cleaning_up()\\n        show{\\n            title
        \\\"Cleaning Up...\\\"\\n            separator\\n            check \\\"Before
        ending the protocol, clean up bench and other instruments used\\\"\\n            check
        \\\"Make sure that the centrifuge temperature is placed back to room temperature\\\"\\n
        \       }\\n    end\\n    \\n    def prepare_flow_cytometry_plate(op, transfer_coordinates,
        experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n
        \       out_fc_plt = op.output(OUT_FC_PLT).collection\\n        \\n        #
        Associate to output FC plate\\n        out_fc_plt.matrix = sample_id_matrix_out\\n
        \       out_fc_plt.save\\n\\n        out_fc_plt.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       out_fc_plt.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       out_fc_plt.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       out_fc_plt.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n
        \       \\n        show {\\n            title \\\"Preparing Flow Cytometry
        Measurement Plate\\\"\\n            separator\\n            check \\\"Gather
        a 96 Flat Bottom (black) plate\\\"\\n            check \\\"Label Plate \\u003cb\\u003e#{out_fc_plt.id}\\u003c/b\\u003e\\\"\\n
        \           bullet \\\"Continue to the next step when ready\\\"\\n        }\\n
        \       show {\\n            title \\\"Preparing Flow Cytometry Measurement
        Plate\\\"\\n            separator\\n            note \\\"The PBS+Kan Solution
        will arrest ribosomal transcription\\\"\\n            check \\\"Gather a multichannel
        resivior for \\u003cb\\u003ePBS+Kan Solution\\u003c/b\\u003e\\\"\\n            note
        \\\"Follow the table below to fill plate the appropriate wells with \\u003cb\\u003ePBS+Kan\\u003c/b\\u003e\\\"\\n
        \           table highlight_non_empty(out_fc_plt) {|r,c| '180l'}\\n        }\\n
        \       return out_fc_plt\\n    end\\n    \\n    def prepare_plate_reader_plate(op,
        transfer_coordinates, experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96,
        sample_id_matrix_out)\\n        plate_reader_plate = op.output(OUT_PLT_RDR_PLT).collection\\n
        \       \\n        # Associate to output plate reader plate\\n        plate_reader_plate.matrix
        = sample_id_matrix_out\\n        plate_reader_plate.save\\n        plate_reader_plate.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n
        \       \\n        show {\\n            title \\\"Preparing Plate Reader Measurement
        Plate\\\"\\n            separator\\n            check \\\"Gather a 96 Flat
        Bottom (black) plate\\\"\\n            check \\\"Label Plate \\u003cb\\u003e#{plate_reader_plate.id}\\u003c/b\\u003e\\\"\\n
        \           bullet \\\"Continue on the the next step to fill with culture.\\\"\\n
        \       }\\n        return plate_reader_plate\\n    end\\n    \\n    def prepare_rna_plate(op,
        transfer_coordinates, experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96,
        sample_id_matrix_out)\\n        rna_plate = op.output(OUT_RNA_PLT).collection\\n
        \       \\n        show do\\n            note rna_plate.to_s\\n        end\\n
        \       \\n        rna_plate.matrix = sample_id_matrix_out\\n        rna_plate.save\\n
        \       rna_plate.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       rna_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       rna_plate.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       rna_plate.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n        \\n
        \       show {\\n            title \\\"Preparing RNA Prep Plate\\\"\\n            separator\\n
        \           check \\\"Gather a eppendorf 96 deep well plate\\\"\\n            check
        \\\"Label plate \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e\\\"\\n            bullet
        \\\"Continue on to the next step to fill with culture.\\\"\\n        }\\n
        \       return rna_plate\\n    end\\n    \\n    def coordinates_24(row, col)\\n
        \       r = transfer_24_to_96_row(row)\\n        c = transfer_24_to_96_col(col)\\n
        \       coordinates_24 = ('A'..'D').to_a.map {|row| (1..6).to_a.map {|col|
        row + col.to_s}} # 96 Well coordinate map\\n        return coordinates_24[r][c]\\n
        \   end\\n    \\n    def transfer_24_to_96_row(row)\\n        arr = [1, 3,
        5, 7]\\n        if arr.include? row\\n            row = arr.find_index(row)\\n
        \       else\\n            arr = [0, 2, 4, 6]\\n            row = arr.find_index(row)\\n
        \       end\\n        \\n        # arr = (arr.include? row) ? arr : arr =
        [0, 2, 4, 6]\\n        # row = arr.find_index(row)\\n        return row\\n
        \   end\\n    \\n    def transfer_24_to_96_col(col)\\n        if col \\u003e
        5\\n            col = col - 6\\n        else\\n            col\\n        end\\n
        \       return col\\n    end\\n    \\n    \\n    def transferring_24s_to_96_matricies(input_arr)\\n
        \       # Empty 96 well dimesion matricies\\n        transfer_coordinates
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        experimental_anti_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        media_type_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        inducer_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        sample_id_matrix_out
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        \\n        #
        96 Well coordinate map\\n        coordinates_96 = ('A'..'H').to_a.map {|row|
        (1..12).to_a.map {|col| row + col.to_s}}\\n        \\n        # For each input
        plate get its associate matricies and place into appropriate empty 96 well
        matrix\\n        input_arr.each do |plt|\\n            \\n            # find
        the rc_list from where the deep well transfer coords match the coordinates_96\\n
        \           display_rc_list = []\\n            deep_well_transfer_coords =
        plt.data_matrix_values('deep_well_transfer_coords') # Contains coords like:
        \\\"A1\\\", \\\"A2\\\"...\\n            deep_well_transfer_coords.flatten.each
        do |coord|\\n                coordinates_96.map.each_with_index do |row, r_idx|\\n
        \                   col_idx = row.each_index.select {|well| row[well] == coord}\\n
        \                   col_idx.each {|c_idx| display_rc_list.push([r_idx, c_idx])}\\n
        \               end\\n            end\\n            \\n            \\n            #
        Use display_rc_list to place information into the appropriate well\\n            transfer_coordinates
        = build_96_matrix(deep_well_transfer_coords, display_rc_list)\\n            \\n
        \           # Use display_rc_list to place correct media info into the correct
        well\\n            experimental_anti_mat       = plt.data_matrix_values('Experimental
        Antibiotics')\\n            experimental_anti_matrix_96 = build_96_matrix(experimental_anti_mat,
        display_rc_list)\\n            \\n            media_type_mat              =
        plt.data_matrix_values(\\\"Type of Media\\\")\\n            media_type_matrix_96
        \       = build_96_matrix(media_type_mat, display_rc_list)\\n            \\n
        \           inducer_mat                 = plt.data_matrix_values(\\\"Inducers\\\")\\n
        \           inducer_matrix_96           = build_96_matrix(inducer_mat, display_rc_list)\\n
        \           \\n            # Use display_rc_list to place correct sample_id/strain
        info into the correct well\\n            sample_id_mat = Collection.find(plt.id).matrix\\n
        \           sample_id_matrix_out = build_96_matrix(sample_id_mat, display_rc_list)\\n
        \       end\\n        return [transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out]\\n    end\\n\\n
        \   def build_96_matrix(matrix, rc_list)\\n        matrix_96 = (0..7).to_a.map
        {|row| (0..11).to_a.map {|col| -1}}\\n        matrix.flatten.each_with_index
        { |coord, idx|\\n            r, c = rc_list[idx]\\n            (coord.nil?)
        ? matrix_96[r][c] = -1 : matrix_96[r][c] = coord\\n        }\\n        return
        matrix_96\\n    end\\n\\nend # Class\\n\\n\",\"parent_id\":1516,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:16:08.000-08:00\",\"updated_at\":\"2018-11-07T17:16:08.000-08:00\",\"user_id\":193},{\"id\":90742,\"name\":\"protocol\",\"content\":\"#
        By: Eriberto Lopez\\n# elopez3@uw.edu\\n# 05/30/18\\n# C l\\n\\n# Outline\\n#
        After 5hr incubation sample 4 24 Deep Well plates\\n# Prepare PBS + Kan plate
        for ribosomal arrest - PBS_Kan_Plate #\\n# Sample 24 Deep wells and transfer
        to PBS_Kan_Plate\\n# PBS_Kan_Plate - Measure OD \\u0026 GFP\\n# Incubate for
        1hr - may be able to keep overnight and run flow in the morning\\n# Prepare
        RNAprotect plate (RNAlater)\\n# Spin down plates, aspirate supernatant, and
        resuspend pellet in 1mL of PBS in order to transfer to RNA protect plate\\n#
        store RNA plate in -80C freezer for downstream processing\\n\\nneeds \\\"Standard
        Libs/Debug\\\"\\nneeds \\\"YG_Harmonization/Upload_PlateReader_Data\\\"\\nneeds
        \\\"YG_Harmonization/PlateReaderMethods\\\"\\nneeds \\\"Tissue Culture Libs/CollectionDisplay\\\"\\nneeds
        \\\"Induction - High Throughput/NovelChassisLib\\\" # Temporary EL\\n# needs
        \\\"Plate Reader Lib/PlateReaderHelper\\\"\\nneeds \\\"Induction - High Throughput/HighThroughputHelper\\\"\\n\\nclass
        Protocol\\n    \\n    include Debug\\n    include Upload_PlateReader_Data\\n
        \   include PlateReaderMethods\\n    include CollectionDisplay\\n    include
        NovelChassisLib\\n    # include PlateReaderHelper\\n    include HighThroughputHelper\\n
        \   \\n    #I/O\\n    INPUT = \\\"24 Deep Wells\\\"\\n    OUT_FC_PLT = \\\"Flow
        Cytometry Plate\\\"\\n    OUT_PLT_RDR_PLT = \\\"Plate Reader Plate\\\"\\n
        \   OUT_RNA_PLT = \\\"\\\"\\n    \\n    # Constants\\n    FC_PLT_TRANSFER_VOL
        = 20#l\\n    PLT_RDR_PLT_TRANSERFER_VOL = 300#l\\n\\n\\n    def main\\n        \\n
        \       operations.make # Creates output plates\\n        \\n        intro()\\n
        \       \\n        operations.each { |op|\\n            # gather_materials(op)\\n
        \           \\n            # Piecing together matricies that were previously
        sliced up and associate to 24 Wells\\n            if debug\\n                p1
        = Collection.find(271333)\\n                p2 = Collection.find(271334)\\n
        \               p3 = Collection.find(271335)\\n                p4 = Collection.find(271336)\\n
        \               input_item_arr = [p1,p2,p3,p4]\\n            else\\n                input_item_arr
        = op.input_array(INPUT).collections\\n            end\\n            \\n            #
        from the associated matricies of the input 24 Wells piece together a new 96
        Well matrix\\n            transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out = transferring_24s_to_96_matricies(input_item_arr)\\n
        \           \\n            # Prep FC Plate - returns collection\\n            out_fc_plt
        = prepare_flow_cytometry_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Prepare Plate Reader Plate - returns collection\\n            plate_reader_plate
        = prepare_plate_reader_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Prepare RNA Plate - returns collection\\n            rna_plate
        = prepare_rna_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Grab 24 Deep Wells from Incubator shaker\\n            take
        input_item_arr, interactive: true\\n            \\n            # Transfer
        cultures from 24 Deep wells to FC flat bottom plate \\u0026 plate reader plate\\n
        \           coordinates_96 = ('A'..'H').to_a.map {|row| (1..12).to_a.map {|col|
        row + col.to_s}} # 96 Well coordinate map\\n            count = 0\\n            spin_down_plates
        = []\\n            input_item_arr.each do |plt|\\n                # find the
        rc_list from where the deep well transfer coords match the coordinates_96\\n
        \               display_rc_list = []\\n                deep_well_transfer_coords
        = plt.get('deep_well_transfer_coords') # Contains coords like: \\\"A1\\\",
        \\\"A2\\\"...\\n                deep_well_transfer_coords.flatten.each do
        |coord|\\n                    coordinates_96.map.each_with_index do |row,
        r_idx|\\n                        col_idx = row.each_index.select {|well| row[well]
        == coord}\\n                        col_idx.each {|c_idx| display_rc_list.push([r_idx,
        c_idx])}\\n                    end\\n                end\\n                \\n
        \               show do\\n                    title \\\"Transferring Culture
        to Output Plates\\\"\\n                    separator\\n                    note
        \\\"Follow the table below to transfer culture from the 24 Deep Well Plate
        #{plt.id} to Plate #{out_fc_plt.id} \\u0026 Plate #{plate_reader_plate.id}\\\"\\n
        \                   check \\\"To plate \\u003cb\\u003e#{out_fc_plt.id}\\u003c/b\\u003e
        transfer \\u003cb\\u003e#{FC_PLT_TRANSFER_VOL}l\\u003c/b\\u003e\\\"\\n                    check
        \\\"To plate \\u003cb\\u003e#{plate_reader_plate.id}\\u003c/b\\u003e transfer
        \\u003cb\\u003e#{PLT_RDR_PLT_TRANSERFER_VOL}l\\u003c/b\\u003e\\\"\\n                    if
        debug\\n                        collection = Collection.find(271292)\\n                    else\\n
        \                       collection = out_fc_plt # This is just for displaying
        both out_fc_plt and plate_reader_plate should have the same matricies associated
        in the same layout\\n                    end\\n                    bullet
        \\\"\\u003cb\\u003eCoordinates correspond to the wells in plate #{plt.id}\\u003c/b\\u003e\\\"\\n
        \                   table highlight_rc(collection, display_rc_list) {|r,c|
        \\\"#{coordinates_24(r, c)}\\\"}\\n                end\\n                count
        += 1\\n                spin_down_plates.push(plt.id)\\n                if
        count % 2 == 0 # Spin down every pair of 24DW plates in order to balance centrifuge\\n
        \                   show {\\n                        title \\\"Spin Down 24
        Deep Well Plates\\\"\\n                        separator\\n                        note
        \\\"Use the large centrifuge to spin down deep well plates\\\"\\n                        check
        \\\"Centrifuge plates \\u003cb\\u003e#{spin_down_plates.flatten}\\u003c/b\\u003e
        at \\u003cb\\u003e4C, 4000rpm, for 10 mins\\u003c/b\\u003e\\\"\\n                        note
        \\\"Once plates are finished being centrifuged aspirate supernatant without
        disturbing the cell pellets.\\\"\\n                        bullet \\\"Continue
        on to the next step once plates are being centrifuged.\\\"\\n                    }\\n
        \                   spin_down_plates = []\\n                end\\n            end\\n
        \           \\n            # Once 24 Deep wells have been spun down and supernatant
        has been removed\\n            input_item_arr.each do |plt|\\n                #
        find the rc_list from where the deep well transfer coords match the coordinates_96\\n
        \               display_rc_list = []\\n                deep_well_transfer_coords
        = plt.get('deep_well_transfer_coords') # Contains coords like: \\\"A1\\\",
        \\\"A2\\\"...\\n                deep_well_transfer_coords.flatten.each do
        |coord|\\n                    coordinates_96.map.each_with_index do |row,
        r_idx|\\n                        col_idx = row.each_index.select {|well| row[well]
        == coord}\\n                        col_idx.each {|c_idx| display_rc_list.push([r_idx,
        c_idx])}\\n                    end\\n                end\\n                \\n
        \               show do\\n                    title \\\"Resuspending Cell
        Pellets\\\"\\n                    separator\\n                    check \\\"To
        each well in Plate \\u003cb\\u003e#{plt.id}\\u003c/b\\u003e resuspend cell
        pellet in \\u003cb\\u003e0.5mL\\u003c/b\\u003e of \\u003cb\\u003eRNAlater
        Soln\\u003c/b\\u003e\\\"\\n                    note \\\"Next, transfer resuspended
        cell pellet from Plate \\u003cb\\u003e#{plt.id}\\u003c/b\\u003e to Plate \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e\\\"\\n
        \                   note \\\"Follow the table below to transfer culture from
        the 24 Deep Well plate to Plate #{rna_plate.id}\\\"\\n                    if
        debug\\n                        collection = Collection.find(271292)\\n                    else\\n
        \                       collection = out_fc_plt # This is just for displaying\\n
        \                   end\\n                    bullet \\\"\\u003cb\\u003eCoordinates
        correspond to the wells in plate #{plt.id}\\u003c/b\\u003e\\\"\\n                    table
        highlight_rc(collection, display_rc_list) {|r,c| \\\"#{coordinates_24(r, c)}\\\"}\\n
        \               end\\n            end            \\n            # Once RNA
        plate has been filled, centrifuge once more to remove supernatant\\n            show
        {\\n                title \\\"Collecting Cell Pellets\\\"\\n                separator\\n
        \               note \\\"Once all cell pellets have been resuspended and collected
        on to Plate #{rna_plate.id}\\\"\\n                check \\\"Centrifuge Plate
        \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e at \\u003cb\\u003e4C, 4000rpm,
        for 10 mins\\u003c/b\\u003e\\\"\\n                check \\\"Once done, remove
        supernatant, seal with aluminumn foil cover, and place in the -80C freezer.\\\"\\n
        \               rna_plate.location = \\\" -80C freezer\\\"\\n                rna_plate.save\\n
        \           }\\n        }\\n        \\n        cleaning_up()\\n        \\n
        \   end # Main\\n\\n\\n    def intro()\\n        show {\\n            title
        \\\"Introduction - High Throughput Sampling \\u0026 Harvesting\\\"\\n            separator\\n
        \           note \\\"In this protocol you will be sampling and harvesting
        cultures for measurements and downstream processing.\\\"\\n            note
        \\\"\\u003cb\\u003e1.\\u003c/b\\u003e Sample each culture and arrest ribosomal
        function with Kanamycin\\\"\\n            note \\\"\\u003cb\\u003e2.\\u003c/b\\u003e
        Measure OD \\u0026 GFP\\\"\\n            note \\\"\\u003cb\\u003e3.\\u003c/b\\u003e
        Harvest cells for RNA Sequencing.\\\"\\n        }\\n    end\\n    \\n    def
        gather_materials(op)\\n        show {            transfer_coordinates = build_96_matrix(deep_well_transfer_coords,
        display_rc_list)\\n\\n            title \\\"Gather Materials\\\"\\n            separator\\n
        \           check \\\"Set large centrifuge to 4C\\\"\\n            check \\\"In
        an appropriate container, aliquot \\u003cb\\u003e12.8mL\\u003c/b\\u003e of
        PBS \\u0026 label: \\u003cb\\u003ePBS+Kan\\u003c/b\\u003e\\\"\\n            bullet
        \\\"To the PBS add \\u003cb\\u003e3.2mL\\u003c/b\\u003e of Kan Stock Solution
        (10mg/mL)\\\"\\n            check \\\"Gather \\u003cb\\u003e2\\u003c/b\\u003e
        96 Well Flat Bottom (black) plate(s)\\\"\\n            check \\\"Gather \\u003cb\\u003e1\\u003c/b\\u003e
        96 Deep Well plate(s)\\\"\\n            check \\\"In an appropriate container,
        aliquot \\u003cb\\u003e15mL\\u003c/b\\u003e of \\u003cb\\u003eM9\\u003c/b\\u003e
        media \\u0026 label: \\u003cb\\u003eRNAlater Soln\\u003c/b\\u003e\\\"\\n            bullet
        \\\"To that media, add \\u003cb\\u003e30mL\\u003c/b\\u003e of \\u003cb\\u003eRNAlater\\u003c/b\\u003e\\\"\\n
        \       }\\n    end\\n    def cleaning_up()\\n        show{\\n            title
        \\\"Cleaning Up...\\\"\\n            separator\\n            check \\\"Before
        ending the protocol, clean up bench and other instruments used\\\"\\n            check
        \\\"Make sure that the centrifuge temperature is placed back to room temperature\\\"\\n
        \       }\\n    end\\n    \\n    def prepare_flow_cytometry_plate(op, transfer_coordinates,
        experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n
        \       out_fc_plt = op.output(OUT_FC_PLT).collection\\n        \\n        #
        Associate to output FC plate\\n        out_fc_plt.matrix = sample_id_matrix_out\\n
        \       out_fc_plt.save\\n\\n        out_fc_plt.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       out_fc_plt.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       out_fc_plt.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       out_fc_plt.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n
        \       \\n        show {\\n            title \\\"Preparing Flow Cytometry
        Measurement Plate\\\"\\n            separator\\n            check \\\"Gather
        a 96 Flat Bottom (black) plate\\\"\\n            check \\\"Label Plate \\u003cb\\u003e#{out_fc_plt.id}\\u003c/b\\u003e\\\"\\n
        \           bullet \\\"Continue to the next step when ready\\\"\\n        }\\n
        \       show {\\n            title \\\"Preparing Flow Cytometry Measurement
        Plate\\\"\\n            separator\\n            note \\\"The PBS+Kan Solution
        will arrest ribosomal transcription\\\"\\n            check \\\"Gather a multichannel
        resivior for \\u003cb\\u003ePBS+Kan Solution\\u003c/b\\u003e\\\"\\n            note
        \\\"Follow the table below to fill plate the appropriate wells with \\u003cb\\u003ePBS+Kan\\u003c/b\\u003e\\\"\\n
        \           table highlight_non_empty(out_fc_plt) {|r,c| '180l'}\\n        }\\n
        \       return out_fc_plt\\n    end\\n    \\n    def prepare_plate_reader_plate(op,
        transfer_coordinates, experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96,
        sample_id_matrix_out)\\n        plate_reader_plate = op.output(OUT_PLT_RDR_PLT).collection\\n
        \       \\n        # Associate to output plate reader plate\\n        plate_reader_plate.matrix
        = sample_id_matrix_out\\n        plate_reader_plate.save\\n        plate_reader_plate.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n
        \       \\n        show {\\n            title \\\"Preparing Plate Reader Measurement
        Plate\\\"\\n            separator\\n            check \\\"Gather a 96 Flat
        Bottom (black) plate\\\"\\n            check \\\"Label Plate \\u003cb\\u003e#{plate_reader_plate.id}\\u003c/b\\u003e\\\"\\n
        \           bullet \\\"Continue on the the next step to fill with culture.\\\"\\n
        \       }\\n        return plate_reader_plate\\n    end\\n    \\n    def prepare_rna_plate(op,
        transfer_coordinates, experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96,
        sample_id_matrix_out)\\n        rna_plate = op.output(OUT_RNA_PLT).collection\\n
        \       \\n        rna_plate.matrix = sample_id_matrix_out\\n        rna_plate.save\\n
        \       rna_plate.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       rna_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       rna_plate.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       rna_plate.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n        \\n
        \       show {\\n            title \\\"Preparing RNA Prep Plate\\\"\\n            separator\\n
        \           check \\\"Gather a eppendorf 96 deep well plate\\\"\\n            check
        \\\"Label plate \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e\\\"\\n            bullet
        \\\"Continue on to the next step to fill with culture.\\\"\\n        }\\n
        \       return rna_plate\\n    end\\n    \\n    def coordinates_24(row, col)\\n
        \       r = transfer_24_to_96_row(row)\\n        c = transfer_24_to_96_col(col)\\n
        \       coordinates_24 = ('A'..'D').to_a.map {|row| (1..6).to_a.map {|col|
        row + col.to_s}} # 96 Well coordinate map\\n        return coordinates_24[r][c]\\n
        \   end\\n    \\n    def transfer_24_to_96_row(row)\\n        arr = [1, 3,
        5, 7]\\n        if arr.include? row\\n            row = arr.find_index(row)\\n
        \       else\\n            arr = [0, 2, 4, 6]\\n            row = arr.find_index(row)\\n
        \       end\\n        \\n        # arr = (arr.include? row) ? arr : arr =
        [0, 2, 4, 6]\\n        # row = arr.find_index(row)\\n        return row\\n
        \   end\\n    \\n    def transfer_24_to_96_col(col)\\n        if col \\u003e
        5\\n            col = col - 6\\n        else\\n            col\\n        end\\n
        \       return col\\n    end\\n    \\n    \\n    def transferring_24s_to_96_matricies(input_arr)\\n
        \       # Empty 96 well dimesion matricies\\n        transfer_coordinates
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        experimental_anti_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        media_type_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        inducer_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        sample_id_matrix_out
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        \\n        #
        96 Well coordinate map\\n        coordinates_96 = ('A'..'H').to_a.map {|row|
        (1..12).to_a.map {|col| row + col.to_s}}\\n        \\n        # For each input
        plate get its associate matricies and place into appropriate empty 96 well
        matrix\\n        input_arr.each do |plt|\\n            \\n            # find
        the rc_list from where the deep well transfer coords match the coordinates_96\\n
        \           display_rc_list = []\\n            deep_well_transfer_coords =
        plt.data_matrix_values('deep_well_transfer_coords') # Contains coords like:
        \\\"A1\\\", \\\"A2\\\"...\\n            deep_well_transfer_coords.flatten.each
        do |coord|\\n                coordinates_96.map.each_with_index do |row, r_idx|\\n
        \                   col_idx = row.each_index.select {|well| row[well] == coord}\\n
        \                   col_idx.each {|c_idx| display_rc_list.push([r_idx, c_idx])}\\n
        \               end\\n            end\\n            \\n            \\n            #
        Use display_rc_list to place information into the appropriate well\\n            transfer_coordinates
        = build_96_matrix(deep_well_transfer_coords, display_rc_list)\\n            \\n
        \           # Use display_rc_list to place correct media info into the correct
        well\\n            experimental_anti_mat       = plt.data_matrix_values('Experimental
        Antibiotics')\\n            experimental_anti_matrix_96 = build_96_matrix(experimental_anti_mat,
        display_rc_list)\\n            \\n            media_type_mat              =
        plt.data_matrix_values(\\\"Type of Media\\\")\\n            media_type_matrix_96
        \       = build_96_matrix(media_type_mat, display_rc_list)\\n            \\n
        \           inducer_mat                 = plt.data_matrix_values(\\\"Inducers\\\")\\n
        \           inducer_matrix_96           = build_96_matrix(inducer_mat, display_rc_list)\\n
        \           \\n            # Use display_rc_list to place correct sample_id/strain
        info into the correct well\\n            sample_id_mat = Collection.find(plt.id).matrix\\n
        \           sample_id_matrix_out = build_96_matrix(sample_id_mat, display_rc_list)\\n
        \       end\\n        return [transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out]\\n    end\\n\\n
        \   def build_96_matrix(matrix, rc_list)\\n        matrix_96 = (0..7).to_a.map
        {|row| (0..11).to_a.map {|col| -1}}\\n        matrix.flatten.each_with_index
        { |coord, idx|\\n            r, c = rc_list[idx]\\n            (coord.nil?)
        ? matrix_96[r][c] = -1 : matrix_96[r][c] = coord\\n        }\\n        return
        matrix_96\\n    end\\n\\nend # Class\\n\\n\",\"parent_id\":1516,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:12:24.000-08:00\",\"updated_at\":\"2018-11-07T17:12:24.000-08:00\",\"user_id\":193},{\"id\":90741,\"name\":\"protocol\",\"content\":\"#
        By: Eriberto Lopez\\n# elopez3@uw.edu\\n# 05/30/18\\n# C l\\n\\n# Outline\\n#
        After 5hr incubation sample 4 24 Deep Well plates\\n# Prepare PBS + Kan plate
        for ribosomal arrest - PBS_Kan_Plate #\\n# Sample 24 Deep wells and transfer
        to PBS_Kan_Plate\\n# PBS_Kan_Plate - Measure OD \\u0026 GFP\\n# Incubate for
        1hr - may be able to keep overnight and run flow in the morning\\n# Prepare
        RNAprotect plate (RNAlater)\\n# Spin down plates, aspirate supernatant, and
        resuspend pellet in 1mL of PBS in order to transfer to RNA protect plate\\n#
        store RNA plate in -80C freezer for downstream processing\\n\\nneeds \\\"Standard
        Libs/Debug\\\"\\nneeds \\\"YG_Harmonization/Upload_PlateReader_Data\\\"\\nneeds
        \\\"YG_Harmonization/PlateReaderMethods\\\"\\nneeds \\\"Tissue Culture Libs/CollectionDisplay\\\"\\nneeds
        \\\"Induction - High Throughput/NovelChassisLib\\\" # Temporary EL\\n# needs
        \\\"Plate Reader Lib/PlateReaderHelper\\\"\\nneeds \\\"Induction - High Throughput/HighThroughputHelper\\\"\\n\\nclass
        Protocol\\n    \\n    include Debug\\n    include Upload_PlateReader_Data\\n
        \   include PlateReaderMethods\\n    include CollectionDisplay\\n    include
        NovelChassisLib\\n    # include PlateReaderHelper\\n    include HighThroughputHelper\\n
        \   \\n    #I/O\\n    INPUT = \\\"24 Deep Wells\\\"\\n    OUT_FC_PLT = \\\"Flow
        Cytometry Plate\\\"\\n    OUT_PLT_RDR_PLT = \\\"Plate Reader Plate\\\"\\n
        \   OUT_RNA_PLT = \\\"RNA Prep Plate\\\"\\n    \\n    # Constants\\n    FC_PLT_TRANSFER_VOL
        = 20#l\\n    PLT_RDR_PLT_TRANSERFER_VOL = 300#l\\n\\n\\n    def main\\n        \\n
        \       operations.make # Creates output plates\\n        \\n        intro()\\n
        \       \\n        operations.each { |op|\\n            # gather_materials(op)\\n
        \           \\n            # Piecing together matricies that were previously
        sliced up and associate to 24 Wells\\n            if debug\\n                p1
        = Collection.find(271333)\\n                p2 = Collection.find(271334)\\n
        \               p3 = Collection.find(271335)\\n                p4 = Collection.find(271336)\\n
        \               input_item_arr = [p1,p2,p3,p4]\\n            else\\n                input_item_arr
        = op.input_array(INPUT).collections\\n            end\\n            \\n            #
        from the associated matricies of the input 24 Wells piece together a new 96
        Well matrix\\n            transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out = transferring_24s_to_96_matricies(input_item_arr)\\n
        \           \\n            # Prep FC Plate - returns collection\\n            out_fc_plt
        = prepare_flow_cytometry_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Prepare Plate Reader Plate - returns collection\\n            plate_reader_plate
        = prepare_plate_reader_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Prepare RNA Plate - returns collection\\n            rna_plate
        = prepare_rna_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Grab 24 Deep Wells from Incubator shaker\\n            take
        input_item_arr, interactive: true\\n            \\n            # Transfer
        cultures from 24 Deep wells to FC flat bottom plate \\u0026 plate reader plate\\n
        \           coordinates_96 = ('A'..'H').to_a.map {|row| (1..12).to_a.map {|col|
        row + col.to_s}} # 96 Well coordinate map\\n            count = 0\\n            spin_down_plates
        = []\\n            input_item_arr.each do |plt|\\n                # find the
        rc_list from where the deep well transfer coords match the coordinates_96\\n
        \               display_rc_list = []\\n                deep_well_transfer_coords
        = plt.get('deep_well_transfer_coords') # Contains coords like: \\\"A1\\\",
        \\\"A2\\\"...\\n                deep_well_transfer_coords.flatten.each do
        |coord|\\n                    coordinates_96.map.each_with_index do |row,
        r_idx|\\n                        col_idx = row.each_index.select {|well| row[well]
        == coord}\\n                        col_idx.each {|c_idx| display_rc_list.push([r_idx,
        c_idx])}\\n                    end\\n                end\\n                \\n
        \               show do\\n                    title \\\"Transferring Culture
        to Output Plates\\\"\\n                    separator\\n                    note
        \\\"Follow the table below to transfer culture from the 24 Deep Well Plate
        #{plt.id} to Plate #{out_fc_plt.id} \\u0026 Plate #{plate_reader_plate.id}\\\"\\n
        \                   check \\\"To plate \\u003cb\\u003e#{out_fc_plt.id}\\u003c/b\\u003e
        transfer \\u003cb\\u003e#{FC_PLT_TRANSFER_VOL}l\\u003c/b\\u003e\\\"\\n                    check
        \\\"To plate \\u003cb\\u003e#{plate_reader_plate.id}\\u003c/b\\u003e transfer
        \\u003cb\\u003e#{PLT_RDR_PLT_TRANSERFER_VOL}l\\u003c/b\\u003e\\\"\\n                    if
        debug\\n                        collection = Collection.find(271292)\\n                    else\\n
        \                       collection = out_fc_plt # This is just for displaying
        both out_fc_plt and plate_reader_plate should have the same matricies associated
        in the same layout\\n                    end\\n                    bullet
        \\\"\\u003cb\\u003eCoordinates correspond to the wells in plate #{plt.id}\\u003c/b\\u003e\\\"\\n
        \                   table highlight_rc(collection, display_rc_list) {|r,c|
        \\\"#{coordinates_24(r, c)}\\\"}\\n                end\\n                count
        += 1\\n                spin_down_plates.push(plt.id)\\n                if
        count % 2 == 0 # Spin down every pair of 24DW plates in order to balance centrifuge\\n
        \                   show {\\n                        title \\\"Spin Down 24
        Deep Well Plates\\\"\\n                        separator\\n                        note
        \\\"Use the large centrifuge to spin down deep well plates\\\"\\n                        check
        \\\"Centrifuge plates \\u003cb\\u003e#{spin_down_plates.flatten}\\u003c/b\\u003e
        at \\u003cb\\u003e4C, 4000rpm, for 10 mins\\u003c/b\\u003e\\\"\\n                        note
        \\\"Once plates are finished being centrifuged aspirate supernatant without
        disturbing the cell pellets.\\\"\\n                        bullet \\\"Continue
        on to the next step once plates are being centrifuged.\\\"\\n                    }\\n
        \                   spin_down_plates = []\\n                end\\n            end\\n
        \           \\n            # Once 24 Deep wells have been spun down and supernatant
        has been removed\\n            input_item_arr.each do |plt|\\n                #
        find the rc_list from where the deep well transfer coords match the coordinates_96\\n
        \               display_rc_list = []\\n                deep_well_transfer_coords
        = plt.get('deep_well_transfer_coords') # Contains coords like: \\\"A1\\\",
        \\\"A2\\\"...\\n                deep_well_transfer_coords.flatten.each do
        |coord|\\n                    coordinates_96.map.each_with_index do |row,
        r_idx|\\n                        col_idx = row.each_index.select {|well| row[well]
        == coord}\\n                        col_idx.each {|c_idx| display_rc_list.push([r_idx,
        c_idx])}\\n                    end\\n                end\\n                \\n
        \               show do\\n                    title \\\"Resuspending Cell
        Pellets\\\"\\n                    separator\\n                    check \\\"To
        each well in Plate \\u003cb\\u003e#{plt.id}\\u003c/b\\u003e resuspend cell
        pellet in \\u003cb\\u003e0.5mL\\u003c/b\\u003e of \\u003cb\\u003eRNAlater
        Soln\\u003c/b\\u003e\\\"\\n                    note \\\"Next, transfer resuspended
        cell pellet from Plate \\u003cb\\u003e#{plt.id}\\u003c/b\\u003e to Plate \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e\\\"\\n
        \                   note \\\"Follow the table below to transfer culture from
        the 24 Deep Well plate to Plate #{rna_plate.id}\\\"\\n                    if
        debug\\n                        collection = Collection.find(271292)\\n                    else\\n
        \                       collection = out_fc_plt # This is just for displaying\\n
        \                   end\\n                    bullet \\\"\\u003cb\\u003eCoordinates
        correspond to the wells in plate #{plt.id}\\u003c/b\\u003e\\\"\\n                    table
        highlight_rc(collection, display_rc_list) {|r,c| \\\"#{coordinates_24(r, c)}\\\"}\\n
        \               end\\n            end            \\n            # Once RNA
        plate has been filled, centrifuge once more to remove supernatant\\n            show
        {\\n                title \\\"Collecting Cell Pellets\\\"\\n                separator\\n
        \               note \\\"Once all cell pellets have been resuspended and collected
        on to Plate #{rna_plate.id}\\\"\\n                check \\\"Centrifuge Plate
        \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e at \\u003cb\\u003e4C, 4000rpm,
        for 10 mins\\u003c/b\\u003e\\\"\\n                check \\\"Once done, remove
        supernatant, seal with aluminumn foil cover, and place in the -80C freezer.\\\"\\n
        \               rna_plate.location = \\\" -80C freezer\\\"\\n                rna_plate.save\\n
        \           }\\n        }\\n        \\n        cleaning_up()\\n        \\n
        \   end # Main\\n\\n\\n    def intro()\\n        show {\\n            title
        \\\"Introduction - High Throughput Sampling \\u0026 Harvesting\\\"\\n            separator\\n
        \           note \\\"In this protocol you will be sampling and harvesting
        cultures for measurements and downstream processing.\\\"\\n            note
        \\\"\\u003cb\\u003e1.\\u003c/b\\u003e Sample each culture and arrest ribosomal
        function with Kanamycin\\\"\\n            note \\\"\\u003cb\\u003e2.\\u003c/b\\u003e
        Measure OD \\u0026 GFP\\\"\\n            note \\\"\\u003cb\\u003e3.\\u003c/b\\u003e
        Harvest cells for RNA Sequencing.\\\"\\n        }\\n    end\\n    \\n    def
        gather_materials(op)\\n        show {            transfer_coordinates = build_96_matrix(deep_well_transfer_coords,
        display_rc_list)\\n\\n            title \\\"Gather Materials\\\"\\n            separator\\n
        \           check \\\"Set large centrifuge to 4C\\\"\\n            check \\\"In
        an appropriate container, aliquot \\u003cb\\u003e12.8mL\\u003c/b\\u003e of
        PBS \\u0026 label: \\u003cb\\u003ePBS+Kan\\u003c/b\\u003e\\\"\\n            bullet
        \\\"To the PBS add \\u003cb\\u003e3.2mL\\u003c/b\\u003e of Kan Stock Solution
        (10mg/mL)\\\"\\n            check \\\"Gather \\u003cb\\u003e2\\u003c/b\\u003e
        96 Well Flat Bottom (black) plate(s)\\\"\\n            check \\\"Gather \\u003cb\\u003e1\\u003c/b\\u003e
        96 Deep Well plate(s)\\\"\\n            check \\\"In an appropriate container,
        aliquot \\u003cb\\u003e15mL\\u003c/b\\u003e of \\u003cb\\u003eM9\\u003c/b\\u003e
        media \\u0026 label: \\u003cb\\u003eRNAlater Soln\\u003c/b\\u003e\\\"\\n            bullet
        \\\"To that media, add \\u003cb\\u003e30mL\\u003c/b\\u003e of \\u003cb\\u003eRNAlater\\u003c/b\\u003e\\\"\\n
        \       }\\n    end\\n    def cleaning_up()\\n        show{\\n            title
        \\\"Cleaning Up...\\\"\\n            separator\\n            check \\\"Before
        ending the protocol, clean up bench and other instruments used\\\"\\n            check
        \\\"Make sure that the centrifuge temperature is placed back to room temperature\\\"\\n
        \       }\\n    end\\n    \\n    def prepare_flow_cytometry_plate(op, transfer_coordinates,
        experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n
        \       out_fc_plt = op.output(OUT_FC_PLT).collection\\n        \\n        #
        Associate to output FC plate\\n        out_fc_plt.matrix = sample_id_matrix_out\\n
        \       out_fc_plt.save\\n\\n        out_fc_plt.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       out_fc_plt.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       out_fc_plt.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       out_fc_plt.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n
        \       \\n        show {\\n            title \\\"Preparing Flow Cytometry
        Measurement Plate\\\"\\n            separator\\n            check \\\"Gather
        a 96 Flat Bottom (black) plate\\\"\\n            check \\\"Label Plate \\u003cb\\u003e#{out_fc_plt.id}\\u003c/b\\u003e\\\"\\n
        \           bullet \\\"Continue to the next step when ready\\\"\\n        }\\n
        \       show {\\n            title \\\"Preparing Flow Cytometry Measurement
        Plate\\\"\\n            separator\\n            note \\\"The PBS+Kan Solution
        will arrest ribosomal transcription\\\"\\n            check \\\"Gather a multichannel
        resivior for \\u003cb\\u003ePBS+Kan Solution\\u003c/b\\u003e\\\"\\n            note
        \\\"Follow the table below to fill plate the appropriate wells with \\u003cb\\u003ePBS+Kan\\u003c/b\\u003e\\\"\\n
        \           table highlight_non_empty(out_fc_plt) {|r,c| '180l'}\\n        }\\n
        \       return out_fc_plt\\n    end\\n    \\n    def prepare_plate_reader_plate(op,
        transfer_coordinates, experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96,
        sample_id_matrix_out)\\n        plate_reader_plate = op.output(OUT_PLT_RDR_PLT).collection\\n
        \       \\n        # Associate to output plate reader plate\\n        plate_reader_plate.matrix
        = sample_id_matrix_out\\n        plate_reader_plate.save\\n        plate_reader_plate.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n
        \       \\n        show {\\n            title \\\"Preparing Plate Reader Measurement
        Plate\\\"\\n            separator\\n            check \\\"Gather a 96 Flat
        Bottom (black) plate\\\"\\n            check \\\"Label Plate \\u003cb\\u003e#{plate_reader_plate.id}\\u003c/b\\u003e\\\"\\n
        \           bullet \\\"Continue on the the next step to fill with culture.\\\"\\n
        \       }\\n        return plate_reader_plate\\n    end\\n    \\n    def prepare_rna_plate(op,
        transfer_coordinates, experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96,
        sample_id_matrix_out)\\n        rna_plate = op.output(OUT_RNA_PLT).collection\\n
        \       \\n        rna_plate.matrix = sample_id_matrix_out\\n        rna_plate.save\\n
        \       rna_plate.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       rna_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       rna_plate.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       rna_plate.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n        \\n
        \       show {\\n            title \\\"Preparing RNA Prep Plate\\\"\\n            separator\\n
        \           check \\\"Gather a eppendorf 96 deep well plate\\\"\\n            check
        \\\"Label plate \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e\\\"\\n            bullet
        \\\"Continue on to the next step to fill with culture.\\\"\\n        }\\n
        \       return rna_plate\\n    end\\n    \\n    def coordinates_24(row, col)\\n
        \       r = transfer_24_to_96_row(row)\\n        c = transfer_24_to_96_col(col)\\n
        \       coordinates_24 = ('A'..'D').to_a.map {|row| (1..6).to_a.map {|col|
        row + col.to_s}} # 96 Well coordinate map\\n        return coordinates_24[r][c]\\n
        \   end\\n    \\n    def transfer_24_to_96_row(row)\\n        arr = [1, 3,
        5, 7]\\n        if arr.include? row\\n            row = arr.find_index(row)\\n
        \       else\\n            arr = [0, 2, 4, 6]\\n            row = arr.find_index(row)\\n
        \       end\\n        \\n        # arr = (arr.include? row) ? arr : arr =
        [0, 2, 4, 6]\\n        # row = arr.find_index(row)\\n        return row\\n
        \   end\\n    \\n    def transfer_24_to_96_col(col)\\n        if col \\u003e
        5\\n            col = col - 6\\n        else\\n            col\\n        end\\n
        \       return col\\n    end\\n    \\n    \\n    def transferring_24s_to_96_matricies(input_arr)\\n
        \       # Empty 96 well dimesion matricies\\n        transfer_coordinates
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        experimental_anti_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        media_type_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        inducer_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        sample_id_matrix_out
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        \\n        #
        96 Well coordinate map\\n        coordinates_96 = ('A'..'H').to_a.map {|row|
        (1..12).to_a.map {|col| row + col.to_s}}\\n        \\n        # For each input
        plate get its associate matricies and place into appropriate empty 96 well
        matrix\\n        input_arr.each do |plt|\\n            \\n            # find
        the rc_list from where the deep well transfer coords match the coordinates_96\\n
        \           display_rc_list = []\\n            deep_well_transfer_coords =
        plt.data_matrix_values('deep_well_transfer_coords') # Contains coords like:
        \\\"A1\\\", \\\"A2\\\"...\\n            deep_well_transfer_coords.flatten.each
        do |coord|\\n                coordinates_96.map.each_with_index do |row, r_idx|\\n
        \                   col_idx = row.each_index.select {|well| row[well] == coord}\\n
        \                   col_idx.each {|c_idx| display_rc_list.push([r_idx, c_idx])}\\n
        \               end\\n            end\\n            \\n            \\n            #
        Use display_rc_list to place information into the appropriate well\\n            transfer_coordinates
        = build_96_matrix(deep_well_transfer_coords, display_rc_list)\\n            \\n
        \           # Use display_rc_list to place correct media info into the correct
        well\\n            experimental_anti_mat       = plt.data_matrix_values('Experimental
        Antibiotics')\\n            experimental_anti_matrix_96 = build_96_matrix(experimental_anti_mat,
        display_rc_list)\\n            \\n            media_type_mat              =
        plt.data_matrix_values(\\\"Type of Media\\\")\\n            media_type_matrix_96
        \       = build_96_matrix(media_type_mat, display_rc_list)\\n            \\n
        \           inducer_mat                 = plt.data_matrix_values(\\\"Inducers\\\")\\n
        \           inducer_matrix_96           = build_96_matrix(inducer_mat, display_rc_list)\\n
        \           \\n            # Use display_rc_list to place correct sample_id/strain
        info into the correct well\\n            sample_id_mat = Collection.find(plt.id).matrix\\n
        \           sample_id_matrix_out = build_96_matrix(sample_id_mat, display_rc_list)\\n
        \       end\\n        return [transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out]\\n    end\\n\\n
        \   def build_96_matrix(matrix, rc_list)\\n        matrix_96 = (0..7).to_a.map
        {|row| (0..11).to_a.map {|col| -1}}\\n        matrix.flatten.each_with_index
        { |coord, idx|\\n            r, c = rc_list[idx]\\n            (coord.nil?)
        ? matrix_96[r][c] = -1 : matrix_96[r][c] = coord\\n        }\\n        return
        matrix_96\\n    end\\n\\nend # Class\\n\\n\",\"parent_id\":1516,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:12:17.000-08:00\",\"updated_at\":\"2018-11-07T17:12:17.000-08:00\",\"user_id\":193},{\"id\":90740,\"name\":\"protocol\",\"content\":\"#
        By: Eriberto Lopez\\n# elopez3@uw.edu\\n# 05/30/18\\n# C l\\n\\n# Outline\\n#
        After 5hr incubation sample 4 24 Deep Well plates\\n# Prepare PBS + Kan plate
        for ribosomal arrest - PBS_Kan_Plate #\\n# Sample 24 Deep wells and transfer
        to PBS_Kan_Plate\\n# PBS_Kan_Plate - Measure OD \\u0026 GFP\\n# Incubate for
        1hr - may be able to keep overnight and run flow in the morning\\n# Prepare
        RNAprotect plate (RNAlater)\\n# Spin down plates, aspirate supernatant, and
        resuspend pellet in 1mL of PBS in order to transfer to RNA protect plate\\n#
        store RNA plate in -80C freezer for downstream processing\\n\\nneeds \\\"Standard
        Libs/Debug\\\"\\nneeds \\\"YG_Harmonization/Upload_PlateReader_Data\\\"\\nneeds
        \\\"YG_Harmonization/PlateReaderMethods\\\"\\nneeds \\\"Tissue Culture Libs/CollectionDisplay\\\"\\nneeds
        \\\"Induction - High Throughput/NovelChassisLib\\\" # Temporary EL\\n# needs
        \\\"Plate Reader Lib/PlateReaderHelper\\\"\\nneeds \\\"Induction - High Throughput/HighThroughputHelper\\\"\\n\\nclass
        Protocol\\n    \\n    include Debug\\n    include Upload_PlateReader_Data\\n
        \   include PlateReaderMethods\\n    include CollectionDisplay\\n    include
        NovelChassisLib\\n    # include PlateReaderHelper\\n    include HighThroughputHelper\\n
        \   \\n    #I/O\\n    INPUT = \\\"24 Deep Wells\\\"\\n    OUT_FC_PLT = \\\"Flow
        Cytometry Plate\\\"\\n    OUT_PLT_RDR_PLT = \\\"Plate Reader Plate\\\"\\n
        \   OUT_RNA_PLT = \\\"RNA Prep Tubes\\\"\\n    \\n    # Constants\\n    FC_PLT_TRANSFER_VOL
        = 20#l\\n    PLT_RDR_PLT_TRANSERFER_VOL = 300#l\\n\\n\\n    def main\\n        \\n
        \       operations.make # Creates output plates\\n        \\n        intro()\\n
        \       \\n        operations.each { |op|\\n            # gather_materials(op)\\n
        \           \\n            # Piecing together matricies that were previously
        sliced up and associate to 24 Wells\\n            if debug\\n                p1
        = Collection.find(271333)\\n                p2 = Collection.find(271334)\\n
        \               p3 = Collection.find(271335)\\n                p4 = Collection.find(271336)\\n
        \               input_item_arr = [p1,p2,p3,p4]\\n            else\\n                input_item_arr
        = op.input_array(INPUT).collections\\n            end\\n            \\n            #
        from the associated matricies of the input 24 Wells piece together a new 96
        Well matrix\\n            transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out = transferring_24s_to_96_matricies(input_item_arr)\\n
        \           \\n            # Prep FC Plate - returns collection\\n            out_fc_plt
        = prepare_flow_cytometry_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Prepare Plate Reader Plate - returns collection\\n            plate_reader_plate
        = prepare_plate_reader_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Prepare RNA Plate - returns collection\\n            rna_plate
        = prepare_rna_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Grab 24 Deep Wells from Incubator shaker\\n            take
        input_item_arr, interactive: true\\n            \\n            # Transfer
        cultures from 24 Deep wells to FC flat bottom plate \\u0026 plate reader plate\\n
        \           coordinates_96 = ('A'..'H').to_a.map {|row| (1..12).to_a.map {|col|
        row + col.to_s}} # 96 Well coordinate map\\n            count = 0\\n            spin_down_plates
        = []\\n            input_item_arr.each do |plt|\\n                # find the
        rc_list from where the deep well transfer coords match the coordinates_96\\n
        \               display_rc_list = []\\n                deep_well_transfer_coords
        = plt.get('deep_well_transfer_coords') # Contains coords like: \\\"A1\\\",
        \\\"A2\\\"...\\n                deep_well_transfer_coords.flatten.each do
        |coord|\\n                    coordinates_96.map.each_with_index do |row,
        r_idx|\\n                        col_idx = row.each_index.select {|well| row[well]
        == coord}\\n                        col_idx.each {|c_idx| display_rc_list.push([r_idx,
        c_idx])}\\n                    end\\n                end\\n                \\n
        \               show do\\n                    title \\\"Transferring Culture
        to Output Plates\\\"\\n                    separator\\n                    note
        \\\"Follow the table below to transfer culture from the 24 Deep Well Plate
        #{plt.id} to Plate #{out_fc_plt.id} \\u0026 Plate #{plate_reader_plate.id}\\\"\\n
        \                   check \\\"To plate \\u003cb\\u003e#{out_fc_plt.id}\\u003c/b\\u003e
        transfer \\u003cb\\u003e#{FC_PLT_TRANSFER_VOL}l\\u003c/b\\u003e\\\"\\n                    check
        \\\"To plate \\u003cb\\u003e#{plate_reader_plate.id}\\u003c/b\\u003e transfer
        \\u003cb\\u003e#{PLT_RDR_PLT_TRANSERFER_VOL}l\\u003c/b\\u003e\\\"\\n                    if
        debug\\n                        collection = Collection.find(271292)\\n                    else\\n
        \                       collection = out_fc_plt # This is just for displaying
        both out_fc_plt and plate_reader_plate should have the same matricies associated
        in the same layout\\n                    end\\n                    bullet
        \\\"\\u003cb\\u003eCoordinates correspond to the wells in plate #{plt.id}\\u003c/b\\u003e\\\"\\n
        \                   table highlight_rc(collection, display_rc_list) {|r,c|
        \\\"#{coordinates_24(r, c)}\\\"}\\n                end\\n                count
        += 1\\n                spin_down_plates.push(plt.id)\\n                if
        count % 2 == 0 # Spin down every pair of 24DW plates in order to balance centrifuge\\n
        \                   show {\\n                        title \\\"Spin Down 24
        Deep Well Plates\\\"\\n                        separator\\n                        note
        \\\"Use the large centrifuge to spin down deep well plates\\\"\\n                        check
        \\\"Centrifuge plates \\u003cb\\u003e#{spin_down_plates.flatten}\\u003c/b\\u003e
        at \\u003cb\\u003e4C, 4000rpm, for 10 mins\\u003c/b\\u003e\\\"\\n                        note
        \\\"Once plates are finished being centrifuged aspirate supernatant without
        disturbing the cell pellets.\\\"\\n                        bullet \\\"Continue
        on to the next step once plates are being centrifuged.\\\"\\n                    }\\n
        \                   spin_down_plates = []\\n                end\\n            end\\n
        \           \\n            # Once 24 Deep wells have been spun down and supernatant
        has been removed\\n            input_item_arr.each do |plt|\\n                #
        find the rc_list from where the deep well transfer coords match the coordinates_96\\n
        \               display_rc_list = []\\n                deep_well_transfer_coords
        = plt.get('deep_well_transfer_coords') # Contains coords like: \\\"A1\\\",
        \\\"A2\\\"...\\n                deep_well_transfer_coords.flatten.each do
        |coord|\\n                    coordinates_96.map.each_with_index do |row,
        r_idx|\\n                        col_idx = row.each_index.select {|well| row[well]
        == coord}\\n                        col_idx.each {|c_idx| display_rc_list.push([r_idx,
        c_idx])}\\n                    end\\n                end\\n                \\n
        \               show do\\n                    title \\\"Resuspending Cell
        Pellets\\\"\\n                    separator\\n                    check \\\"To
        each well in Plate \\u003cb\\u003e#{plt.id}\\u003c/b\\u003e resuspend cell
        pellet in \\u003cb\\u003e0.5mL\\u003c/b\\u003e of \\u003cb\\u003eRNAlater
        Soln\\u003c/b\\u003e\\\"\\n                    note \\\"Next, transfer resuspended
        cell pellet from Plate \\u003cb\\u003e#{plt.id}\\u003c/b\\u003e to Plate \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e\\\"\\n
        \                   note \\\"Follow the table below to transfer culture from
        the 24 Deep Well plate to Plate #{rna_plate.id}\\\"\\n                    if
        debug\\n                        collection = Collection.find(271292)\\n                    else\\n
        \                       collection = out_fc_plt # This is just for displaying\\n
        \                   end\\n                    bullet \\\"\\u003cb\\u003eCoordinates
        correspond to the wells in plate #{plt.id}\\u003c/b\\u003e\\\"\\n                    table
        highlight_rc(collection, display_rc_list) {|r,c| \\\"#{coordinates_24(r, c)}\\\"}\\n
        \               end\\n            end            \\n            # Once RNA
        plate has been filled, centrifuge once more to remove supernatant\\n            show
        {\\n                title \\\"Collecting Cell Pellets\\\"\\n                separator\\n
        \               note \\\"Once all cell pellets have been resuspended and collected
        on to Plate #{rna_plate.id}\\\"\\n                check \\\"Centrifuge Plate
        \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e at \\u003cb\\u003e4C, 4000rpm,
        for 10 mins\\u003c/b\\u003e\\\"\\n                check \\\"Once done, remove
        supernatant, seal with aluminumn foil cover, and place in the -80C freezer.\\\"\\n
        \               rna_plate.location = \\\" -80C freezer\\\"\\n                rna_plate.save\\n
        \           }\\n        }\\n        \\n        cleaning_up()\\n        \\n
        \   end # Main\\n\\n\\n    def intro()\\n        show {\\n            title
        \\\"Introduction - High Throughput Sampling \\u0026 Harvesting\\\"\\n            separator\\n
        \           note \\\"In this protocol you will be sampling and harvesting
        cultures for measurements and downstream processing.\\\"\\n            note
        \\\"\\u003cb\\u003e1.\\u003c/b\\u003e Sample each culture and arrest ribosomal
        function with Kanamycin\\\"\\n            note \\\"\\u003cb\\u003e2.\\u003c/b\\u003e
        Measure OD \\u0026 GFP\\\"\\n            note \\\"\\u003cb\\u003e3.\\u003c/b\\u003e
        Harvest cells for RNA Sequencing.\\\"\\n        }\\n    end\\n    \\n    def
        gather_materials(op)\\n        show {            transfer_coordinates = build_96_matrix(deep_well_transfer_coords,
        display_rc_list)\\n\\n            title \\\"Gather Materials\\\"\\n            separator\\n
        \           check \\\"Set large centrifuge to 4C\\\"\\n            check \\\"In
        an appropriate container, aliquot \\u003cb\\u003e12.8mL\\u003c/b\\u003e of
        PBS \\u0026 label: \\u003cb\\u003ePBS+Kan\\u003c/b\\u003e\\\"\\n            bullet
        \\\"To the PBS add \\u003cb\\u003e3.2mL\\u003c/b\\u003e of Kan Stock Solution
        (10mg/mL)\\\"\\n            check \\\"Gather \\u003cb\\u003e2\\u003c/b\\u003e
        96 Well Flat Bottom (black) plate(s)\\\"\\n            check \\\"Gather \\u003cb\\u003e1\\u003c/b\\u003e
        96 Deep Well plate(s)\\\"\\n            check \\\"In an appropriate container,
        aliquot \\u003cb\\u003e15mL\\u003c/b\\u003e of \\u003cb\\u003eM9\\u003c/b\\u003e
        media \\u0026 label: \\u003cb\\u003eRNAlater Soln\\u003c/b\\u003e\\\"\\n            bullet
        \\\"To that media, add \\u003cb\\u003e30mL\\u003c/b\\u003e of \\u003cb\\u003eRNAlater\\u003c/b\\u003e\\\"\\n
        \       }\\n    end\\n    def cleaning_up()\\n        show{\\n            title
        \\\"Cleaning Up...\\\"\\n            separator\\n            check \\\"Before
        ending the protocol, clean up bench and other instruments used\\\"\\n            check
        \\\"Make sure that the centrifuge temperature is placed back to room temperature\\\"\\n
        \       }\\n    end\\n    \\n    def prepare_flow_cytometry_plate(op, transfer_coordinates,
        experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n
        \       out_fc_plt = op.output(OUT_FC_PLT).collection\\n        \\n        #
        Associate to output FC plate\\n        out_fc_plt.matrix = sample_id_matrix_out\\n
        \       out_fc_plt.save\\n\\n        out_fc_plt.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       out_fc_plt.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       out_fc_plt.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       out_fc_plt.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n
        \       \\n        show {\\n            title \\\"Preparing Flow Cytometry
        Measurement Plate\\\"\\n            separator\\n            check \\\"Gather
        a 96 Flat Bottom (black) plate\\\"\\n            check \\\"Label Plate \\u003cb\\u003e#{out_fc_plt.id}\\u003c/b\\u003e\\\"\\n
        \           bullet \\\"Continue to the next step when ready\\\"\\n        }\\n
        \       show {\\n            title \\\"Preparing Flow Cytometry Measurement
        Plate\\\"\\n            separator\\n            note \\\"The PBS+Kan Solution
        will arrest ribosomal transcription\\\"\\n            check \\\"Gather a multichannel
        resivior for \\u003cb\\u003ePBS+Kan Solution\\u003c/b\\u003e\\\"\\n            note
        \\\"Follow the table below to fill plate the appropriate wells with \\u003cb\\u003ePBS+Kan\\u003c/b\\u003e\\\"\\n
        \           table highlight_non_empty(out_fc_plt) {|r,c| '180l'}\\n        }\\n
        \       return out_fc_plt\\n    end\\n    \\n    def prepare_plate_reader_plate(op,
        transfer_coordinates, experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96,
        sample_id_matrix_out)\\n        plate_reader_plate = op.output(OUT_PLT_RDR_PLT).collection\\n
        \       \\n        # Associate to output plate reader plate\\n        plate_reader_plate.matrix
        = sample_id_matrix_out\\n        plate_reader_plate.save\\n        plate_reader_plate.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n
        \       \\n        show {\\n            title \\\"Preparing Plate Reader Measurement
        Plate\\\"\\n            separator\\n            check \\\"Gather a 96 Flat
        Bottom (black) plate\\\"\\n            check \\\"Label Plate \\u003cb\\u003e#{plate_reader_plate.id}\\u003c/b\\u003e\\\"\\n
        \           bullet \\\"Continue on the the next step to fill with culture.\\\"\\n
        \       }\\n        return plate_reader_plate\\n    end\\n    \\n    def prepare_rna_plate(op,
        transfer_coordinates, experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96,
        sample_id_matrix_out)\\n        rna_plate = op.output(OUT_RNA_PLT).collection\\n
        \       \\n        rna_plate.matrix = sample_id_matrix_out\\n        rna_plate.save\\n
        \       rna_plate.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       rna_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       rna_plate.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       rna_plate.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n        \\n
        \       show {\\n            title \\\"Preparing RNA Prep Plate\\\"\\n            separator\\n
        \           check \\\"Gather a eppendorf 96 deep well plate\\\"\\n            check
        \\\"Label plate \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e\\\"\\n            bullet
        \\\"Continue on to the next step to fill with culture.\\\"\\n        }\\n
        \       return rna_plate\\n    end\\n    \\n    def coordinates_24(row, col)\\n
        \       r = transfer_24_to_96_row(row)\\n        c = transfer_24_to_96_col(col)\\n
        \       coordinates_24 = ('A'..'D').to_a.map {|row| (1..6).to_a.map {|col|
        row + col.to_s}} # 96 Well coordinate map\\n        return coordinates_24[r][c]\\n
        \   end\\n    \\n    def transfer_24_to_96_row(row)\\n        arr = [1, 3,
        5, 7]\\n        if arr.include? row\\n            row = arr.find_index(row)\\n
        \       else\\n            arr = [0, 2, 4, 6]\\n            row = arr.find_index(row)\\n
        \       end\\n        \\n        # arr = (arr.include? row) ? arr : arr =
        [0, 2, 4, 6]\\n        # row = arr.find_index(row)\\n        return row\\n
        \   end\\n    \\n    def transfer_24_to_96_col(col)\\n        if col \\u003e
        5\\n            col = col - 6\\n        else\\n            col\\n        end\\n
        \       return col\\n    end\\n    \\n    \\n    def transferring_24s_to_96_matricies(input_arr)\\n
        \       # Empty 96 well dimesion matricies\\n        transfer_coordinates
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        experimental_anti_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        media_type_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        inducer_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        sample_id_matrix_out
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        \\n        #
        96 Well coordinate map\\n        coordinates_96 = ('A'..'H').to_a.map {|row|
        (1..12).to_a.map {|col| row + col.to_s}}\\n        \\n        # For each input
        plate get its associate matricies and place into appropriate empty 96 well
        matrix\\n        input_arr.each do |plt|\\n            \\n            # find
        the rc_list from where the deep well transfer coords match the coordinates_96\\n
        \           display_rc_list = []\\n            deep_well_transfer_coords =
        plt.data_matrix_values('deep_well_transfer_coords') # Contains coords like:
        \\\"A1\\\", \\\"A2\\\"...\\n            deep_well_transfer_coords.flatten.each
        do |coord|\\n                coordinates_96.map.each_with_index do |row, r_idx|\\n
        \                   col_idx = row.each_index.select {|well| row[well] == coord}\\n
        \                   col_idx.each {|c_idx| display_rc_list.push([r_idx, c_idx])}\\n
        \               end\\n            end\\n            \\n            \\n            #
        Use display_rc_list to place information into the appropriate well\\n            transfer_coordinates
        = build_96_matrix(deep_well_transfer_coords, display_rc_list)\\n            \\n
        \           # Use display_rc_list to place correct media info into the correct
        well\\n            experimental_anti_mat       = plt.data_matrix_values('Experimental
        Antibiotics')\\n            experimental_anti_matrix_96 = build_96_matrix(experimental_anti_mat,
        display_rc_list)\\n            \\n            media_type_mat              =
        plt.data_matrix_values(\\\"Type of Media\\\")\\n            media_type_matrix_96
        \       = build_96_matrix(media_type_mat, display_rc_list)\\n            \\n
        \           inducer_mat                 = plt.data_matrix_values(\\\"Inducers\\\")\\n
        \           inducer_matrix_96           = build_96_matrix(inducer_mat, display_rc_list)\\n
        \           \\n            # Use display_rc_list to place correct sample_id/strain
        info into the correct well\\n            sample_id_mat = Collection.find(plt.id).matrix\\n
        \           sample_id_matrix_out = build_96_matrix(sample_id_mat, display_rc_list)\\n
        \       end\\n        return [transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out]\\n    end\\n\\n
        \   def build_96_matrix(matrix, rc_list)\\n        matrix_96 = (0..7).to_a.map
        {|row| (0..11).to_a.map {|col| -1}}\\n        matrix.flatten.each_with_index
        { |coord, idx|\\n            r, c = rc_list[idx]\\n            (coord.nil?)
        ? matrix_96[r][c] = -1 : matrix_96[r][c] = coord\\n        }\\n        return
        matrix_96\\n    end\\n\\nend # Class\\n\\n\",\"parent_id\":1516,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:05:03.000-08:00\",\"updated_at\":\"2018-11-07T17:05:03.000-08:00\",\"user_id\":193},{\"id\":90739,\"name\":\"protocol\",\"content\":\"#
        \\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n  include Feedback\\n\\n
        \ def main\\n    \\n    operations.retrieve(only: \\\"Plasmid\\\")\\n    operations.retrieve(only:
        \\\"Comp Cells (BL21DE3)\\\", interactive: false)\\n\\n    #operations.each
        do |op|\\n    #    comp_cell = op.input(\\\"Comp Cells (BL21DE3)\\\").item\\n
        \   #    comp_cell.location = \\\"-20C freezer\\\"\\n    #end\\n\\n    #show
        do\\n    #    title \\\"location\\\"\\n    #    operations.each do |op|\\n
        \   #        note \\\"location is at #{op.input(\\\"Comp Cells (BL21DE3)\\\").item.location}\\\"\\n
        \   #    end\\n    #end\\n\\n    operations.make\\n\\n    op_in_plasmid =
        []\\n    op_in_comp_cells = []\\n    op_out_transformed_ecoli = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_plasmid \\u003c\\u003c op.input(\\\"Plasmid\\\").item.id\\n
        \       op_in_comp_cells \\u003c\\u003c op.input(\\\"Comp Cells (BL21DE3)\\\").item.id\\n
        \       op_out_transformed_ecoli \\u003c\\u003c op.output(\\\"Transformed
        E.Coli\\\").item.id\\n    end\\n    \\n    # Take competent cells from -80\xB0C
        freezer, label the design ID on tubes (input).\\n    # Thaw Competent E. coli
        cells on ice for 10 minutes.\\n    label_comp_cell_tubes(op_count, op_out_transformed_ecoli)\\n
        \   \\n    # Add 1 uL plasmid DNA to the competent cell aliquot. Carefully
        flick the tube 4\u20135 times to mix cells and DNA. [Note] Do not vortex!\\n
        \   add_dna_to_competent_cell(op_count, op_out_transformed_ecoli,op_in_plasmid)\\n
        \   \\n    # Place the mixture on ice for 30 minutes. [Note] Do not mix. Set
        a 30 minutes timer.\\n    # Prepare a heat plate and Set the temperature to
        42\xB0C. Add water into the wells of heat blocks.\\n    place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    \\n    # When time is up, Heat the shock mixture
        at 42\xB0C for exactly 10 seconds. [Note] Do not mix!\\n    # Place on ice
        for 5 minutes. [Note] Do not mix!\\n    heat_stock_10sec_5min( op_out_transformed_ecoli)\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n    pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    \\n    # Incubate transformants\\n    incubate_transformants(op_count,
        op_out_transformed_ecoli)\\n\\n    # Clean up\\n    clean_up\\n      \\n    #
        Move items\\n      operations.running.each do |op|\\n        op.output(\\\"Transformed
        E.Coli\\\").item.move \\\"37\xB0C shaker\\\"\\n      end\\n\\n    # Store
        dna stocks\\n      all_stocks = operations.running.map { |op| [op.input(\\\"Plasmid\\\").item,
        op.temporary[:old_stock]] }.flatten.uniq\\n      all_stocks.compact!\\n      release
        all_stocks, interactive: true, method: \\\"boxes\\\"\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n    \\n    return {}\\n  end\\n\\n  #
        Take competent cells from -80\xB0C freezer, label the design ID on tubes (input).\\n
        \ # Thaw Competent E. coli cells on ice for 10 minutes.\\n  def label_comp_cell_tubes(op_count,
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Grab and label
        the tubes\\\"\\n        check \\\"Grab a ice bucket and fill it with ice.\\\"\\n
        \       check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e BL21DE3
        competent cells from -80\xB0C freezer.\\\"\\n        check \\\"Label competent
        cell tubes with ID: #{ op_out_transformed_ecoli.to_sentence}\\\"\\n        check
        \\\"Thaw competent cell on ice for 10 minutes.\\\"\\n        timer initial:
        { hours: 0, minutes: 10, seconds: 0}\\n    end\\n  end\\n\\n  # Add 1 uL plasmid
        DNA to the competent cell aliquot. Carefully flick the tube 4\u20135 times
        to mix cells and DNA. [Note] Do not vortex!\\n  def add_dna_to_competent_cell(op_count,
        op_out_transformed_ecoli,op_in_plasmid)\\n    op_table = [[\\\"Plasmid DNA
        ID\\\",\\\"Volume\\\",\\\"Competent cell ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c op_in_plasmid[i]\\n        row
        \\u003c\\u003c \\\"1 \xB5l\\\"\\n        row \\u003c\\u003c {content: op_out_transformed_ecoli[i],
        check: true}\\n        op_table \\u003c\\u003c row\\n    end\\n    show do\\n
        \       title \\\"Mix DNA with competent cell\\\"\\n        check \\\"Add
        1 \xB5l of plasmid DNA to the corresponding competent cell tubes.\\\"\\n        table
        op_table\\n        check \\\"Carefully flick tubes 5 times to mix competent
        cells and plasmid DNA.\\\"\\n        warning \\\"Do not vortex.\\\"\\n        \\n
        \   end\\n  end\\n\\n  # Place the mixture on ice for 30 minutes. [Note] Do
        not mix. Set a 30-minute timer.\\n  # Prepare a heat plate and Set the temperature
        to 42\xB0C. Add water into the wells of heat blocks.\\n  def place_mixture_on_ice_30min(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Incubate on ice\\\"\\n
        \       check \\\"Incubate tubes #{ op_out_transformed_ecoli.to_sentence}
        on ice for 30 minutes.\\\"\\n        warning \\\"Do not disturb tubes at this
        step.\\\"\\n        timer initial: { hours: 0, minutes: 30, seconds: 0}\\n
        \       check \\\"Preheat a heat plate to 42\xB0C.\\\"\\n    end\\n  end\\n\\n
        \   # When time is up, Heat the shock mixture at 42\xB0C for exactly 10 seconds.
        [Note] Do not mix!\\n    # Place on ice for 5 minutes. [Note] Do not mix!\\n
        \ def heat_stock_10sec_5min( op_out_transformed_ecoli)\\n    show do\\n        title
        \\\"Heat Shock cells\\\"\\n        check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence}
        on the 42\xB0C heat block for exactly 40 seconds.\\\"\\n        timer initial:
        { hours: 0, minutes: 0, seconds: 40}\\n        warning \\\"Don't mix or disturb
        tubes at this step. Don't heat cells over 40 seconds.\\\"\\n    end\\n  end\\n
        \   \\n    # Pipette 950 \xB5L of TB into the mixture.\\n  def pipette_950uL_tb(
        op_out_transformed_ecoli)\\n    show do\\n        title \\\"Cell Recovery\\\"\\n
        \       check \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} on
        ice for 5 minutes.\\\"\\n        timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n        check \\\"Add 950 \xB5l of LB into each tube.\\\"  \\n    end\\n
        \ end\\n\\n    # This method tells the technician to incubate the E. coli
        transformants.\\n  def incubate_transformants(op_count, op_out_transformed_ecoli)\\n
        \   show do \\n        title \\\"Incubate in 37\xB0C shaker\\\"\\n        check
        \\\"Place tubes #{ op_out_transformed_ecoli.to_sentence} inside the glass
        flask in 37\xB0C shaker.\\\"\\n        check \\\"Incubate for 1 hour.\\\"\\n
        \       bullet \\\"\\u003ca href=\\\\'https://www.google.com/search?q=1%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 1 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Plate
        Transformed Cells (BL21DE3)\\\\'\\u003c/b\\u003e protocol.\\\"\\n        check
        \\\"While the cell cultures incubate, finish this protocol by completing the
        remaining tasks.\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        of LB + AMP plates and place them into the still 37\xB0C incubator.\\\"\\n
        \   end\\n  end\\n  \\n    # This method tells the technician to clean up
        items used in this protocol.\\n  def clean_up\\n    show do\\n      title
        \\\"Clean up\\\"\\n      check \\\"Return the ice bucket.\\\"\\n    end\\n
        \ end\\n\\nend\\n\",\"parent_id\":1547,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:04:05.000-08:00\",\"updated_at\":\"2018-11-07T17:04:05.000-08:00\",\"user_id\":200},{\"id\":90738,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20 mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gel for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        bullet \\\"Retrieve
        #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n        bullet \\\"Make
        sure that the excess blue dye has been removed from the gel matrix background
        and the protein bands can be distinguished. (as an example shown in the picture
        below).\\\"\\r\\n        bullet \\\"Store the gel in the box saturated with
        water.\\\"\\r\\n        bullet \\\"If the background is still in dark blue,
        wash gels for another 1 hour or leave it on the shaker overnight. Grab a manager
        to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:03:20.000-08:00\",\"updated_at\":\"2018-11-07T17:03:20.000-08:00\",\"user_id\":200},{\"id\":90737,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n\\n    operations.retrieve.make\\n
        \   \\n    # Gather all reserved sample: \\n    # - sample 01: before IPTG
        induction with design ID\\n    # - sample 02: after IPTG induction with design
        ID\\n    # - sample 03: after dialysis\\n    \\n    op_in_protein   = []\\n
        \   op_in_before    = []\\n    op_in_after     = []\\n    op_out_protein  =
        []\\n    op_out_before   = []\\n    op_out_after    = []\\n    \\n    lysis_before
        \     = []\\n    lysis_after       = []\\n    amount_protein    = []\\n    \\n
        \   op_count = 0\\n    \\n    operations.running.each do |op|\\n        #
        generate randon OD values for debug\\n        #op.set_input_data(\\\"Protein\\\",
        :od_value, Random.rand(0.8..1.0)) if debug\\n        op.set_input_data(\\\"Before
        IPTG\\\", :od_value, Random.rand(0.8..1.0)) if debug\\n        op.set_input_data(\\\"After
        IPTG\\\", :od_value, Random.rand(0.8..1.0)) if debug\\n        op.set_input_data(\\\"Protein\\\",
        :protein_concentration, Random.rand(15..25)) if debug\\n        # \\n        op_count
        = op_count + 1\\n        op_in_protein   \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\n
        \       op_in_before    \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\n
        \       op_in_after     \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\n
        \       op_out_protein  \\u003c\\u003c op.output(\\\"Protein\\\").item.id\\n
        \       op_out_before   \\u003c\\u003c op.output(\\\"Before IPTG\\\").item.id\\n
        \       op_out_after    \\u003c\\u003c op.output(\\\"After IPTG\\\").item.id\\n
        \       \\n        tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\n        tmp_after   = (op.input_data(\\\"After IPTG\\\", :od_value).to_f
        * 100).floor\\n        # to get 0.01mg from the protein sample, the amount
        is 0.01(mg)*1000(ul/mL)/protein_concetration(mg/mL)\\n        tmp_protein
        = 0.01*1000/(op.input_data(\\\"Protein\\\", :protein_concentration).to_f).floor
        # ul\\n        \\n        lysis_before   \\u003c\\u003c tmp_before\\n        lysis_after
        \   \\u003c\\u003c tmp_after\\n        amount_protein  \\u003c\\u003c tmp_protein
        \ # ul\\n        \\n    end\\n=begin    \\n    # measure OD\\n    meas_sample
        = []\\n    for i in 0..(op_count-1)\\n        meas_sample \\u003c\\u003c op_in_before[i]\\n
        \       meas_sample \\u003c\\u003c op_in_after[i]\\n        meas_sample \\u003c\\u003c
        op_in_protein[i]\\n    end\\n    \\n    od_batch = measure_od_value(meas_sample)\\n\\n
        \   od_value_before = []\\n    od_value_after = []\\n    od_value_protein
        = []\\n\\n    for i in 0..(op_count-1)\\n        od_value_before  \\u003c\\u003c
        od_batch[3*i+0]\\n        od_value_after   \\u003c\\u003c od_batch[3*i+1]\\n
        \       od_value_protein \\u003c\\u003c od_batch[3*i+2]\\n    end\\n    \\n
        \   # Record the OD value.\\n    i = 0\\n    operations.running.each do |op|\\n
        \       sample_before = op.input(\\\"Before IPTG\\\").item\\n        sample_before.associate
        :od_value, od_value_before[i]\\n        sample_after = op.input(\\\"After
        IPTG\\\").item\\n        sample_after.associate :od_value, od_value_after[i]\\n
        \       sample_protein = op.input(\\\"Protein\\\").item\\n        sample_protein.associate
        :od_value, od_value_protein[i]\\n        i = i + 1\\n    end\\n=end\\n\\n
        \   # Preheat the heat plate to 95\xB0C. Add some water into the heat blocks.\\n
        \   keep_protein_on_ice(op_in_protein)\\n    \\n    thaw_sample(op_in_before,op_in_after)\\n
        \   \\n    add_lysis(op_count,op_in_before,op_in_after,lysis_before,lysis_after)\\n
        \   \\n    grab_tubes(op_count,op_in_before,op_in_after,op_in_protein,op_out_protein,op_out_before,op_out_after)\\n
        \       \\n    # Take volume from the reserved sample eppendorf to a new Eppendorf
        with the same design ID.\\n    # Formula: sample_volume(ul) = OD600value *
        100(ul) [recorded from **IPTG induction**]. \\n    #add_sample(op_count,op_in_before,op_in_after,op_in_protein,op_out_protein,amount_before,amount_after,amount_protein)\\n
        \       \\n    # Add PBS volume to the Eppendorf in step 3.\\n    # Formula:
        PBS_volume(ul) = 240(ul) - sample_volume(ul)[from step 3]\\n        \\n    #
        Add 60ul sample buffer into the Eppendorf.\\n    \\n        \\n    # Seal
        eppendorf cap by parafilm.\\n   \\n        \\n    # Heat at 95\xB0C for 5mins.
        \  \\n    heat_5mins\\n    \\n    operations.store\\n    \\n    return {}\\n\\n
        \ end\\n  \\n=begin  \\n  def measure_od_value(meas_sample)\\n    od_value
        = []\\n    show do\\n      title \\\"Measure Optical Absorbance of 600nm\\\"\\n
        \     note \\\"Grab a box of 1000\xB5L tip, a 1000\xB5L pipettor, a liquid
        waste container, 1mL of LB in a tube and #{meas_sample.size} plastic cuvettes.\\\"\\n
        \     note \\\"Bring the samples with ID of #{meas_sample.to_sentence} to
        Prof. James Carother\u2019s lab.\\\"\\n      note \\\"Open Nanodrop in cell
        cultures mode. Blank with 1mL LB.\\\"\\n      note \\\"Nanodrop the samples
        and record the value of OD600.\\\"\\n      note \\\"Transfer the samples back
        to their tubes. Use new tips to avoid cross contamination.\\\"\\n      note
        \\\"Write dow the OD value on the tube wall.\\\"\\n    end\\n    meas_sample.each
        do |id|\\n      od = show do\\n        title \\\"Enter the OD value\\\"\\n
        \       get \\\"number\\\", var: \\\"x\\\", label: \\\"Enter OD value of the
        sample with ID:#{id}\\\", default: 0\\n      end\\n      od_value \\u003c\\u003c
        od[:x]\\n    end\\n    return od_value\\n  end\\n=end\\n\\n  def keep_protein_on_ice(op_in_protein)\\n
        \   show do\\n        title \\\"Keep protein sample on ice\\\"\\n        check
        \\\"Grab a ice bucket and fill it with ice.\\\"\\n        check \\\"Place
        #{op_in_protein.to_sentence} on ice.\\\"\\n    end\\n  end\\n\\n  def thaw_sample(op_in_before,op_in_after)\\n
        \   show do\\n        title \\\"Thaw samples at room temperature\\\"\\n        bullet
        \\\"Perform the steps with the following tubes: #{op_in_before.to_sentence},
        #{op_in_after.to_sentence}\\\"\\n        check \\\"Thaw samples at room temperature
        until pellets are fully unfrozen.\\\"\\n        check \\\"Set a heat block
        to 95\xB0C.\\\"\\n    end    \\n  end\\n  \\n  def add_lysis(op_count,op_in_before,op_in_after,lysis_before,lysis_after)\\n
        \   op_table = [[\\\"Sample stock ID\\\",\\\"Lysis Buffer Volume (\xB5l)\\\"]]\\n
        \   for i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c
        {content:op_in_before[i], check: true}\\n        row \\u003c\\u003c lysis_before[i]\\n
        \       op_table \\u003c\\u003c row\\n        row = []\\n        row \\u003c\\u003c
        {content:op_in_after[i], check: true}\\n        row \\u003c\\u003c lysis_after[i]\\n
        \       op_table \\u003c\\u003c row\\n    end\\n    show do\\n        title
        \\\"Add lysis buffer\\\"\\n        #\\\"Formula: lysis buffer(uL) = OD value*
        100 uL lysis buffer.\\\"\\n        #the od value is from operation: IPTG induction_before
        and after IPTG reserved samples\\n        bullet \\\"Add lysis buffer to the
        corresponding tube according to the following table.\\\"\\n        table op_table\\n
        \       bullet \\\"Vortex samples for 1 minute or until no clumps of cell
        pellet.\\\"\\n    end\\n  end\\n  \\n  def grab_tubes(op_count,op_in_before,op_in_after,op_in_protein,op_out_protein,op_out_before,op_out_after)\\n
        \   op_table = [[\\\"Sample stock ID\\\",\\\"Volume\\\",\\\"Output sample
        ID\\\"]]\\n    all_output = []\\n    for i in 0..(op_count-1)\\n        #
        table\\n        row = []\\n        row \\u003c\\u003c op_in_before[i]\\n        row
        \\u003c\\u003c \\\"20 \xB5l\\\"\\n        row \\u003c\\u003c {content:op_out_before[i],
        check: true}\\n        op_table \\u003c\\u003c row\\n        row = []\\n        row
        \\u003c\\u003c op_in_after[i]\\n        row \\u003c\\u003c \\\"20 \xB5l\\\"\\n
        \       row \\u003c\\u003c {content:op_out_after[i], check: true}\\n        op_table
        \\u003c\\u003c row \\n        row = []\\n        row \\u003c\\u003c op_in_protein[i]\\n
        \       row \\u003c\\u003c \\\"20 \xB5l\\\"\\n        row \\u003c\\u003c {content:op_out_protein[i],
        check: true}\\n        op_table \\u003c\\u003c row\\n        # all output
        IDs\\n        all_output \\u003c\\u003c op_out_before[i]\\n        all_output
        \\u003c\\u003c op_out_after[i]\\n        all_output \\u003c\\u003c op_out_protein[i]\\n
        \   end    \\n    show do\\n        title \\\"Sample preparation\\\"\\n        check
        \\\"Grab \\u003cb\\u003e#{op_count*3}\\u003c/b\\u003e tube(s) and label with
        ID: #{all_output.to_sentence}\\\"\\n        check \\\"Pipette 20 \xB5l of
        sample stock to new 1.5 mL tubes according to the following table.\\\"\\n
        \       table op_table\\n        check \\\"Grab sample buffer from 4\xB0C
        refrigerator (R1-250)\\\"\\n        check \\\"Pipette 20 \xB5l of sample buffer
        to each tube:#{all_output.to_sentence}.\\\"\\n    end\\n  end\\n\\n=begin\\n
        \ def add_sample(op_count,op_in_before,op_in_after,op_in_protein,op_out_protein,amount_before,amount_after,amount_protein)\\n
        \   show do\\n        title \\\"Sample preparation\\\"\\n        check \\\"Take
        #{op_count} new Eppendorf and label them with (output) design IDs:#{op_out_protein.to_sentence}\\\"\\n
        \       bullet \\\"Take volume from the reserved sample Eppendorf(Before,
        After and Protein) to a new Eppendorf(#{op_out_protein.to_sentence})\\\"\\n
        \       bullet \\\"Formula: sample_volume(uL) = OD600value * 100(uL) [recorded
        from **IPTG induction**].\\\"\\n        bullet \\\"Take the *Before IPTG*
        with the ID of #{op_in_before.to_sentence} and add #{amount_before.to_sentence}
        uL, respectively.\\\"\\n        bullet \\\"Take the *After IPTG* with the
        ID of #{op_in_after.to_sentence}, add #{amount_after.to_sentence} uL, respectively.\\\"\\n
        \       bullet \\\"Take the *Protein* with the ID of #{op_in_protein.to_sentence},
        add #{amount_protein.to_sentence} uL, respectively.\\\"\\n        for i in
        0..(op_count-1)\\n            op_table = [\\n            [\\\"Sample\\\",\\\"Before
        IPTG\\\",\\\"After IPTG\\\",\\\"After Dialysis\\\"],\\n            [\\\"Design
        ID\\\",op_in_before[i],op_in_after[i],op_in_protein[i]],\\n            [\\\"Volumn
        (uL)\\\",amount_before[i],amount_after[i],amount_protein[i]]\\n            ]\\n
        \           note \\\"Batch #{i+1}: Eppendorf ID(#{op_out_protein[i]})\\\"\\n
        \           table op_table\\n        end\\n       # pic?\\n    end\\n  end\\n=end\\n\\n\\n
        \ def heat_5mins\\n    show do\\n       title \\\"Heat samples\\\"\\n       check
        \\\"Seal tubes with parafilm.\\\"\\n       check \\\"Heat samples at 95\xB0C
        for 5 minutes.\\\"\\n       timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n       check \\\"Remove tubes from the heat block.\\\"\\n    end\\n  end\\n\\nend\",\"parent_id\":1544,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:02:36.000-08:00\",\"updated_at\":\"2018-11-07T17:02:36.000-08:00\",\"user_id\":200},{\"id\":90736,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n
        \ include Feedback\\n  def main\\n    op_count = operations.size\\n\\n    #
        1 batch           -\\u003e 3 inputs: before, after, iptg\\n    # 1 gel             -\\u003e
        max. 3 batches [marker, batch1, batch2, batch3]\\n    # 1 clamping frame  -\\u003e
        max. 2 gels\\n    # 1 tank            -\\u003e max. 2 frames\\n    \\n    gel_count
        = (op_count/3).floor\\n    remainder = op_count % 3\\n    if remainder !=
        0\\n        gel_count = gel_count + 1\\n    end\\n    \\n    before = operations.size\\n
        \   \\n    #insert virtual operations according to gel_count\\n    #(0...op_count).each
        do |l|\\n    #    insert_operation 3*l, VirtualOperation.new\\n    #    insert_operation
        3*l+1, VirtualOperation.new\\n    #end\\n    \\n    operations.make\\n    \\n
        \   op_out_gel = []\\n    operations.output_collections[\\\"SDS Gel\\\"].each
        do |op_collection|\\n        op_out_gel \\u003c\\u003c op_collection.id\\n
        \   end\\n    \\n    clamping_frame_count = (op_count/6).floor\\n    remainder
        = op_count % 6\\n    if remainder != 0\\n        clamping_frame_count = clamping_frame_count
        + 1\\n    end\\n    \\n    running_buffer=0\\n    water=0\\n    for i in 1..clamping_frame_count\\n
        \       if i%2 == 0\\n            running_buffer = running_buffer + 20\\n
        \           water = 10*running_buffer - 20\\n        else\\n            running_buffer
        = running_buffer + 80\\n            water = 10*running_buffer - 80\\n        end\\n
        \   end\\n    \\n    tank_count = (op_count/12).floor\\n    remainder = op_count
        % 12\\n    if remainder != 0\\n        tank_count = tank_count + 1\\n    end\\n\\n
        \   #show do\\n        #title \\\"Gel / Frame / Tank\\\"\\n        #note \\\"#{op_count}
        batches, #{gel_count} gels, #{frame_count} frames, #{tank_count} tanks\\\"\\n
        \   #end\\n    \\n    # Place the casting frame at upright coner with the
        pressure cams in the open position and facing to a flat surface.\\n    # Make
        sure all glass plates are clean!\\n    place_casting_frame(gel_count,clamping_frame_count)\\n
        \       \\n    # Place a short plate on the top of a spacer plate.\\n    #
        Slide the two glass plates into the casting frame, keeping the short plate
        facing to front of the frame.\\n    place_short_plate_slide\\n        \\n
        \   # When the glass plates are in place, engage the pressure cams to secure
        the glass cassette sandwich in the casting frame. Make sure that both plates
        are flushed at the bottom. [Note] Leaking may occur if the plates are not
        flushed at the bottom.\\n        \\n    # Place the casting frame on the casting
        stand by positioning the casting frame onto the casting gasket.\\n    # Assemble
        the casting frame on the casting stand.\\n    place_assemble_frame_into_stand(clamping_frame_count)\\n
        \       \\n    # Load water into glass cassette sandwich for testing leaking.
        Do water test until leaking doesnt occur. If the water level is flowing down,
        it means there's a leaking and reassembly of the glass cassette sandwich is
        needed.\\n    test_leaking\\n        \\n    # If the leaking doesnt occur,
        remove water from the glass cassette sandwich.\\n    remove_cassette\\n    \\n
        \   prepare_aps_solution(gel_count)\\n    # Prepare one 12% resolving gel:
        take one 50mL falcon tube and label design ID, and add:\\n    # - 3.4mL water\\n
        \   # - 4mL acrylamide\\n    # - 2.5mL resolving gel buffer\\n    # - 0.1mL
        10% SDS buffer\\n    prepare_resolving_gel(gel_count)\\n        \\n    # Prepare
        one 10% stacking gel: take one 50mL falcon tube and label design ID, and add\\n
        \   # - 4.1mL water\\n    # - 3.3mL acrylamide\\n    # - 2.5mL stacking buffer\\n
        \   # - 0.1mL 10% SDS buffer\\n        \\n    # Fresh prepare APS solution:\\n
        \   # - Take one Eppendorf\\n    # - Add 0.01g APS powder to 100uL water\\n
        \   # - Shake it well until the powder fully dissolved\\n    \\n        \\n
        \   # Take the tube containing resolving gel buffer\\n    # - add 100ul APS
        solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 7mL to gel cassette sandwich.\\n      \\n    # Add 1mL isopropanol
        on the top of the gel buffer in the gel cassette sandwich.\\n    add_isopropanol\\n
        \       \\n    # Wait for 1hr.\\n    set_timer_1hrs\\n        \\n    # Pour
        off isopropanol, remove the remain isopropanol by a paper towel if needed\\n
        \       \\n    # Take the tube containing stacking gel buffer\\n    # - add
        50ul APS solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 3ml to gel cassette sandwich and insert comb to the cassette\\n
        \   prepare_stacking_gel(gel_count)\\n     \\n    # Wait for 30mins\\n    set_timer_30mins\\n
        \   \\n    place_gel_into_clamping(clamping_frame_count)\\n    \\n    #set_a_running_tank(tank_count)\\n
        \   \\n    place_frames_into_tank(tank_count,clamping_frame_count)\\n    \\n
        \   label_gel_id(op_out_gel)\\n    \\n    running_buffer_preparation(running_buffer,water)
        \  \\n    # Pull comb straight up to remove.\\n    \\n    pour_running_buffer\\n
        \   \\n    \\n    \\n    operations.store\\n\\n    return {}\\n  end\\n  \\n
        \ def place_casting_frame(gel_count,clamping_frame_count)\\n    show do\\n
        \      title \\\"Glass cassette preparation\\\"\\n       check \\\"Grab the
        follwing items:\\\"\\n       bullet \\\"#{gel_count} short plate\\\"\\n       bullet
        \\\"#{gel_count} spacer plate\\\"\\n       bullet \\\"#{gel_count} comb\\\"\\n
        \      bullet \\\"#{gel_count} casting frame\\\"\\n       #bullet \\\"#{clamping_frame_count}
        casting stand\\\"\\n       bullet \\\"#{gel_count} gray foam gasket\\\"\\n
        \      check \\\"Make sure the glass plates are dry and clean. If not, spray
        Ethanol on glass plates and wipe dry with Kimwipes.\\\"\\n       image \\\"Actions/ProteinPurification/casting_tool.jpg\\\"\\n
        \   end\\n  end\\n\\n  def place_short_plate_slide\\n    show do\\n       title
        \\\"Assemble glass cassette sandwich\\\"\\n       bullet \\\"Place a casting
        frame upright with the pressure cams in the open position.\\\"\\n       bullet
        \\\"Grab a spacer plate and place a short plate on top of it.\\\"\\n       bullet
        \\\"Slide the two glass plates into the casting frame. Engage the pressure
        cams to secure the glass cassette in the\\n       casting frame.\\\"\\n       bullet
        \\\"Check the short plate facing to front of the frame and the labeling on
        the spacer plate is up.\\\"\\n       bullet \\\"Check that both plates are
        flush at bottom to avoid leakage.\\\"\\n       bullet \\\"Repeat the steps
        to assemble all the glass cassette sandwiches.\\\"\\n       warning \\\"If
        the plates are misaligned or oriented incorrectly, leaking may occur.\\\"\\n
        \      image \\\"Actions/ProteinPurification/casting_frame.jpg\\\"\\n    end\\n
        \ end\\n    \\n  def place_assemble_frame_into_stand(clamping_frame_count)\\n
        \   show do\\n        title \\\"Casting stand assembly\\\" \\n        check
        \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e casting stand\\\"\\n
        \       check \\\"Place the gray foam gasket on the casting stand.\\\"\\n
        \       check \\\"Assemble the casting frames on the casting stand with the
        bottom edges pushed into the gray foam gasket.\\\"\\n        image \\\"Actions/ProteinPurification/casting_stand.jpg\\\"\\n
        \   end\\n  end\\n    \\n    # Load water into glass cassette sandwich for
        testing leaking. Do water test until leaking doesnt occur. If the water level
        is flowing down, it means there's a leaking and reassembly of the glass cassette
        sandwich is needed.\\n  def test_leaking\\n    show do\\n       title \\\"Check
        glass cassette for leakage\\\"\\n       check \\\"Pipetting water between
        the glass cassette sandwich up to just below the edge of the short plate.\\\"\\n
        \      check \\\"Wait for 5 minutes. If there is a leakage, reassemble the
        glass plates.\\\"\\n       timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n       warning \\\"If the plates are misaligned or oriented incorrectly,
        leaking may occur.\\\"\\n    end\\n  end\\n    \\n    # If the leaking doesnt
        occur, remove water from the glass cassette sandwich.\\n  def remove_cassette\\n
        \   show do\\n       title \\\"Remove water\\\"\\n       check \\\"If there
        is no leakage, remove water from the glass cassette sandwich.\\\"\\n       check
        \\\"Use a paper towel to wipe out excess water.\\\"\\n    end\\n  end\\n  \\n
        \ def prepare_aps_solution(gel_count)\\n    show do\\n       title \\\"Prepare
        10% Ammonium persulfate solution\\\"\\n       check \\\"Grab a 1.5 mL tube
        and label with APS\\\"\\n       check \\\"Add #{gel_count*0.02} g of APS powder
        and #{gel_count*200} \xB5l water into the tube.\\\"\\n       bullet \\\"Vortex
        until the powder is fully dissolved.\\\"\\n       image \\\"Actions/ProteinPurification/APS.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_resolving_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*3400} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*4000} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eResolving\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*2500} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*10} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*10}
        mL\\\"]\\n    ]\\n\\n    show do\\n       title \\\"Prepare 12% resolving
        gel solution\\\"\\n        bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet
        \\\"Prepare gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 7 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution. Avoid air
        bubbles.\\\"\\n        image \\\"Actions/ProteinPurification/resolving_buffer.jpg\\\"\\n
        \   end\\n  end\\n\\n  def add_isopropanol\\n    show do\\n       title \\\"Overlay
        isopropanol\\\"\\n       check \\\"Slowly pipette 1 mL of isopropanol to the
        top layer of gel.\\\"\\n       warning \\\"Not to disturb the gel solution.\\\"\\n
        \   end\\n  end         \\n\\n  def set_timer_1hrs\\n    show do\\n      title
        \\\"Wait for 1 hour\\\"\\n      bullet \\\"Set a 1-hr timer.\\\" \\n      timer
        initial: { hours: 1, minutes: 0, seconds: 0}\\n      bullet \\\"When the timer
        is up, pour off isopropanol. Use a paper towel to wipe out excess isopropanol.\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_stacking_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*2050} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*1650} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eStacking\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*1250} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*50} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*25} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*5} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*5}
        mL\\\"]\\n    ]\\n    show do\\n        title \\\"Stacking gel casting\\\"\\n
        \       bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet \\\"Prepare
        gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 3 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution and insert
        a comb between the two glass plate. Avoid air bubbles.\\\"\\n        image
        \\\"Actions/ProteinPurification/stacking_buffer_and_comb.jpg\\\"\\n\\n    end\\n
        \ end\\n\\n  def set_timer_30mins\\n    show do\\n        title \\\"Wait for
        30 minutes\\\"\\n        bullet \\\"Set a 30-mins timer.\\\" \\n        timer
        initial: { hours: 0, minutes: 30, seconds: 0}\\n      \\n    end\\n  end\\n
        \ \\n  def place_gel_into_clamping(clamping_frame_count)\\n    show do\\n
        \       title \\\"Electrode assembly\\\"\\n        bullet \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e
        clamping frame(s). The red marking should be on your left.\\\"\\n        bullet
        \\\"Set the clamping frame to the green arms open position on the bench.\\\"\\n
        \       bullet \\\"Gently remove the comb from the glass cassette sandwiche.\\\"\\n
        \       bullet \\\"Release the glass cassette from the casting frame.\\\"\\n
        \       bullet \\\"Place a gel sandwich into the front side of the clamping
        frame with the short plate facing inward.\\\"\\n        warning \\\"If an
        odd number of gels is being run, make sure to use a buffer dam (as shown in
        the picture).\\\"\\n        bullet \\\"Hold the glass cassettes in place and
        slide the green arms of the clamping frame over the gels. Lock gel cassettes
        into place.\\\"\\n        warning \\\"Do not attempt to lock the green arms
        without ensuring the gel cassettes are aligned.\\\"\\n        image \\\"Actions/ProteinPurification/clamping_frame.jpg\\\"\\n
        \   end\\n  end\\n  \\n=begin\\n  def set_a_running_tank(tank_count)\\n    show
        do\\n        title \\\"set up the power supply\\\"\\n        bullet \\\"In
        the gel room, obtain a power supply and set it to 100 V and with a 60 minute
        timer.\\\"\\n        bullet \\\"Grab #{tank_count} gel tanks and lids. Attach
        the electrodes of a lid to the power supply. Make sure to align the color-coded
        plugs and jacks.\\\"\\n    end\\n  end\\n=end\\n\\n  def place_frames_into_tank(tank_count,clamping_frame_count)\\n
        \   show do\\n        title \\\"Gel tank preparation\\\"\\n        bullet
        \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e gel running tank(s).\\\"\\n
        \       bullet \\\"The red marking on the top inside edge of tank should be
        on your left (as shown in the picture).\\\"\\n        bullet \\\"Place the
        electrode assembly in the gel running tank. Make sure that the red electrode
        is matching with the red marking on the top inside left edge of the tank.\\\"\\n
        \       image \\\"Actions/ProteinPurification/running_tank.jpg\\\"\\n    end
        \ \\n  end\\n  \\n  def label_gel_id(op_out_gel)\\n    show do \\n        title
        \\\"Label gel ID\\\"\\n        bullet \\\"Write ID: #{op_out_gel.to_sentence}
        on a piece of lab tape and affix it on the gel glass cassette.\\\"\\n    end\\n
        \ end\\n  \\n  def running_buffer_preparation(running_buffer,water)\\n    show
        do\\n        title \\\"Running buffer preparation\\\"\\n        check \\\"Grab
        a beaker or large measuring cup. Add #{water} mL of water to it.\\\"\\n        check
        \\\"Add #{running_buffer} mL of premixed 10x Tris/glycine/SDS running buffer
        to the beaker.\\\"\\n        bullet \\\"Stir for 5 minutes.\\\"\\n        timer
        initial: { hours: 0, minutes: 5, seconds: 0}\\n        image \\\"Actions/ProteinPurification/running_buffer.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def pour_running_buffer\\n    show do\\n        title
        \\\"Fill tank with Running buffer\\\"\\n        bullet \\\"Fill up chamber
        of the electrode assembly with running buffer to just under the edge of the
        gel plates (as shown in the picture).\\\"\\n        bullet \\\"Wait for 5
        minutes. Check the chamber for leakage before fill the lower chamber. If there
        is a leakage, pour running buffer back to the beaker. Open the green arms
        of clamping frame and reassemble it. Check if the short plates sit just below
        the notch at the top of the green gasket.\\\"\\n        timer initial: { hours:
        0, minutes: 5, seconds: 0}\\n        bullet \\\"Fill the lower chamber with
        running buffer to the indicated level. (2-Gels or 4-Gels line markings on
        the running gel tank.)\\\"\\n        image \\\"Actions/ProteinPurification/leaking_check.jpg\\\"\\n
        \   end\\n  end\\n\\nend\",\"parent_id\":1543,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:02:13.000-08:00\",\"updated_at\":\"2018-11-07T17:02:13.000-08:00\",\"user_id\":200},{\"id\":90735,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n
        \ include Feedback\\n  def main\\n    op_count = operations.size\\n\\n    #
        1 batch           -\\u003e 3 inputs: before, after, iptg\\n    # 1 gel             -\\u003e
        max. 3 batches [marker, batch1, batch2, batch3]\\n    # 1 clamping frame  -\\u003e
        max. 2 gels\\n    # 1 tank            -\\u003e max. 2 frames\\n    \\n    gel_count
        = (op_count/3).floor\\n    remainder = op_count % 3\\n    if remainder !=
        0\\n        gel_count = gel_count + 1\\n    end\\n    \\n    before = operations.size\\n
        \   \\n    #insert virtual operations according to gel_count\\n    #(0...op_count).each
        do |l|\\n    #    insert_operation 3*l, VirtualOperation.new\\n    #    insert_operation
        3*l+1, VirtualOperation.new\\n    #end\\n    \\n    operations.make\\n    \\n
        \   op_out_gel = []\\n    operations.output_collections[\\\"SDS Gel\\\"].each
        do |op_collection|\\n        op_out_gel \\u003c\\u003c op_collection.id\\n
        \   end\\n    \\n    clamping_frame_count = (op_count/6).floor\\n    remainder
        = op_count % 6\\n    if remainder != 0\\n        clamping_frame_count = clamping_frame_count
        + 1\\n    end\\n    \\n    running_buffer=0\\n    water=0\\n    for i in 1..clamping_frame_count\\n
        \       if i%2 == 0\\n            running_buffer = running_buffer + 20\\n
        \           water = 10*running_buffer - 20\\n        else\\n            running_buffer
        = running_buffer + 80\\n            water = 10*running_buffer - 80\\n        end\\n
        \   end\\n    \\n    tank_count = (op_count/12).floor\\n    remainder = op_count
        % 12\\n    if remainder != 0\\n        tank_count = tank_count + 1\\n    end\\n\\n
        \   #show do\\n        #title \\\"Gel / Frame / Tank\\\"\\n        #note \\\"#{op_count}
        batches, #{gel_count} gels, #{frame_count} frames, #{tank_count} tanks\\\"\\n
        \   #end\\n    \\n    # Place the casting frame at upright coner with the
        pressure cams in the open position and facing to a flat surface.\\n    # Make
        sure all glass plates are clean!\\n    place_casting_frame(gel_count,clamping_frame_count)\\n
        \       \\n    # Place a short plate on the top of a spacer plate.\\n    #
        Slide the two glass plates into the casting frame, keeping the short plate
        facing to front of the frame.\\n    place_short_plate_slide\\n        \\n
        \   # When the glass plates are in place, engage the pressure cams to secure
        the glass cassette sandwich in the casting frame. Make sure that both plates
        are flushed at the bottom. [Note] Leaking may occur if the plates are not
        flushed at the bottom.\\n        \\n    # Place the casting frame on the casting
        stand by positioning the casting frame onto the casting gasket.\\n    # Assemble
        the casting frame on the casting stand.\\n    place_assemble_frame_into_stand(clamping_frame_count)\\n
        \       \\n    # Load water into glass cassette sandwich for testing leaking.
        Do water test until leaking doesnt occur. If the water level is flowing down,
        it means there's a leaking and reassembly of the glass cassette sandwich is
        needed.\\n    test_leaking\\n        \\n    # If the leaking doesnt occur,
        remove water from the glass cassette sandwich.\\n    remove_cassette\\n    \\n
        \   prepare_aps_solution(gel_count)\\n    # Prepare one 12% resolving gel:
        take one 50mL falcon tube and label design ID, and add:\\n    # - 3.4mL water\\n
        \   # - 4mL acrylamide\\n    # - 2.5mL resolving gel buffer\\n    # - 0.1mL
        10% SDS buffer\\n    prepare_resolving_gel(gel_count)\\n        \\n    # Prepare
        one 10% stacking gel: take one 50mL falcon tube and label design ID, and add\\n
        \   # - 4.1mL water\\n    # - 3.3mL acrylamide\\n    # - 2.5mL stacking buffer\\n
        \   # - 0.1mL 10% SDS buffer\\n        \\n    # Fresh prepare APS solution:\\n
        \   # - Take one Eppendorf\\n    # - Add 0.01g APS powder to 100uL water\\n
        \   # - Shake it well until the powder fully dissolved\\n    \\n        \\n
        \   # Take the tube containing resolving gel buffer\\n    # - add 100ul APS
        solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 7mL to gel cassette sandwich.\\n      \\n    # Add 1mL isopropanol
        on the top of the gel buffer in the gel cassette sandwich.\\n    add_isopropanol\\n
        \       \\n    # Wait for 1hr.\\n    set_timer_1hrs\\n        \\n    # Pour
        off isopropanol, remove the remain isopropanol by a paper towel if needed\\n
        \       \\n    # Take the tube containing stacking gel buffer\\n    # - add
        50ul APS solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 3ml to gel cassette sandwich and insert comb to the cassette\\n
        \   prepare_stacking_gel(gel_count)\\n     \\n    # Wait for 30mins\\n    set_timer_30mins\\n
        \   \\n    place_gel_into_clamping(clamping_frame_count)\\n    \\n    #set_a_running_tank(tank_count)\\n
        \   \\n    place_frames_into_tank(tank_count,clamping_frame_count)\\n    \\n
        \   label_gel_id(op_out_gel)\\n    \\n    running_buffer_preparation(running_buffer,water)
        \  \\n    # Pull comb straight up to remove.\\n    \\n    pour_running_buffer\\n
        \   \\n    \\n    \\n    operations.store\\n\\n    return {}\\n  end\\n  \\n
        \ def place_casting_frame(gel_count,clamping_frame_count)\\n    show do\\n
        \      title \\\"Glass cassette preparation\\\"\\n       check \\\"Grab the
        follwing items:\\\"\\n       bullet \\\"#{gel_count} short plate\\\"\\n       bullet
        \\\"#{gel_count} spacer plate\\\"\\n       bullet \\\"#{gel_count} comb\\\"\\n
        \      bullet \\\"#{gel_count} casting frame\\\"\\n       #bullet \\\"#{clamping_frame_count}
        casting stand\\\"\\n       bullet \\\"#{gel_count} gray foam gasket\\\"\\n
        \      check \\\"Make sure the glass plates are dry and clean. If not, spray
        Ethanol on glass plates and wipe dry with Kimwipes.\\\"\\n       image \\\"Actions/ProteinPurification/casting_tool.jpg\\\"\\n
        \   end\\n  end\\n\\n  def place_short_plate_slide\\n    show do\\n       title
        \\\"Assemble glass cassette sandwich\\\"\\n       bullet \\\"Place a casting
        frame upright with the pressure cams in the open position.\\\"\\n       bullet
        \\\"Grab a spacer plate and place a short plate on top of it.\\\"\\n       bullet
        \\\"Slide the two glass plates into the casting frame. Engage the pressure
        cams to secure the glass cassette in the\\n       casting frame.\\\"\\n       bullet
        \\\"Check the short plate facing to front of the frame and the labeling on
        the spacer plate is up.\\\"\\n       bullet \\\"Check that both plates are
        flush at bottom to avoid leakage.\\\"\\n       bullet \\\"Repeat the steps
        to assemble all the glass cassette sandwiches.\\\"\\n       warning \\\"If
        the plates are misaligned or oriented incorrectly, leaking may occur.\\\"\\n
        \      image \\\"Actions/ProteinPurification/casting_frame.jpg\\\"\\n    end\\n
        \ end\\n    \\n  def place_assemble_frame_into_stand(clamping_frame_count)\\n
        \   show do\\n        title \\\"Casting stand assembly\\\" \\n        check
        \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e casting stand\\\"\\n
        \       check \\\"Place the gray foam gasket on the casting stand.\\\"\\n
        \       check \\\"Assemble the casting frames on the casting stand with the
        bottom edges pushed into the gray foam gasket.\\\"\\n        image \\\"Actions/ProteinPurification/casting_stand.jpg\\\"\\n
        \   end\\n  end\\n    \\n    # Load water into glass cassette sandwich for
        testing leaking. Do water test until leaking doesnt occur. If the water level
        is flowing down, it means there's a leaking and reassembly of the glass cassette
        sandwich is needed.\\n  def test_leaking\\n    show do\\n       title \\\"Check
        glass cassette for leakage\\\"\\n       check \\\"Pipetting water between
        the glass cassette sandwich up to just below the edge of the short plate.\\\"\\n
        \      check \\\"Wait for 5 minutes. If there is a leakage, reassemble the
        glass plates.\\\"\\n       timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n       warning \\\"If the plates are misaligned or oriented incorrectly,
        leaking may occur.\\\"\\n    end\\n  end\\n    \\n    # If the leaking doesnt
        occur, remove water from the glass cassette sandwich.\\n  def remove_cassette\\n
        \   show do\\n       title \\\"Remove water\\\"\\n       check \\\"If there
        is no leakage, remove water from the glass cassette sandwich.\\\"\\n       check
        \\\"Use a paper towel to wipe out excess water.\\\"\\n    end\\n  end\\n  \\n
        \ def prepare_aps_solution(gel_count)\\n    show do\\n       title \\\"Prepare
        10% Ammonium persulfate solution\\\"\\n       check \\\"Grab a 1.5 mL tube
        and label with APS\\\"\\n       check \\\"Add #{gel_count*0.02} g of APS powder
        and #{gel_count*200} \xB5l water into the tube.\\\"\\n       bullet \\\"Vortex
        until the powder is fully dissolved.\\\"\\n       image \\\"Actions/ProteinPurification/APS.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_resolving_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*3400} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*4000} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eResolving\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*2500} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*10} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*10}
        mL\\\"]\\n    ]\\n\\n    show do\\n       title \\\"Prepare 12% resolving
        gel solution\\\"\\n        bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet
        \\\"Prepare gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 7 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution. Avoid air
        bubbles.\\\"\\n        image \\\"Actions/ProteinPurification/resolving_buffer.jpg\\\"\\n
        \   end\\n  end\\n\\n  def add_isopropanol\\n    show do\\n       title \\\"Overlay
        isopropanol\\\"\\n       check \\\"Slowly pipette 1 mL of isopropanol to the
        top layer of gel.\\\"\\n       warning \\\"Not to disturb the gel solution.\\\"\\n
        \   end\\n  end         \\n\\n  def set_timer_1hrs\\n    show do\\n      title
        \\\"Wait for 1 hour\\\"\\n      bullet \\\"Set a 1-hr timer.\\\" \\n      timer
        initial: { hours: 1, minutes: 0, seconds: 0}\\n      bullet \\\"When the timer
        is up, pour off isopropanol. Use a paper towel to wipe out excess isopropanol.\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_stacking_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*2050} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*1650} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eStacking\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*1250} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*50} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*25} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*5} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*5}
        ml\\\"]\\n    ]\\n    show do\\n        title \\\"Stacking gel casting\\\"\\n
        \       bullet \\\"Grab a 50 mL falcon tube.\\\"\\n        bullet \\\"Prepare
        gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 3 mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution and insert
        a comb between the two glass plate. Avoid air bubbles.\\\"\\n        image
        \\\"Actions/ProteinPurification/stacking_buffer_and_comb.jpg\\\"\\n\\n    end\\n
        \ end\\n\\n  def set_timer_30mins\\n    show do\\n        title \\\"Wait for
        30 minutes\\\"\\n        bullet \\\"Set a 30-mins timer.\\\" \\n        timer
        initial: { hours: 0, minutes: 30, seconds: 0}\\n      \\n    end\\n  end\\n
        \ \\n  def place_gel_into_clamping(clamping_frame_count)\\n    show do\\n
        \       title \\\"Electrode assembly\\\"\\n        bullet \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e
        clamping frame(s). The red marking should be on your left.\\\"\\n        bullet
        \\\"Set the clamping frame to the green arms open position on the bench.\\\"\\n
        \       bullet \\\"Gently remove the comb from the glass cassette sandwiche.\\\"\\n
        \       bullet \\\"Release the glass cassette from the casting frame.\\\"\\n
        \       bullet \\\"Place a gel sandwich into the front side of the clamping
        frame with the short plate facing inward.\\\"\\n        warning \\\"If an
        odd number of gels is being run, make sure to use a buffer dam (as shown in
        the picture).\\\"\\n        bullet \\\"Hold the glass cassettes in place and
        slide the green arms of the clamping frame over the gels. Lock gel cassettes
        into place.\\\"\\n        warning \\\"Do not attempt to lock the green arms
        without ensuring the gel cassettes are aligned.\\\"\\n        image \\\"Actions/ProteinPurification/clamping_frame.jpg\\\"\\n
        \   end\\n  end\\n  \\n=begin\\n  def set_a_running_tank(tank_count)\\n    show
        do\\n        title \\\"set up the power supply\\\"\\n        bullet \\\"In
        the gel room, obtain a power supply and set it to 100 V and with a 60 minute
        timer.\\\"\\n        bullet \\\"Grab #{tank_count} gel tanks and lids. Attach
        the electrodes of a lid to the power supply. Make sure to align the color-coded
        plugs and jacks.\\\"\\n    end\\n  end\\n=end\\n\\n  def place_frames_into_tank(tank_count,clamping_frame_count)\\n
        \   show do\\n        title \\\"Gel tank preparation\\\"\\n        bullet
        \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e gel running tank(s).\\\"\\n
        \       bullet \\\"The red marking on the top inside edge of tank should be
        on your left (as shown in the picture).\\\"\\n        bullet \\\"Place the
        electrode assembly in the gel running tank. Make sure that the red electrode
        is matching with the red marking on the top inside left edge of the tank.\\\"\\n
        \       image \\\"Actions/ProteinPurification/running_tank.jpg\\\"\\n    end
        \ \\n  end\\n  \\n  def label_gel_id(op_out_gel)\\n    show do \\n        title
        \\\"Label gel ID\\\"\\n        bullet \\\"Write ID: #{op_out_gel.to_sentence}
        on a piece of lab tape and affix it on the gel glass cassette.\\\"\\n    end\\n
        \ end\\n  \\n  def running_buffer_preparation(running_buffer,water)\\n    show
        do\\n        title \\\"Running buffer preparation\\\"\\n        check \\\"Grab
        a beaker or large measuring cup. Add #{water} mL of water to it.\\\"\\n        check
        \\\"Add #{running_buffer} mL of premixed 10x Tris/glycine/SDS running buffer
        to the beaker.\\\"\\n        bullet \\\"Stir for 5 minutes.\\\"\\n        timer
        initial: { hours: 0, minutes: 5, seconds: 0}\\n        image \\\"Actions/ProteinPurification/running_buffer.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def pour_running_buffer\\n    show do\\n        title
        \\\"Fill tank with Running buffer\\\"\\n        bullet \\\"Fill up chamber
        of the electrode assembly with running buffer to just under the edge of the
        gel plates (as shown in the picture).\\\"\\n        bullet \\\"Wait for 5
        minutes. Check the chamber for leakage before fill the lower chamber. If there
        is a leakage, pour running buffer back to the beaker. Open the green arms
        of clamping frame and reassemble it. Check if the short plates sit just below
        the notch at the top of the green gasket.\\\"\\n        timer initial: { hours:
        0, minutes: 5, seconds: 0}\\n        bullet \\\"Fill the lower chamber with
        running buffer to the indicated level. (2-Gels or 4-Gels line markings on
        the running gel tank.)\\\"\\n        image \\\"Actions/ProteinPurification/leaking_check.jpg\\\"\\n
        \   end\\n  end\\n\\nend\",\"parent_id\":1543,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:01:43.000-08:00\",\"updated_at\":\"2018-11-07T17:01:43.000-08:00\",\"user_id\":200},{\"id\":90734,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\nneeds \\\"Standard Libs/Feedback\\\"\\nclass Protocol\\n
        \ include Feedback\\n  def main\\n    op_count = operations.size\\n\\n    #
        1 batch           -\\u003e 3 inputs: before, after, iptg\\n    # 1 gel             -\\u003e
        max. 3 batches [marker, batch1, batch2, batch3]\\n    # 1 clamping frame  -\\u003e
        max. 2 gels\\n    # 1 tank            -\\u003e max. 2 frames\\n    \\n    gel_count
        = (op_count/3).floor\\n    remainder = op_count % 3\\n    if remainder !=
        0\\n        gel_count = gel_count + 1\\n    end\\n    \\n    before = operations.size\\n
        \   \\n    #insert virtual operations according to gel_count\\n    #(0...op_count).each
        do |l|\\n    #    insert_operation 3*l, VirtualOperation.new\\n    #    insert_operation
        3*l+1, VirtualOperation.new\\n    #end\\n    \\n    operations.make\\n    \\n
        \   op_out_gel = []\\n    operations.output_collections[\\\"SDS Gel\\\"].each
        do |op_collection|\\n        op_out_gel \\u003c\\u003c op_collection.id\\n
        \   end\\n    \\n    clamping_frame_count = (op_count/6).floor\\n    remainder
        = op_count % 6\\n    if remainder != 0\\n        clamping_frame_count = clamping_frame_count
        + 1\\n    end\\n    \\n    running_buffer=0\\n    water=0\\n    for i in 1..clamping_frame_count\\n
        \       if i%2 == 0\\n            running_buffer = running_buffer + 20\\n
        \           water = 10*running_buffer - 20\\n        else\\n            running_buffer
        = running_buffer + 80\\n            water = 10*running_buffer - 80\\n        end\\n
        \   end\\n    \\n    tank_count = (op_count/12).floor\\n    remainder = op_count
        % 12\\n    if remainder != 0\\n        tank_count = tank_count + 1\\n    end\\n\\n
        \   #show do\\n        #title \\\"Gel / Frame / Tank\\\"\\n        #note \\\"#{op_count}
        batches, #{gel_count} gels, #{frame_count} frames, #{tank_count} tanks\\\"\\n
        \   #end\\n    \\n    # Place the casting frame at upright coner with the
        pressure cams in the open position and facing to a flat surface.\\n    # Make
        sure all glass plates are clean!\\n    place_casting_frame(gel_count,clamping_frame_count)\\n
        \       \\n    # Place a short plate on the top of a spacer plate.\\n    #
        Slide the two glass plates into the casting frame, keeping the short plate
        facing to front of the frame.\\n    place_short_plate_slide\\n        \\n
        \   # When the glass plates are in place, engage the pressure cams to secure
        the glass cassette sandwich in the casting frame. Make sure that both plates
        are flushed at the bottom. [Note] Leaking may occur if the plates are not
        flushed at the bottom.\\n        \\n    # Place the casting frame on the casting
        stand by positioning the casting frame onto the casting gasket.\\n    # Assemble
        the casting frame on the casting stand.\\n    place_assemble_frame_into_stand(clamping_frame_count)\\n
        \       \\n    # Load water into glass cassette sandwich for testing leaking.
        Do water test until leaking doesnt occur. If the water level is flowing down,
        it means there's a leaking and reassembly of the glass cassette sandwich is
        needed.\\n    test_leaking\\n        \\n    # If the leaking doesnt occur,
        remove water from the glass cassette sandwich.\\n    remove_cassette\\n    \\n
        \   prepare_aps_solution(gel_count)\\n    # Prepare one 12% resolving gel:
        take one 50mL falcon tube and label design ID, and add:\\n    # - 3.4mL water\\n
        \   # - 4mL acrylamide\\n    # - 2.5mL resolving gel buffer\\n    # - 0.1mL
        10% SDS buffer\\n    prepare_resolving_gel(gel_count)\\n        \\n    # Prepare
        one 10% stacking gel: take one 50mL falcon tube and label design ID, and add\\n
        \   # - 4.1mL water\\n    # - 3.3mL acrylamide\\n    # - 2.5mL stacking buffer\\n
        \   # - 0.1mL 10% SDS buffer\\n        \\n    # Fresh prepare APS solution:\\n
        \   # - Take one Eppendorf\\n    # - Add 0.01g APS powder to 100uL water\\n
        \   # - Shake it well until the powder fully dissolved\\n    \\n        \\n
        \   # Take the tube containing resolving gel buffer\\n    # - add 100ul APS
        solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 7mL to gel cassette sandwich.\\n      \\n    # Add 1mL isopropanol
        on the top of the gel buffer in the gel cassette sandwich.\\n    add_isopropanol\\n
        \       \\n    # Wait for 1hr.\\n    set_timer_1hrs\\n        \\n    # Pour
        off isopropanol, remove the remain isopropanol by a paper towel if needed\\n
        \       \\n    # Take the tube containing stacking gel buffer\\n    # - add
        50ul APS solution and 10ul TEMED\\n    # - swirl gently to initiate polymerization\\n
        \   # - Add 3ml to gel cassette sandwich and insert comb to the cassette\\n
        \   prepare_stacking_gel(gel_count)\\n     \\n    # Wait for 30mins\\n    set_timer_30mins\\n
        \   \\n    place_gel_into_clamping(clamping_frame_count)\\n    \\n    #set_a_running_tank(tank_count)\\n
        \   \\n    place_frames_into_tank(tank_count,clamping_frame_count)\\n    \\n
        \   label_gel_id(op_out_gel)\\n    \\n    running_buffer_preparation(running_buffer,water)
        \  \\n    # Pull comb straight up to remove.\\n    \\n    pour_running_buffer\\n
        \   \\n    \\n    \\n    operations.store\\n\\n    return {}\\n  end\\n  \\n
        \ def place_casting_frame(gel_count,clamping_frame_count)\\n    show do\\n
        \      title \\\"Glass cassette preparation\\\"\\n       check \\\"Grab the
        follwing items:\\\"\\n       bullet \\\"#{gel_count} short plate\\\"\\n       bullet
        \\\"#{gel_count} spacer plate\\\"\\n       bullet \\\"#{gel_count} comb\\\"\\n
        \      bullet \\\"#{gel_count} casting frame\\\"\\n       #bullet \\\"#{clamping_frame_count}
        casting stand\\\"\\n       bullet \\\"#{gel_count} gray foam gasket\\\"\\n
        \      check \\\"Make sure the glass plates are dry and clean. If not, spray
        Ethanol on glass plates and wipe dry with Kimwipes.\\\"\\n       image \\\"Actions/ProteinPurification/casting_tool.jpg\\\"\\n
        \   end\\n  end\\n\\n  def place_short_plate_slide\\n    show do\\n       title
        \\\"Assemble glass cassette sandwich\\\"\\n       bullet \\\"Place a casting
        frame upright with the pressure cams in the open position.\\\"\\n       bullet
        \\\"Grab a spacer plate and place a short plate on top of it.\\\"\\n       bullet
        \\\"Slide the two glass plates into the casting frame. Engage the pressure
        cams to secure the glass cassette in the\\n       casting frame.\\\"\\n       bullet
        \\\"Check the short plate facing to front of the frame and the labeling on
        the spacer plate is up.\\\"\\n       bullet \\\"Check that both plates are
        flush at bottom to avoid leakage.\\\"\\n       bullet \\\"Repeat the steps
        to assemble all the glass cassette sandwiches.\\\"\\n       warning \\\"If
        the plates are misaligned or oriented incorrectly, leaking may occur.\\\"\\n
        \      image \\\"Actions/ProteinPurification/casting_frame.jpg\\\"\\n    end\\n
        \ end\\n    \\n  def place_assemble_frame_into_stand(clamping_frame_count)\\n
        \   show do\\n        title \\\"Casting stand assembly\\\" \\n        check
        \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e casting stand\\\"\\n
        \       check \\\"Place the gray foam gasket on the casting stand.\\\"\\n
        \       check \\\"Assemble the casting frames on the casting stand with the
        bottom edges pushed into the gray foam gasket.\\\"\\n        image \\\"Actions/ProteinPurification/casting_stand.jpg\\\"\\n
        \   end\\n  end\\n    \\n    # Load water into glass cassette sandwich for
        testing leaking. Do water test until leaking doesnt occur. If the water level
        is flowing down, it means there's a leaking and reassembly of the glass cassette
        sandwich is needed.\\n  def test_leaking\\n    show do\\n       title \\\"Check
        glass cassette for leakage\\\"\\n       check \\\"Pipetting water between
        the glass cassette sandwich up to just below the edge of the short plate.\\\"\\n
        \      check \\\"Wait for 5 minutes. If there is a leakage, reassemble the
        glass plates.\\\"\\n       timer initial: { hours: 0, minutes: 5, seconds:
        0}\\n       warning \\\"If the plates are misaligned or oriented incorrectly,
        leaking may occur.\\\"\\n    end\\n  end\\n    \\n    # If the leaking doesnt
        occur, remove water from the glass cassette sandwich.\\n  def remove_cassette\\n
        \   show do\\n       title \\\"Remove water\\\"\\n       check \\\"If there
        is no leakage, remove water from the glass cassette sandwich.\\\"\\n       check
        \\\"Use a paper towel to wipe out excess water.\\\"\\n    end\\n  end\\n  \\n
        \ def prepare_aps_solution(gel_count)\\n    show do\\n       title \\\"Prepare
        10% Ammonium persulfate solution\\\"\\n       check \\\"Grab a 1.5 mL tube
        and label with APS\\\"\\n       check \\\"Add #{gel_count*0.02} g of APS powder
        and #{gel_count*200} \xB5l water into the tube.\\\"\\n       bullet \\\"Vortex
        until the powder is fully dissolved.\\\"\\n       image \\\"Actions/ProteinPurification/APS.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_resolving_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*3400} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*4000} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eResolving\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*2500} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*100} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*10} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*10}
        mL\\\"]\\n    ]\\n\\n    show do\\n       title \\\"Prepare 12% resolving
        gel solution\\\"\\n        bullet \\\"Grab a 50mL falcon tube.\\\"\\n        bullet
        \\\"Prepare gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 7mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution. Avoid air
        bubbles.\\\"\\n        image \\\"Actions/ProteinPurification/resolving_buffer.jpg\\\"\\n
        \   end\\n  end\\n\\n  def add_isopropanol\\n    show do\\n       title \\\"Overlay
        isopropanol\\\"\\n       check \\\"Slowly pipette 1 mL of isopropanol to the
        top layer of gel.\\\"\\n       warning \\\"Not to disturb the gel solution.\\\"\\n
        \   end\\n  end         \\n\\n  def set_timer_1hrs\\n    show do\\n      title
        \\\"Wait for 1 hour\\\"\\n      bullet \\\"Set a 1-hr timer.\\\" \\n      timer
        initial: { hours: 1, minutes: 0, seconds: 0}\\n      bullet \\\"When the timer
        is up, pour off isopropanol. Use a paper towel to wipe out excess isopropanol.\\\"\\n
        \   end\\n  end\\n  \\n  def prepare_stacking_gel(gel_count)\\n    op_table
        = [[\\\" Order \\\",\\\" Reagent \\\",\\\" Volume \\\"],\\n    [\\\"1\\\",{content:\\\"Water\\\",
        check: true},\\\"#{gel_count*2050} \xB5l\\\"],\\n    [\\\"2\\\",{content:\\\"Acrylamide\\\",
        check: true},\\\"#{gel_count*1650} \xB5l\\\"],\\n    [\\\"3\\\",{content:\\\"\\u003cb\\u003eStacking\\u003c/b\\u003e
        gel buffer\\\", check: true},\\\"#{gel_count*1250} \xB5l\\\"],\\n    [\\\"4\\\",{content:\\\"10%
        SDS buffer\\\", check: true},\\\"#{gel_count*50} \xB5l\\\"],\\n    [\\\"5\\\",{content:\\\"APS\\\",
        check: true},\\\"#{gel_count*25} \xB5l\\\"],\\n    [\\\"6\\\",{content:\\\"TEMED\\\",
        check: true},\\\"#{gel_count*5} \xB5l\\\"],\\n    [\\\"\\\",\\\"Total volume\\\",\\\"#{gel_count*5}
        ml\\\"]\\n    ]\\n    show do\\n        title \\\"Stacking gel casting\\\"\\n
        \       bullet \\\"Grab a 50mL falcon tube.\\\"\\n        bullet \\\"Prepare
        gel solution according to the following table. Order is important!\\\"\\n
        \       table op_table\\n        bullet \\\"Swirl the solution to mix thoroughly.\\\"\\n
        \       warning \\\"Once APS and TEMED are added, quickly pipetting gel solution
        to the glass cassette. Gel turns solid in a short time.\\\"\\n        bullet
        \\\"Load 3mL of gel solution to each gel cassette sandwich by using a motorized
        pipet filler.\\\"\\n        bullet \\\"Smoothly load the solution and insert
        a comb between the two glass plate. Avoid air bubbles.\\\"\\n        image
        \\\"Actions/ProteinPurification/stacking_buffer_and_comb.jpg\\\"\\n\\n    end\\n
        \ end\\n\\n  def set_timer_30mins\\n    show do\\n        title \\\"Wait for
        30 minutes\\\"\\n        bullet \\\"Set a 30-mins timer.\\\" \\n        timer
        initial: { hours: 0, minutes: 30, seconds: 0}\\n      \\n    end\\n  end\\n
        \ \\n  def place_gel_into_clamping(clamping_frame_count)\\n    show do\\n
        \       title \\\"Electrode assembly\\\"\\n        bullet \\\"Grab \\u003cb\\u003e#{clamping_frame_count}\\u003c/b\\u003e
        clamping frame(s). The red marking should be on your left.\\\"\\n        bullet
        \\\"Set the clamping frame to the green arms open position on the bench.\\\"\\n
        \       bullet \\\"Gently remove the comb from the glass cassette sandwiche.\\\"\\n
        \       bullet \\\"Release the glass cassette from the casting frame.\\\"\\n
        \       bullet \\\"Place a gel sandwich into the front side of the clamping
        frame with the short plate facing inward.\\\"\\n        warning \\\"If an
        odd number of gels is being run, make sure to use a buffer dam (as shown in
        the picture).\\\"\\n        bullet \\\"Hold the glass cassettes in place and
        slide the green arms of the clamping frame over the gels. Lock gel cassettes
        into place.\\\"\\n        warning \\\"Do not attempt to lock the green arms
        without ensuring the gel cassettes are aligned.\\\"\\n        image \\\"Actions/ProteinPurification/clamping_frame.jpg\\\"\\n
        \   end\\n  end\\n  \\n=begin\\n  def set_a_running_tank(tank_count)\\n    show
        do\\n        title \\\"set up the power supply\\\"\\n        bullet \\\"In
        the gel room, obtain a power supply and set it to 100 V and with a 60 minute
        timer.\\\"\\n        bullet \\\"Grab #{tank_count} gel tanks and lids. Attach
        the electrodes of a lid to the power supply. Make sure to align the color-coded
        plugs and jacks.\\\"\\n    end\\n  end\\n=end\\n\\n  def place_frames_into_tank(tank_count,clamping_frame_count)\\n
        \   show do\\n        title \\\"Gel tank preparation\\\"\\n        bullet
        \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e gel running tank(s).\\\"\\n
        \       bullet \\\"The red marking on the top inside edge of tank should be
        on your left (as shown in the picture).\\\"\\n        bullet \\\"Place the
        electrode assembly in the gel running tank. Make sure that the red electrode
        is matching with the red marking on the top inside left edge of the tank.\\\"\\n
        \       image \\\"Actions/ProteinPurification/running_tank.jpg\\\"\\n    end
        \ \\n  end\\n  \\n  def label_gel_id(op_out_gel)\\n    show do \\n        title
        \\\"Label gel ID\\\"\\n        bullet \\\"Write ID: #{op_out_gel.to_sentence}
        on a piece of lab tape and affix it on the gel glass cassette.\\\"\\n    end\\n
        \ end\\n  \\n  def running_buffer_preparation(running_buffer,water)\\n    show
        do\\n        title \\\"Running buffer preparation\\\"\\n        check \\\"Grab
        a beaker or large measuring cup. Add #{water} mL of water to it.\\\"\\n        check
        \\\"Add #{running_buffer} mL of premixed 10x Tris/glycine/SDS running buffer
        to the beaker.\\\"\\n        bullet \\\"Stir for 5 minutes.\\\"\\n        timer
        initial: { hours: 0, minutes: 5, seconds: 0}\\n        image \\\"Actions/ProteinPurification/running_buffer.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def pour_running_buffer\\n    show do\\n        title
        \\\"Fill tank with Running buffer\\\"\\n        bullet \\\"Fill up chamber
        of the electrode assembly with running buffer to just under the edge of the
        gel plates (as shown in the picture).\\\"\\n        bullet \\\"Wait for 5
        minutes. Check the chamber for leakage before fill the lower chamber. If there
        is a leakage, pour running buffer back to the beaker. Open the green arms
        of clamping frame and reassemble it. Check if the short plates sit just below
        the notch at the top of the green gasket.\\\"\\n        timer initial: { hours:
        0, minutes: 5, seconds: 0}\\n        bullet \\\"Fill the lower chamber with
        running buffer to the indicated level. (2-Gels or 4-Gels line markings on
        the running gel tank.)\\\"\\n        image \\\"Actions/ProteinPurification/leaking_check.jpg\\\"\\n
        \   end\\n  end\\n\\nend\",\"parent_id\":1543,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:01:13.000-08:00\",\"updated_at\":\"2018-11-07T17:01:13.000-08:00\",\"user_id\":200},{\"id\":90733,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n    \\n    operations.retrieve.make\\n\\n
        \   op_in_protein = []\\n    op_out_protein = []\\n    op_count = 0\\n    operations.running.each
        do |op|\\n        op_count = op_count + 1\\n        op_in_protein \\u003c\\u003c
        op.input(\\\"Protein\\\").item.id\\n        op_out_protein \\u003c\\u003c
        op.output(\\\"Protein\\\").item.id\\n    end\\n\\n    # Set the Refrigerated
        Centrifuge to 4\xB0C first.\\n    set_refrig_centrifuge_temp\\n        \\n
        \   # Take one concentrator and label it with design ID.\\n    take_and_label_concentrator(op_count)\\n
        \       \\n    # Add 15mL water into the concentrator and spin it under 3000g
        for 10mins at 4\xB0C.\\n    add_water_and_centrifuge(op_count)\\n        \\n
        \   # Remove the concentrator from the centrifuge and discard the water into
        the filtrate collector.\\n        \\n    # Add 15mL elution to the sample
        container and spin it under 3000g for 30mins at 4\xB0C.\\n    add_elution_and_centrifuge(op_count,op_in_protein)\\n
        \   \\n    spin_another_30mins\\n    \\n    take_and_label_eppendorf(op_count,op_out_protein)\\n
        \   \\n     # Transfer the 1mL sample to the labeled Eppendorf.\\n    transfer_sample_to_eppendorf(op_count,op_in_protein,op_out_protein)\\n
        \   \\n    # Spin the concentrator under 30000g at 4\xB0C until the sample
        volume reaches 1mL.\\n        \\n    # Keep the sample on ice.\\n    \\n    pro_concentration
        = measure_concentration(op_out_protein)\\n        \\n    # Record the protein
        concentration.\\n    i = 0\\n    operations.running.each do |op|\\n        protein_out
        = op.output(\\\"Protein\\\").item\\n        protein_out.associate :protein_concentration,
        pro_concentration[i]\\n        i = i + 1\\n    end\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true, method: 'boxes')\\n    \\n    return {}\\n
        \ end\\n  \\n  def set_refrig_centrifuge_temp\\n    show do\\n        title
        \\\"Pre-cool a centrifuge\\\"\\n        check \\\"Set the centrifuge to 4\xB0C.\\\"\\n
        \       image \\\"Actions/ProteinPurification/centrifuge.jpg\\\"\\n    end\\n
        \ end\\n\\n  def take_and_label_concentrator(op_count)\\n    show do\\n        title
        \\\"Label Centriprep tubes\\\"\\n        check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        Centriprep tube(s).\\\"\\n        check \\\"Label Centriprep tube(s) from
        1 to #{op_count} on the tube wall.\\\"\\n        image \\\"Actions/ProteinPurification/centriprep_tube.jpg\\\"\\n
        \   end\\n  end\\n    \\n  def add_water_and_centrifuge(op_count)\\n    show
        do\\n        title \\\"Equilibrate Centriprep tubes\\\"\\n        bullet \\\"Perform
        the steps with the following tubes: ID: 1 to #{op_count}\\\"\\n        check
        \\\"Disassemble a Centriprep tube. Take the filtrate collector out of the
        sample container.\\\"\\n        check \\\"Pour water to the fill line on the
        Centriprep sample container.\\\"\\n        check \\\"Reassemble the Centriprep
        tube and spin at 3000g for 10 minutes.\\\"\\n        warning \\\"Make sure
        to balance.\\\"\\n        check \\\"Remove Centriprep tubes from the centrifuge
        and empty tubes.\\\"\\n        image \\\"Actions/ProteinPurification/centriprep_tube_assemble.jpg\\\"\\n
        \   end\\n  end\\n    \\n  def add_elution_and_centrifuge(op_count,op_in_protein)\\n
        \   op_table = [[\\\"Sample ID\\\",\\\"Centriprep tube ID\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c {content:op_in_protein[i],
        check: true}\\n        row \\u003c\\u003c i+1\\n        op_table \\u003c\\u003c
        row\\n    end\\n    \\n    show do\\n        title \\\"Concentrate protein
        samples\\\"\\n        check \\\"Pour the sample to the corresponding sample
        container of Centriprep tube.\\\"\\n        table op_table\\n        check
        \\\"Reassemble Centriprep tubes and spin at 3000g for 40 minutes.\\\"\\n        check
        \\\"Remove Centriprep tubes from the centrifuge.\\\"\\n        check \\\"Discard
        flowthrough in the filtrate collector.\\\"\\n        warning \\\"Protein sample
        is concentrated in the \\u003cb\\u003esample container\\u003c/b\\u003e. Be
        careful not to empty a wrong container.\\\"\\n        image \\\"Actions/ProteinPurification/collect_sample.jpg\\\"\\n
        \   end\\n  end\\n  \\n  def spin_another_30mins\\n    show do\\n        title
        \\\"Spin Centriprep tubes again\\\"\\n        check \\\"Reassemble Centriprep
        tubes and spin at 3000g for 10 minutes.\\\"\\n        check \\\"Remove Centriprep
        tubes from the centrifuge.\\\"\\n    end\\n  end\\n  \\n  def take_and_label_eppendorf(op_count,op_out_protein)\\n
        \   show do\\n        title \\\"Grab and label tubes\\\"\\n        check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 1.5 mL tubes.\\\"\\n        check
        \\\"Label tubes with ID: #{op_out_protein.to_sentence}.\\\"\\n    end\\n  end\\n
        \ \\n def transfer_sample_to_eppendorf(op_count,op_in_protein,op_out_protein)\\n
        \   op_table = [[\\\"Centriprep tube ID\\\",\\\"1.5 mL tube ID\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c i+1\\n
        \       row \\u003c\\u003c {content:op_out_protein[i], check: true}\\n        op_table
        \\u003c\\u003c row\\n    end\\n    \\n    show do\\n        title \\\"Collect
        Samples\\\"\\n        check \\\"Grab a ice busket and fill it with ice.\\\"\\n
        \       check \\\"Set a P1000 pipettor to 500 \xB5l and transfer sample to
        the corresponding 1.5 mL tube. Keep samples on ice.\\\"\\n        table op_table\\n
        \       warning \\\"If sample volume is more than 500 \xB5l, don't withdraw
        the sample. Spin the Centriperp tube at 3000g for another 5 minutes or until
        sample volume reaches 500 \xB5l.\\\"\\n        check \\\"Add 100 \xB5l of
        50% Glycerol to each tube: #{op_out_protein.to_sentence} \\\"\\n    end\\n
        \ end\\n  \\n  def measure_concentration(op_out_protein)\\n    protein_concentration
        = []\\n    \\n    op_out_protein.each do |id|\\n        concetration = show
        do\\n            title \\\"Measure protein concentration\\\"\\n            check
        \\\"Open nanodrop in protein mode. Blank with protein blank buffer.\\\"\\n
        \           check \\\"Nanodrop 2 \xB5l protein sample.\\\"\\n            check
        \\\"Enter protein concentration.\\\"\\n            get \\\"number\\\", var:
        \\\"x\\\", label: \\\"Protein concetration of #{id}\\\", default: 0\\n        end\\n
        \       protein_concentration \\u003c\\u003c concetration[:x]\\n    end\\n
        \   return protein_concentration\\n  end\\n\\nend\\n\",\"parent_id\":1541,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:00:55.000-08:00\",\"updated_at\":\"2018-11-07T17:00:55.000-08:00\",\"user_id\":200},{\"id\":90732,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n\\n    operations.retrieve.make\\n\\n
        \   op_in_cell_lysate = []\\n    op_in_resin = []\\n    op_out_protein = []\\n
        \   op_count = 0\\n    operations.running.each do |op|\\n        op_count
        = op_count + 1\\n        op_in_cell_lysate \\u003c\\u003c op.input(\\\"Cell
        Lysate\\\").item.id\\n        op_in_resin \\u003c\\u003c op.input(\\\"Resin\\\").item.id\\n
        \       op_out_protein \\u003c\\u003c op.output(\\\"Protein\\\").item.id\\n
        \   end\\n    \\n    buffer_preparation(op_count)\\n    # Turn on the stopcock
        and let the binding buffer flow through of the column.\\n    turn_on_stopcock_binding(op_count,op_in_resin)\\n
        \       \\n    # Turn off the stopcock.\\n        \\n    # Apply the supernatant
        with design ID into the gravity flow column with resin in it.\\n    apply_supernatnat(op_count,op_in_cell_lysate,op_in_resin)\\n
        \       \\n    # Turn on the stopcock, let the supernatant flow through the
        column slowly.\\n    turn_on_stopcock_supernatant op_in_resin\\n        \\n
        \   # Add 50mL wash buffer to the column and let it flow through the column
        completely. Then turn off the stopcock.\\n    add_wash_buff(op_count,op_in_resin)\\n
        \       \\n    # Replace the beaker underneath the column with a new 50mL
        Falcon tube.\\n    replace_beaker_with_falcon_tube(op_count,op_in_resin,op_out_protein)\\n
        \       \\n    # Add 15mL elution buffer into the column.\\n    add_elution_buff(op_count,op_in_resin)\\n
        \       \\n    # Turn on the stopcock and let it flow through the column then
        collect it in the Falcon tube.\\n    turn_on_stopcock_collect(op_in_resin,op_out_protein)\\n
        \       \\n    # Cap the tube and put it on the ice.\\n\\n    operations.running.each
        do |op|\\n      op.output(\\\"Protein\\\").child_item.move \\\"4\xB0C or temporarily
        on ice\\\"\\n    end\\n\\n    operations.store(io: \\\"output\\\", interactive:
        true)\\n\\n    return {}\\n\\n  end\\n  \\n  # approximate final concentration
        of imidazole: 30mM wash buffer/250mM elution buffer\\n  def buffer_preparation(op_count)\\n
        \   op_table =[ [\\\"Buffer preparation\\\",\\\"Purification buffer volume\\\",\\\"Imidazole
        volume\\\"],\\n                [{content:\\\"Wash buffer\\\", style: {color:
        \\\"#00f\\\"}},{content: \\\"#{op_count*25} mL\\\", check: true, style:{color:\\\"#00f\\\"}},{content:
        \\\"#{op_count*150} \xB5l\\\", check: true, style:{color:\\\"#00f\\\"}}],\\n
        \               [{content:\\\"Elution Buffer\\\", style: {color:\\\"#060\\\"}},{content:
        \\\"#{op_count*15} mL\\\", check: true, style:{color:\\\"#060\\\"}},{content:
        \\\"#{op_count*750 } \xB5l\\\", check: true, style:{color:\\\"#060\\\"}}]\\n
        \       ]\\n    show do\\n        title \\\"Prepare buffers\\\"\\n        bullet
        \\\"Grab the following items:\\\"\\n        check \\\"Purification buffer,
        in the Media Bay.\\\"\\n        check \\\"Imidazole aliquot, in a box labeled
        \\u003cb\\u003eprotein purification\\u003c/b\\u003e in -20\xB0C freezer (B1-165)\\\"\\n
        \       check \\\"Grab \\u003cb\\u003e2\\u003c/b\\u003e beakers and label
        them with \\u003cb\\u003eWash Buffer\\u003c/b\\u003e and \\u003cb\\u003eElution
        Buffer\\u003c/b\\u003e.\\\"\\n        bullet \\\"Prepare wash buffer and elution
        buffer according to the following table.\\\"\\n        table op_table\\n    end\\n
        \ end\\n\\n  def turn_on_stopcock_binding(op_count,op_in_resin)\\n    show
        do\\n        title \\\"Remove liquid from the column\\\"\\n        bullet
        \\\"Perform the steps with the following columns: #{op_in_resin.to_sentence}.\\\"\\n
        \       check \\\"Make sure a beaker has been placed underneath each column.\\\"\\n
        \       check \\\"Open the column outlet to allow buffer to move out.\\\"\\n
        \       check \\\"Close the column outlet.\\\"\\n        image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\n
        \   end\\n  end\\n\\n  def apply_supernatnat(op_count,op_in_cell_lysate,op_in_resin)\\n
        \   op_table = [[\\\"Sample ID\\\",\\\"Column ID\\\"]]\\n    for i in 0..(op_count-1)\\n
        \       row = []\\n        row \\u003c\\u003c {content:op_in_cell_lysate[i],
        check: true}\\n        row \\u003c\\u003c op_in_resin[i]\\n        op_table
        \\u003c\\u003c row\\n    end\\n    show do\\n       title \\\"Apply sample
        to a column\\\"\\n       bullet \\\"Carefully load sample to the corresponding
        column by a diposable dropper.\\\"\\n       bullet \\\"For each column, use
        a new dropper to avoid cross contamination.\\\"\\n       table op_table\\n
        \      warning \\\"Be careful not to disturb the resin in column.\\\"\\n    end\\n
        \ end\\n\\n  def turn_on_stopcock_supernatant op_in_resin\\n    show do\\n
        \      title \\\"Protein binds to Ni-NTA resin\\\"\\n       check \\\"Open
        the column outlet. (ID: #{op_in_resin.to_sentence})\\\"\\n       check \\\"Control
        flow rate by an adaptor (as shown in the picture). Make sample \\u003cb\\u003eSLOWLY\\u003c/b\\u003e
        move out of column.\\\"\\n       check \\\"Close the column outlet.\\\"\\n
        \      image \\\"Actions/ProteinPurification/outlet_angle.jpg\\\"\\n    end\\n
        \ end\\n  \\n  def add_wash_buff(op_count,op_in_resin)\\n    op_table = [[\\\"Column
        ID\\\",\\\"Load wash buffer\\\"]]\\n    for i in 0..(op_count-1)\\n        row
        = []\\n        row \\u003c\\u003c {content:op_in_resin[i], check: true}\\n
        \       row \\u003c\\u003c \\\"25 mL\\\"\\n        op_table \\u003c\\u003c
        row\\n    end   \\n    show do\\n       title \\\"Column wash\\\"\\n       check
        \\\"Add 25 mL of \\u003cb\\u003eWash Buffer\\u003c/b\\u003e to each column.\\\"\\n
        \      #table op_table\\n       check \\\"Open the column outlet to allow
        buffer to move out.\\\"\\n       check \\\"Close the column outlet.\\\"\\n
        \   end\\n  end\\n  \\n  def replace_beaker_with_falcon_tube(op_count,op_in_resin,op_out_protein)\\n
        \   op_table = [[\\\"Column ID\\\",\\\"Falcon tube ID\\\"]]\\n    for i in
        0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c op_in_resin[i]\\n
        \       row \\u003c\\u003c {content:op_out_protein[i], check: true}\\n        op_table
        \\u003c\\u003c row\\n    end   \\n    show do\\n       title \\\"Prepare tubes\\\"\\n
        \      check \\\"Take \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 50 mL Falcon
        tube(s).\\\"\\n       check \\\"Label tube(s) with ID: #{op_out_protein.to_sentence}.\\\"\\n
        \      check \\\"Place the corresponding tube underneath the column for collecting
        sample elution.\\\"\\n       table op_table\\n    end\\n  end\\n    \\n  def
        add_elution_buff(op_count,op_in_resin)\\n    op_table = [[\\\"Column ID\\\",\\\"Load
        elution buffer\\\"]]\\n    for i in 0..(op_count-1)\\n        row = []\\n
        \       row \\u003c\\u003c {content:op_in_resin[i], check: true}\\n        row
        \\u003c\\u003c \\\"15 mL\\\"\\n        op_table \\u003c\\u003c row\\n    end\\n
        \   show do\\n       title \\\"Elute Protein from a column\\\"\\n       bullet
        \\\"Add 15 mL of \\u003cb\\u003eElution Buffer\\u003c/b\\u003e to each column.\\\"\\n
        \      table op_table\\n    end\\n  end\\n    \\n  def turn_on_stopcock_collect(op_in_resin,op_out_protein)\\n
        \   show do\\n       title \\\"Collet protein in a tube\\\"\\n       check
        \\\"Open the column outlet. (ID: #{op_in_resin.to_sentence})\\\"\\n       check
        \\\"Control flow rate by an adaptor (as shown in the picture). Make sample
        \\u003cb\\u003eSLOWLY\\u003c/b\\u003e flow through the column.\\\"\\n       check
        \\\"Collect sample in the tube. Screw the cap of #{op_out_protein.to_sentence}.\\\"\\n
        \      image \\\"Actions/ProteinPurification/outlet_angle.jpg\\\"\\n    end\\n
        \ end\\n  \\n  \\nend\",\"parent_id\":1540,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T17:00:10.000-08:00\",\"updated_at\":\"2018-11-07T17:00:10.000-08:00\",\"user_id\":200},{\"id\":90731,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n    operations.retrieve.make\\n
        \   \\n    op_in_cell_pellet = []\\n    op_out_cell_lysate = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_cell_pellet \\u003c\\u003c op.input(\\\"Cell Pellet\\\").item.id\\n
        \       op_out_cell_lysate \\u003c\\u003c op.output(\\\"Cell Lysate\\\").item.id\\n
        \   end\\n    \\n     # Take the cell paste from -80\xB0C and let cells thaw
        on ice.\\n    take_cell_pellet(op_in_cell_pellet)\\n    \\n    # Take and
        add 50mL lysis buffer into a 50mL Falcon tube and add one tablet of protease
        inhibitor.\\n    take_lysis_buff(op_count,op_in_cell_pellet)\\n        \\n
        \   # Shake the Falcon tube and mix the buffer well until the protease inhibitor
        tablet fully dissolved in the lysis buffer.\\n    #shake_tube_and_mix_buff\\n
        \       \\n    # Equally distribute the lysis buffer into four Falcon tubes
        and gently suspend the cell paste in the lysis buffer.\\n    # keep tubes
        on ices\\n    distribute_lysis_buff(op_count,op_in_cell_pellet)\\n        \\n
        \   # Lyse the cell by a sonicator in Prof. Seelig\u2019s Lab.\\n    lyse_cell_by_sonicator(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \       \\n    # Turn on the sonicator and set the time and temperature condition,
        95% power output, 10secs on, 30secs off, repeat 30 rounds.\\n    set_up_sonicator(op_count)\\n
        \   \\n    weigh_and_balance_tubes(op_count)\\n         \\n    # Spin by the
        tabletop high-speed centrifuge under 24,000g for 30mins at 4\xB0C in Prof.
        Baker\u2019s Lab.\\n    spin_hs_centrifuge(op_count)\\n        \\n    # Transfer
        the supernatant to new tubes and discard the cell pellet.\\n    transfer_supernatant_to_new_tubes_label(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   \\n    operations.running.each do |op|\\n      op.output(\\\"Cell Lysate\\\").child_item.move
        \\\"4\xB0C or on ice for the (next) protocol\\\"\\n    end\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n\\n    return {}\\n\\n  end\\n  \\n  def
        take_cell_pellet(op_in_cell_pellet)\\n    show do\\n       title \\\"Thaw
        cell pellets on ice\\\"\\n       check \\\"Grab a ice bucket and fill it with
        ice.\\\"\\n       check \\\"Thaw #{op_in_cell_pellet.to_sentence} on ice.\\\"\\n
        \   end\\n  end\\n\\n  def take_lysis_buff(op_count,op_in_cell_pellet)\\n
        \   op_table = [[\\\"Batch\\\",\\\"Item IDs\\\",\\\"Lysis buffer\\\",\\\"Protease
        inhibitor\\\"]]\\n    for i in 0..(op_count-1)\\n        row = []\\n        row
        \\u003c\\u003c i+1\\n        row \\u003c\\u003c {content:op_in_cell_pellet[i],
        check: true}\\n        row \\u003c\\u003c \\\"40 mL\\\"\\n        row \\u003c\\u003c
        \\\"1 tablet\\\"\\n        op_table \\u003c\\u003c row\\n    end\\n    show
        do\\n       title \\\"Lysis buffer preparation\\\"\\n       check \\\"Grab
        a beaker. Add #{op_count*20} mL of lysis buffer to the beaker.\\\"\\n       check
        \\\"Grab protease inhibitor from 4\xB0C refrigerator (R1-250). Add #{op_count*2}
        tablets to the beaker.\\\"\\n       check \\\"Stir for 10 minutes or until
        tablets are completely dissovled.\\\"\\n       timer initial: { hours: 0,
        minutes: 10, seconds: 0}\\n       #check \\\"Grab #{op_count} 50mL Falcon
        tubes and label the tubes with IDs: #{op_in_cell_pellet.to_sentence}\\\"\\n
        \      #check \\\"Add 40mL of lysis buffer to each Falcon tube.\\\"\\n       #check
        \\\"Add one tablet of protease inhibitor to each tube and cap tubes.\\\"\\n
        \      #table op_table\\n    end\\n  end\\n  \\n  #def shake_tube_and_mix_buff\\n
        \   #show do\\n       #title \\\"Place all tubes on the platform shaker\\\"\\n
        \      #timer initial: { hours: 0, minutes: 10, seconds: 0}\\n       #check
        \\\"Retrieve after 10 minutes or until the tablet is completely dissovled.\\\"\\n
        \   #end\\n  #end\\n\\n  def distribute_lysis_buff(op_count,op_in_cell_pellet)\\n
        \   op_table = [[\\\"225 mL Falcon tube ID\\\",\\\"Lysis buffer\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c {content:op_in_cell_pellet[i],
        check: true}\\n        row \\u003c\\u003c \\\"20 mL\\\"\\n        op_table
        \\u003c\\u003c row\\n    end\\n    show do\\n       title \\\"Suspend pellets
        in lysis buffer\\\"\\n       check \\\"Distribute 20 mL of lysis buffer into
        each tube: #{op_in_cell_pellet.to_sentence}.\\\"\\n       #table op_table\\n
        \      check \\\"Thoroughly suspend cell pellets in lysis buffer by pipetting
        until no cell clumps remain.\\\"\\n       warning \\\"All the precedures should
        be performed on ice.\\\"\\n       check \\\"Incubate all tubes on ice for
        20 minutes.\\\"\\n       timer initial: { hours: 0, minutes: 20, seconds:
        0}\\n    end\\n  end\\n  \\n  def lyse_cell_by_sonicator(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   op_table = [[\\\"225 mL Falcon tube ID\\\",\\\"50 mL tube ID\\\"]]\\n
        \   for i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c
        {content:op_in_cell_pellet[i], check: true}\\n        row \\u003c\\u003c i+1\\n
        \       op_table \\u003c\\u003c row\\n    end\\n    show do\\n       title
        \\\"Transfer samples to Falcon tubes\\\"\\n       check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        50 mL Falcon tube(s). Label from 1 to #{op_count}.\\\"\\n       check \\\"Transfer
        cell lysate from the 225 mL Falcon tube to the corresponding tube.\\\"\\n
        \      table op_table\\n    end\\n    show do\\n        title \\\"Sonication
        preparation\\\"\\n        bullet \\\"Bring the following items to Prof. Seelig's
        Lab.\\\"\\n        check \\\"Grab a beaker and fill it with ice.\\\"\\n        check
        \\\"The samples (ID: 1 to #{op_count}) in a ice bucket.\\\"\\n        check
        \\\"Ethanol spray bottle and Kimwipes.\\\"\\n        # pic?sonicator\\n    end\\n
        \ end\\n  \\n  def set_up_sonicator(op_count)\\n    show do\\n        title
        \\\"Set up a sonicator\\\"\\n        bullet \\\"Turn on the sonicator.\\\"\\n
        \       bullet \\\"Set the processing parameters by pressing the ENTER button:\\\"\\n
        \       check  \\\"95% power delivered to the probe\\\"\\n        check \\\"10secs
        ON, 30secs OFF, repeat 30 rounds.\\\"\\n        bullet \\\"Spray the sonicator
        tip with Ethanol and wipe until dry using Kimwipes.\\\"\\n        bullet \\\"Put
        the tube (ID:1) in the beaker filled with ice. Immerse the sonication tip
        at least 2cm into the sample.\\\"\\n        warning \\\"Sonicator tip should
        not be touching the bottom or sides of the tube.\\\"\\n        bullet \\\"Press
        START button to activiate the sonication.\\\"\\n        bullet \\\"After 30
        rounds are done, screw the cap and put it back to the ice bucket.\\\"\\n        bullet
        \\\"Perform sonication from tube 1 to #{op_count} until all tubes have been
        sonicated.\\\"\\n        bullet \\\"Clean the sonicator tip by Kimwipes and
        Ethanol in each time switching to the next tube.\\\"\\n        warning \\\"A
        temperature increase in samples might denature protein. Always keep the tube
        in a beaker filled with ice while performing sonication.\\\"\\n        image
        \\\"Actions/ProteinPurification/sonicator.jpg\\\"\\n    end\\n  end\\n    \\n
        \ def weigh_and_balance_tubes(op_count)\\n    show do\\n        title \\\"Scale
        balancing\\\"\\n        bullet \\\"Perform this step using the scale inside
        the gel room.\\\"\\n        check \\\"Zero the scale with an empty 50 mL tube
        and a rack.\\\"\\n        check \\\"Weigh the tube and make sure to balance.\\\"\\n
        \       check \\\"If the balance is off, add purification buffer (in the Media
        Bay) until a balance is reached.\\\"\\n        warning \\\"Be careful not
        to make cross contamination.\\\"\\n        warning \\\"Pairwise is sufficient.
        Balance samples in tubes.\\\"\\n    end\\n  end\\n  \\n  def spin_hs_centrifuge(op_count)\\n
        \   show do\\n       title \\\"Spin down cells\\\"\\n       bullet \\\"Bring
        tubes (ID: 1 to #{op_count}) in a ice bucket to Prof. Baker's Lab.\\\"\\n
        \      check \\\"Spin at 24,000g for 30 minutes at 4\xB0C.\\\"\\n       timer
        initial: { hours: 0, minutes: 30, seconds: 0}\\n       check \\\"Remove tubes
        from the high speed centrifuge.\\\"\\n       image \\\"Actions/ProteinPurification/high_speed_centrifuge.jpg\\\"\\n
        \   end\\n  end\\n\\n  def transfer_supernatant_to_new_tubes_label(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   op_table = [[\\\"Falcon tube ID\\\",\\\"New tube ID\\\"]]\\n    for i
        in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c i+1\\n
        \       row \\u003c\\u003c {content:op_out_cell_lysate[i], check: true}\\n
        \       op_table \\u003c\\u003c row\\n    end\\n    show do\\n      title
        \\\"Transfer supernatant to a new tube\\\"\\n      check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        50 mL Falcon tube(s).\\\"\\n      check \\\"Label tube(s) with ID: #{op_out_cell_lysate.to_sentence}.\\\"\\n
        \     check \\\"Transfer supernatant to the corresponding new tubes.\\\"\\n
        \     table op_table\\n    end\\n    show do\\n        title \\\"Clean up\\\"\\n
        \       check \\\"Discard tubes with ID: 1 to #{op_count}.\\\"\\n    end\\n
        \ end\\nend\\n\",\"parent_id\":1167,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:59:16.000-08:00\",\"updated_at\":\"2018-11-07T16:59:16.000-08:00\",\"user_id\":200},{\"id\":90730,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\n\\nclass Protocol\\n\\n  def main\\n    operations.retrieve.make\\n
        \   \\n    op_in_cell_pellet = []\\n    op_out_cell_lysate = []\\n    op_count
        = 0\\n    operations.running.each do |op|\\n        op_count = op_count +
        1\\n        op_in_cell_pellet \\u003c\\u003c op.input(\\\"Cell Pellet\\\").item.id\\n
        \       op_out_cell_lysate \\u003c\\u003c op.output(\\\"Cell Lysate\\\").item.id\\n
        \   end\\n    \\n     # Take the cell paste from -80\xB0C and let cells thaw
        on ice.\\n    take_cell_pellet(op_in_cell_pellet)\\n    \\n    # Take and
        add 50mL lysis buffer into a 50mL Falcon tube and add one tablet of protease
        inhibitor.\\n    take_lysis_buff(op_count,op_in_cell_pellet)\\n        \\n
        \   # Shake the Falcon tube and mix the buffer well until the protease inhibitor
        tablet fully dissolved in the lysis buffer.\\n    #shake_tube_and_mix_buff\\n
        \       \\n    # Equally distribute the lysis buffer into four Falcon tubes
        and gently suspend the cell paste in the lysis buffer.\\n    # keep tubes
        on ices\\n    distribute_lysis_buff(op_count,op_in_cell_pellet)\\n        \\n
        \   # Lyse the cell by a sonicator in Prof. Seelig\u2019s Lab.\\n    lyse_cell_by_sonicator(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \       \\n    # Turn on the sonicator and set the time and temperature condition,
        95% power output, 10secs on, 30secs off, repeat 30 rounds.\\n    set_up_sonicator(op_count)\\n
        \   \\n    weigh_and_balance_tubes(op_count)\\n         \\n    # Spin by the
        tabletop high-speed centrifuge under 24,000g for 30mins at 4\xB0C in Prof.
        Baker\u2019s Lab.\\n    spin_hs_centrifuge(op_count)\\n        \\n    # Transfer
        the supernatant to new tubes and discard the cell pellet.\\n    transfer_supernatant_to_new_tubes_label(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   \\n    operations.running.each do |op|\\n      op.output(\\\"Cell Lysate\\\").child_item.move
        \\\"4\xB0C or on ice for the (next) protocol\\\"\\n    end\\n    \\n    operations.store(io:
        \\\"output\\\", interactive: true)\\n\\n    return {}\\n\\n  end\\n  \\n  def
        take_cell_pellet(op_in_cell_pellet)\\n    show do\\n       title \\\"Thaw
        cell pellets on ice\\\"\\n       check \\\"Grab a ice bucket and fill it with
        ice.\\\"\\n       check \\\"Thaw #{op_in_cell_pellet.to_sentence} on ice.\\\"\\n
        \   end\\n  end\\n\\n  def take_lysis_buff(op_count,op_in_cell_pellet)\\n
        \   op_table = [[\\\"Batch\\\",\\\"Item IDs\\\",\\\"Lysis buffer\\\",\\\"Protease
        inhibitor\\\"]]\\n    for i in 0..(op_count-1)\\n        row = []\\n        row
        \\u003c\\u003c i+1\\n        row \\u003c\\u003c {content:op_in_cell_pellet[i],
        check: true}\\n        row \\u003c\\u003c \\\"40 mL\\\"\\n        row \\u003c\\u003c
        \\\"1 tablet\\\"\\n        op_table \\u003c\\u003c row\\n    end\\n    show
        do\\n       title \\\"Lysis buffer preparation\\\"\\n       check \\\"Grab
        a beaker. Add #{op_count*20}mL of lysis buffer to the beaker.\\\"\\n       check
        \\\"Grab protease inhibitor from 4\xB0C refrigerator (R1-250). Add #{op_count*2}
        tablets to the beaker.\\\"\\n       check \\\"Stir for 10 minutes or until
        tablets are completely dissovled.\\\"\\n       timer initial: { hours: 0,
        minutes: 10, seconds: 0}\\n       #check \\\"Grab #{op_count} 50mL Falcon
        tubes and label the tubes with IDs: #{op_in_cell_pellet.to_sentence}\\\"\\n
        \      #check \\\"Add 40mL of lysis buffer to each Falcon tube.\\\"\\n       #check
        \\\"Add one tablet of protease inhibitor to each tube and cap tubes.\\\"\\n
        \      #table op_table\\n    end\\n  end\\n  \\n  #def shake_tube_and_mix_buff\\n
        \   #show do\\n       #title \\\"Place all tubes on the platform shaker\\\"\\n
        \      #timer initial: { hours: 0, minutes: 10, seconds: 0}\\n       #check
        \\\"Retrieve after 10 minutes or until the tablet is completely dissovled.\\\"\\n
        \   #end\\n  #end\\n\\n  def distribute_lysis_buff(op_count,op_in_cell_pellet)\\n
        \   op_table = [[\\\"225mL Falcon tube ID\\\",\\\"Lysis buffer\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c {content:op_in_cell_pellet[i],
        check: true}\\n        row \\u003c\\u003c \\\"20mL\\\"\\n        op_table
        \\u003c\\u003c row\\n    end\\n    show do\\n       title \\\"Suspend pellets
        in lysis buffer\\\"\\n       check \\\"Distribute 20mL of lysis buffer into
        each tube: #{op_in_cell_pellet.to_sentence}.\\\"\\n       #table op_table\\n
        \      check \\\"Thoroughly suspend cell pellets in lysis buffer by pipetting
        until no cell clumps remain.\\\"\\n       warning \\\"All the precedures should
        be performed on ice.\\\"\\n       check \\\"Incubate all tubes on ice for
        20 minutes.\\\"\\n       timer initial: { hours: 0, minutes: 20, seconds:
        0}\\n    end\\n  end\\n  \\n  def lyse_cell_by_sonicator(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   op_table = [[\\\"225mL Falcon tube ID\\\",\\\"50mL tube ID\\\"]]\\n    for
        i in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c {content:op_in_cell_pellet[i],
        check: true}\\n        row \\u003c\\u003c i+1\\n        op_table \\u003c\\u003c
        row\\n    end\\n    show do\\n       title \\\"Transfer samples to Falcon
        tubes\\\"\\n       check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        50mL Falcon tube(s). Label from 1 to #{op_count}.\\\"\\n       check \\\"Transfer
        cell lysate from the 225mL Falcon tube to the corresponding tube.\\\"\\n       table
        op_table\\n    end\\n    show do\\n        title \\\"Sonication preparation\\\"\\n
        \       bullet \\\"Bring the following items to Prof. Seelig's Lab.\\\"\\n
        \       check \\\"Grab a beaker and fill it with ice.\\\"\\n        check
        \\\"The samples (ID: 1 to #{op_count}) in a ice bucket.\\\"\\n        check
        \\\"Ethanol spray bottle and Kimwipes.\\\"\\n        # pic?sonicator\\n    end\\n
        \ end\\n  \\n  def set_up_sonicator(op_count)\\n    show do\\n        title
        \\\"Set up a sonicator\\\"\\n        bullet \\\"Turn on the sonicator.\\\"\\n
        \       bullet \\\"Set the processing parameters by pressing the ENTER button:\\\"\\n
        \       check  \\\"95% power delivered to the probe\\\"\\n        check \\\"10secs
        ON, 30secs OFF, repeat 30 rounds.\\\"\\n        bullet \\\"Spray the sonicator
        tip with Ethanol and wipe until dry using Kimwipes.\\\"\\n        bullet \\\"Put
        the tube (ID:1) in the beaker filled with ice. Immerse the sonication tip
        at least 2cm into the sample.\\\"\\n        warning \\\"Sonicator tip should
        not be touching the bottom or sides of the tube.\\\"\\n        bullet \\\"Press
        START button to activiate the sonication.\\\"\\n        bullet \\\"After 30
        rounds are done, screw the cap and put it back to the ice bucket.\\\"\\n        bullet
        \\\"Perform sonication from tube 1 to #{op_count} until all tubes have been
        sonicated.\\\"\\n        bullet \\\"Clean the sonicator tip by Kimwipes and
        Ethanol in each time switching to the next tube.\\\"\\n        warning \\\"A
        temperature increase in samples might denature protein. Always keep the tube
        in a beaker filled with ice while performing sonication.\\\"\\n        image
        \\\"Actions/ProteinPurification/sonicator.jpg\\\"\\n    end\\n  end\\n    \\n
        \ def weigh_and_balance_tubes(op_count)\\n    show do\\n        title \\\"Scale
        balancing\\\"\\n        bullet \\\"Perform this step using the scale inside
        the gel room.\\\"\\n        check \\\"Zero the scale with an empty 50mL tube
        and a rack.\\\"\\n        check \\\"Weigh the tube and make sure to balance.\\\"\\n
        \       check \\\"If the balance is off, add purification buffer (in the Media
        Bay) until a balance is reached.\\\"\\n        warning \\\"Be careful not
        to make cross contamination.\\\"\\n        warning \\\"Pairwise is sufficient.
        Balance samples in tubes.\\\"\\n    end\\n  end\\n  \\n  def spin_hs_centrifuge(op_count)\\n
        \   show do\\n       title \\\"Spin down cells\\\"\\n       bullet \\\"Bring
        tubes (ID: 1 to #{op_count}) in a ice bucket to Prof. Baker's Lab.\\\"\\n
        \      check \\\"Spin at 24,000g for 30 minutes at 4\xB0C.\\\"\\n       timer
        initial: { hours: 0, minutes: 30, seconds: 0}\\n       check \\\"Remove tubes
        from the high speed centrifuge.\\\"\\n       image \\\"Actions/ProteinPurification/high_speed_centrifuge.jpg\\\"\\n
        \   end\\n  end\\n\\n  def transfer_supernatant_to_new_tubes_label(op_count,op_in_cell_pellet,op_out_cell_lysate)\\n
        \   op_table = [[\\\"Falcon tube ID\\\",\\\"New tube ID\\\"]]\\n    for i
        in 0..(op_count-1)\\n        row = []\\n        row \\u003c\\u003c i+1\\n
        \       row \\u003c\\u003c {content:op_out_cell_lysate[i], check: true}\\n
        \       op_table \\u003c\\u003c row\\n    end\\n    show do\\n      title
        \\\"Transfer supernatant to a new tube\\\"\\n      check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        50mL Falcon tube(s).\\\"\\n      check \\\"Label tube(s) with ID: #{op_out_cell_lysate.to_sentence}.\\\"\\n
        \     check \\\"Transfer supernatant to the corresponding new tubes.\\\"\\n
        \     table op_table\\n    end\\n    show do\\n        title \\\"Clean up\\\"\\n
        \       check \\\"Discard tubes with ID: 1 to #{op_count}.\\\"\\n    end\\n
        \ end\\nend\\n\",\"parent_id\":1167,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:58:11.000-08:00\",\"updated_at\":\"2018-11-07T16:58:11.000-08:00\",\"user_id\":200},{\"id\":90729,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n\\r\\n
        \   operations.retrieve.make\\r\\n    \\r\\n    op_out_column = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_out_column \\u003c\\u003c op.output(\\\"Affinity Column\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    tube_count = (op_count*20/50).floor\\r\\n        if
        remainer = (op_count*20 % 50) != 0\\r\\n            tube_count = tube_count
        + 1\\r\\n        end\\r\\n    \\r\\n    prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   #  Take a plastic gravity flow column with a two-way stopcock.Label the
        design ID on the column.\\r\\n    label_column(op_count,op_out_column)\\r\\n
        \       \\r\\n    # Put the column onto a support stand with a clamp.\\r\\n
        \   put_column_onto_stand\\r\\n        \\r\\n    # Well-mix the Ni-NTA resin
        and take 2.0mL from the bottle. Add the resin to gravity flow column.\\r\\n
        \   mix_resin(op_count, op_out_column)\\r\\n        \\r\\n    # Place an empty
        beaker underneath the gravity flow column, let the liquid flow through the
        column.\\r\\n    # Load 30mL binding buffer to the column. \\r\\n    # Turn
        on the stopcock on the column, let the binding buffer flow through the column.\\r\\n
        \   # Turn off the stopcock on the column.\\r\\n    # Load 3mL binding buffer
        to the column.\\r\\n    # Empty the beaker underneath the column.\\r\\n    load_20ml_binding_buffer(op_out_column)\\r\\n
        \   \\r\\n    operations.store\\r\\n     \\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  #prepare binding buffer (30mM imidazole_final concentration)\\r\\n
        \ #20mL/per column, imidazole aliquot concentration: 5M\\r\\n  def prepare_binding_buffer(op_count,tube_count)\\r\\n
        \   op_table = [[\\\"Item\\\",\\\"Volume\\\"],\\r\\n    [\\\"Purification
        buffer\\\",{content:\\\"#{op_count*19.9} mL\\\", check: true}],\\r\\n    [\\\"Imidazole
        aliquot\\\",{content:\\\"#{op_count*132} \xB5l\\\", check: true}]\\r\\n    ]\\r\\n
        \   show do\\r\\n        title \\\"Prepare binding buffer\\\"\\r\\n        check
        \\\"Grab a beaker and label with \\u003cb\\u003eBinding buffer\\u003c/b\\u003e.\\\"\\r\\n
        \       check \\\"Grab the following items:\\\"\\r\\n        bullet \\\"Purification
        buffer, in the Media Bay\\\"\\r\\n        bullet \\\"Imidazole aliquot, in
        a box labeled \\u003cb\\u003eProtein purification\\u003c/b\\u003e in -20\xB0C
        freezer (B1-165)\\\"\\r\\n        check \\\"Add buffers into the beaker.\\\"\\r\\n
        \       table op_table\\r\\n        #image \\\"Actions/ProteinPurification/purification_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def label_column(op_count,op_out_column)\\r\\n
        \   show do \\r\\n      title \\\"Grab and label columns\\\"\\r\\n      check
        \\\"Grab #{op_count} column(s) and label the column with ID: #{op_out_column.to_sentence}.\\\"\\r\\n
        \     check \\\"Remove the snap-off tip at the bottom of the column. Attach
        a flow adaptor to it.\\\"\\r\\n      check \\\"Close the column outlet\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/empty_column_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def put_column_onto_stand\\r\\n    show
        do\\r\\n       title \\\"Column preparation\\\"\\r\\n       check \\\"Grab
        a support stand with clamps from bench and use the adjustable knob to mount
        the rack at the desired height.\\\"\\r\\n       check \\\"Clamp the middle
        of columns and make sure the column outlets are closed.\\\"\\r\\n       image
        \\\"Actions/ProteinPurification/stand_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def mix_resin(op_count, op_out_column)\\r\\n    op_table
        = [[\\\"Column ID\\\",\\\"Bed volume of Ni-NTA resin\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c {content:op_out_column[i],
        check: true}\\r\\n        row \\u003c\\u003c \\\"2 mL\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n       title \\\"Load
        Ni-NTA resin\\\"\\r\\n       bullet \\\"Perform the steps with the following
        columns: #{op_out_column.to_sentence}.\\\"\\r\\n       check \\\"Place a beaker
        underneath each column.\\\"\\r\\n       check \\\"Grab Ni-NTA resin from 4\xB0C
        refrigerator (R1-250). Suspend Ni-NTA resin by using a disposable dropper.\\\"\\r\\n
        \      check \\\"Slowly load Ni-NTA slurry to each column. Avoid introducing
        air bubbles.\\\"\\r\\n       check \\\"Wait for 30 sec to allow the resin
        to settle.\\\"\\r\\n       check \\\"Open the column oulets and let the liquid
        move out of the column.\\\"\\r\\n       check \\\"Check on the bed volume
        of resin. Make sure it reaches to 2 mL.(as shown in the picture.)\\\"\\r\\n
        \      note \\\"If the bed volume is less than 2 mL, close the column outlet
        and then load resin.\\\"\\r\\n       image \\\"Actions/ProteinPurification/resin_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_20ml_binding_buffer(op_out_column)\\r\\n
        \   show do\\r\\n       title \\\"Equilibrate Resin\\\"\\r\\n       bullet
        \\\"Perform the steps with the following columns: #{op_out_column.to_sentence}.\\\"\\r\\n
        \      check \\\"Close the column outlet. Gently load 20 mL of binding buffer
        to each column.\\\"\\r\\n       warning \\\"Be careful not to disturb the
        resin\\\"\\r\\n       check \\\"Open the column outlet. Allow the buffer to
        flow through the columns.\\\"\\r\\n       check \\\"Close the column oulet.
        Gently load 1 mL of binding buffer to each column.\\\"\\r\\n       check \\\"Empty
        the beaker underneath each column.\\\"\\r\\n       image \\\"Actions/ProteinPurification/oulet_column_packing.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  \\r\\nend\",\"parent_id\":1159,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:57:57.000-08:00\",\"updated_at\":\"2018-11-07T16:57:57.000-08:00\",\"user_id\":200},{\"id\":90728,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n
        \       \\r\\n    # Remove the overexpression culture from the shaker.\\r\\n
        \   operations.retrieve.make\\r\\n        \\r\\n    op_in_overexpression =
        []\\r\\n    op_out_cell_pellet = []\\r\\n    op_out_after = []\\r\\n    op_count
        = 0\\r\\n    operations.running.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overexpression \\u003c\\u003c op.input(\\\"Overexpression\\\").item.id\\r\\n
        \       op_out_cell_pellet \\u003c\\u003c op.output(\\\"Cell pellet\\\").item.id\\r\\n
        \       op_out_after \\u003c\\u003c op.output(\\\"After IPTG\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n    # Reserve 1ml cell culture after IPTG induction in
        Eppendorf with design ID \\r\\n    reserve_culture_after_iptg(op_count,op_in_overexpression,op_out_after)\\r\\n
        \   \\r\\n    # Take four tubes and label them with numbers.\\r\\n    take_tubes_and_label(op_count,op_in_overexpression,op_out_cell_pellet)\\r\\n
        \       \\r\\n    scale_balancing\\r\\n    \\r\\n    spin_down_cell(op_count,op_out_after,op_in_overexpression,op_out_cell_pellet)\\r\\n\\r\\n
        \   # Pour the culture medium into four tubes and harvest cells by centrifugation
        under 4696 g-force for 30mins at 4\xB0C.\\r\\n    # Remove the suspension
        and keep the pellet.\\r\\n    # Measure OD600 value cell culture after IPTG
        induction by nanodrop (Prof. James Carother\u2019s lab).\\r\\n    od_value_after
        = measure_od_value op_out_after\\r\\n        \\r\\n    # Record the OD value.\\r\\n
        \   i = 0\\r\\n    operations.running.each do |op|\\r\\n        sample_after
        = op.output(\\\"After IPTG\\\").item\\r\\n        sample_after.associate :od_value,
        od_value_after[i]\\r\\n        i = i + 1\\r\\n    end\\r\\n        \\r\\n
        \   # Weigh the pellet.\\r\\n    #sample_weight = weigh_pellet op_out_cell_pellet\\r\\n
        \   \\r\\n    # Record the pellet weight.\\r\\n    #i = 0\\r\\n    #operations.running.each
        do |op|\\r\\n        #pellet = op.output(\\\"Cell pellet\\\").item\\r\\n        #pellet.associate
        :weight, sample_weight[i]\\r\\n        #i = i + 1\\r\\n    #end\\r\\n    \\r\\n
        \   # Store at -80\xB0C.\\r\\n    \\r\\n      operations.running.each do |op|\\r\\n
        \     op.output(\\\"Cell pellet\\\").child_item.move \\\"-80\xB0C freezer\\\"\\r\\n
        \   end\\r\\n    \\r\\n     operations.store(io: \\\"output\\\", interactive:
        true, method: 'boxes')\\r\\n   \\r\\n    return {}\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def measure_od_value(meas_sample)\\r\\n    od_value = []\\r\\n    show do\\r\\n
        \     title \\\"Measure OD600 value\\\"\\r\\n      #after IPTG\\r\\n      check
        \\\"Grab a box of 1000 \xB5l tip, a P1000 pipettor, a tip waste container,
        #{meas_sample.size+1} plastic cuvettes and 1 mL of LB in a 1.5 mL tube.\\\"\\r\\n
        \     check \\\"Bring the samples (ID: #{meas_sample.to_sentence}) to Prof.
        James Carother\u2019s lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    \\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n
        \       title \\\"Enter OD value\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"Enter OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\n  def reserve_culture_after_iptg(op_count,op_in_overexpression,op_out_after)\\r\\n
        \   op_table = [[\\\"Cell curture ID\\\",\\\"Volume\\\",\\\"1.5 mL tube ID\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c
        op_in_overexpression[i]\\r\\n        row \\u003c\\u003c \\\"1 mL\\\"\\r\\n
        \       row \\u003c\\u003c {content:op_out_after[i], check: true}\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n        title
        \\\"Pre-cool a centrifuge\\\"\\r\\n        bullet \\\"Set the centrifuge to
        4\xB0C.\\\"\\r\\n        image \\\"Actions/ProteinPurification/centrifuge.jpg\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Reserve 1 mL of
        cell culture\\\"\\r\\n        # after IPTG induction\\r\\n        check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 1.5 mL tube(s).\\\"\\r\\n        check
        \\\"Label the tube with ID: #{op_out_after.to_sentence}.\\\"\\r\\n        check
        \\\"Transfer 1 mL of cell culture to the corresponding 1.5mL tube by using
        a motorized pipet filler.\\\"\\r\\n        table op_table\\r\\n        warning
        \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def take_tubes_and_label(op_count,op_in_overexpression,op_out_cell_pellet)\\r\\n
        \   op_table = [[\\\"Cell culture ID\\\",\\\"Volume\\\",\\\"225mL Falcon tube
        ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op_in_overexpression[i]\\r\\n        row \\u003c\\u003c \\\"200
        mL\\\"\\r\\n        row \\u003c\\u003c {content:op_out_cell_pellet[i], check:
        true}\\r\\n        op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do \\r\\n      title \\\"Grab tubes and label with ID\\\"\\r\\n      check
        \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 225 mL Falcon tube(s)
        and label with ID: #{op_out_cell_pellet.to_sentence}.\\\"\\r\\n      check
        \\\"Pour 200 mL of cell culture to the corresponding tube and screw the caps.\\\"\\r\\n
        \     table op_table\\r\\n      image \\\"Actions/ProteinPurification/225_falcon_tube.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def scale_balancing\\r\\n    show do\\r\\n
        \       title \\\"Scale balancing\\\"\\r\\n        bullet \\\"Perform this
        step using the scale inside the gel room.\\\"\\r\\n        check \\\"Zero
        the scale with an empty 225 mL tube and a beaker.\\\"\\r\\n        check \\\"Weigh
        the tube and make sure to balance.\\\"\\r\\n        check \\\"If the balance
        is off, add LB until a balance is reached.\\\"\\r\\n        warning \\\"Pairwise
        is sufficient. Balance samples in tubes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def spin_down_cell(op_count,op_out_after,op_in_overexpression,op_out_cell_pellet)\\r\\n
        \   \\r\\n    op_table = [[\\\"Cell culture ID\\\",\\\"Volume\\\",\\\"225
        mL Falcon tube ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n        row
        = []\\r\\n        row \\u003c\\u003c op_in_overexpression[i]\\r\\n        row
        \\u003c\\u003c \\\"all the remaining cell culture\\\"\\r\\n        row \\u003c\\u003c
        {content:op_out_cell_pellet[i], check: true}\\r\\n        op_table \\u003c\\u003c
        row\\r\\n    end\\r\\n    \\r\\n    run = (op_count/4).floor\\r\\n    remainder
        = op_count % 4\\r\\n    if (remainder) != 0\\r\\n        run = run + 1\\r\\n
        \   end\\r\\n    \\r\\n    for i in 1..run\\r\\n        if (i*4 \\u003e op_count)\\r\\n
        \           leng = remainder\\r\\n        else\\r\\n            leng = 4\\r\\n
        \       end\\r\\n        tube_id = op_out_after[(i-1)*4,leng]\\r\\n        \\r\\n
        \       show do\\r\\n            title \\\"Spin down the cell\\\"\\r\\n            bullet
        \\\"Perform the steps with the following tubes: #{op_out_cell_pellet.to_sentence}.\\\"\\r\\n
        \           check \\\"Spin tubes at 4696g for 15 minutes.\\\"\\r\\n            check
        \\\"Remove tubes from the centrifuge and pour off supernatant.\\\"\\r\\n        end\\r\\n
        \       show do \\r\\n            title \\\"Spin down the cell\\\"\\r\\n            bullet
        \\\"Perform the steps with the following tubes: #{op_out_cell_pellet.to_sentence}.\\\"\\r\\n
        \           check \\\"Pour the remaining cell culture to the corresponding
        tube.\\\"\\r\\n            table op_table\\r\\n            warning \\\"Pairwise
        is sufficient. Balance samples in tubes.\\\"\\r\\n            warning \\\"Scale
        balancing. If the balance is off, add LB until a balance is reached.\\\"\\r\\n
        \           check \\\"Spin tubes at 4696g for 15 minutes.\\\"\\r\\n            check
        \\\"Remove tubes from the centrifuge.\\\"\\r\\n            check \\\"Pour
        off supernatant and store the pellet in -80\xB0C freezer.\\\"\\r\\n        end\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n=begin\\r\\n  def weigh_pellet op_out_cell_pellet\\r\\n
        \   sample_weight = []\\r\\n    show do\\r\\n        title \\\"Weigh the cell
        pellet\\\"\\r\\n        note \\\"Weigh the cell pellet using scale.\\\"\\r\\n
        \       check \\\"Zero the scale with an empty 225mL falcon tube\\\"\\r\\n
        \       note \\\"Weigh each cell pellet and enter the weights in the following
        order (corresponsing to sample ID):\\\"\\r\\n    end\\r\\n    op_out_cell_pellet.each
        do |id|\\r\\n      weight_tmp = show do\\r\\n        title \\\"Weigh the cell
        pellet\\\"\\r\\n        get \\\"number\\\", var: \\\"x\\\", label: \\\"Enter
        weight value(g) with ID:#{id}\\\", default: 0\\r\\n      end\\r\\n      sample_weight
        \\u003c\\u003c weight_tmp[:x]\\r\\n    end\\r\\n    return sample_weight\\r\\n
        \ end\\r\\n=end\\r\\n  \\r\\nend\",\"parent_id\":1158,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:57:03.000-08:00\",\"updated_at\":\"2018-11-07T16:57:03.000-08:00\",\"user_id\":200},{\"id\":90727,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n
        \       \\r\\n    # Remove the overexpression culture from the shaker.\\r\\n
        \   operations.retrieve.make\\r\\n        \\r\\n    op_in_overexpression =
        []\\r\\n    op_out_overexpression = []\\r\\n    op_out_before = []\\r\\n    op_count
        = 0\\r\\n    operations.running.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overexpression \\u003c\\u003c op.input(\\\"Overexpression\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \       op_out_before \\u003c\\u003c op.output(\\\"Before IPTG\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    # Reserve 1ml cell culture before IPTG induction
        in Eppendorf with design ID\\r\\n    reserve_culture_before_iptg(op_count,op_in_overexpression,op_out_before)\\r\\n
        \   \\r\\n    # Add 800uL isopropyl-1-thio-beta-D-galactopyranoside (IPTG)
        into the culture.\\r\\n    add_iptg(op_count,op_in_overexpression)\\r\\n    \\r\\n
        \   relabel_overexpression(op_count,op_in_overexpression,op_out_overexpression)\\r\\n
        \       \\r\\n    # Keep the culture in 37 \xB0C shaker for 4 hours.\\r\\n
        \   # After 4 hours, remove the culture from the shaker.\\r\\n    culture_in_shaker_for_4hrs\\r\\n
        \   \\r\\n    # Measure OD600 value cell culture before IPTG induction by
        nanodrop (Prof. James Carother\u2019s lab).\\r\\n    od_value_before = measure_od_value(op_out_before)\\r\\n
        \       \\r\\n    # Record the OD value.\\r\\n    i = 0\\r\\n    operations.running.each
        do |op|\\r\\n        sample_before = op.output(\\\"Before IPTG\\\").item\\r\\n
        \       sample_before.associate :od_value, od_value_before[i]\\r\\n        i
        = i + 1\\r\\n    end\\r\\n    \\r\\n    spin_down_pellet(op_out_before)\\r\\n
        \   \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n    end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n\\r\\n
        \ def reserve_culture_before_iptg(op_count,op_in_overexpression,op_out_before)\\r\\n
        \   op_table = [[\\\"Cell curture ID\\\",\\\"Volume\\\",\\\"1.5mL tube ID\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c
        op_in_overexpression[i]\\r\\n        row \\u003c\\u003c \\\"1 mL\\\"\\r\\n
        \       row \\u003c\\u003c {content:op_out_before[i], check: true}\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n      title \\\"Reserve
        1 mL of cell culture before IPTG induction\\\"\\r\\n      check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5mL tube(s).\\\"\\r\\n      check \\\"Label tubes with ID: #{op_out_before.to_sentence}.\\\"\\r\\n
        \     check \\\" Transfer 1 mL of cell culture to the corresponding 1.5 mL
        tube by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def add_iptg(op_count,op_in_overexpression)\\r\\n
        \   show do \\r\\n      title \\\"IPTG induction\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e IPTG aliquot(s) from a box labeled
        \\u003cb\\u003eprotein purification\\u003c/b\\u003e in -20\xB0C freezer (B1-165).\\\"\\r\\n
        \     check \\\"Add one IPTG aliquot to each flask: #{op_in_overexpression.to_sentence}.\\\"
        \\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def relabel_overexpression(op_count,op_in_overexpression,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Old sample ID\\\",\\\"New Label\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c op_in_overexpression[i]\\r\\n
        \       row \\u003c\\u003c {content:op_out_overexpression[i], check: true}\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n        title
        \\\"Relabel flasks with new ID\\\"\\r\\n        check \\\"Write ID #{op_out_overexpression.to_sentence}
        on a piece of lab tape and affix it on the old labels.\\\"\\r\\n        table
        op_table\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def culture_in_shaker_for_4hrs\\r\\n
        \   show do \\r\\n      title \\\"Incubate\\\"\\r\\n      check \\\"Incubate
        cell culture at 37\xB0C shaker incubator for 4 hours.\\\"\\r\\n      bullet
        \\\"\\u003ca href=\\\\'https://www.google.com/search?q=4%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 4 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Harvest
        Cell\\\\'\\u003c/b\\u003e protocol.\\\"\\r\\n      check \\\"While the cell
        cultures incubate, finish this protocol by completing the remaining tasks.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def measure_od_value(meas_sample)\\r\\n
        \   od_value = []\\r\\n    show do\\r\\n      bullet \\\"Measure OD600 value
        of cell culture before IPTG induction.\\\"\\r\\n      check \\\"Grab a box
        of 1000 \xB5l tip, a P1000 pipettor, a tip waste container, #{meas_sample.size+1}
        plastic cuvettes and 1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring
        the samples (ID: #{meas_sample.to_sentence}) to Prof. James Carother\u2019s
        lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value\\\"\\r\\n        get \\\"number\\\", var: \\\"x\\\", label:
        \\\"Enter OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n      od_value
        \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n  end\\r\\n
        \ \\r\\n  def spin_down_pellet(op_out_before)\\r\\n    show do\\r\\n        title
        \\\"Spin down cell\\\"\\r\\n        bullet \\\"Perform the steps with the
        following tubes: #{op_out_before.to_sentence}.\\\"\\r\\n        check \\\"Spin
        down at 6000g for 5 minutes.\\\"\\r\\n        check \\\"Remove tubes from
        the centrifuge. Pour off supernatant and keep the pellet.\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\nend\",\"parent_id\":1154,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:55:29.000-08:00\",\"updated_at\":\"2018-11-07T16:55:29.000-08:00\",\"user_id\":200},{\"id\":90726,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nclass Protocol\\r\\n\\r\\n  def main\\r\\n
        \       \\r\\n    # Remove the overexpression culture from the shaker.\\r\\n
        \   operations.retrieve.make\\r\\n        \\r\\n    op_in_overexpression =
        []\\r\\n    op_out_overexpression = []\\r\\n    op_out_before = []\\r\\n    op_count
        = 0\\r\\n    operations.running.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overexpression \\u003c\\u003c op.input(\\\"Overexpression\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \       op_out_before \\u003c\\u003c op.output(\\\"Before IPTG\\\").item.id\\r\\n
        \   end\\r\\n    \\r\\n    # Reserve 1ml cell culture before IPTG induction
        in Eppendorf with design ID\\r\\n    reserve_culture_before_iptg(op_count,op_in_overexpression,op_out_before)\\r\\n
        \   \\r\\n    # Add 800uL isopropyl-1-thio-beta-D-galactopyranoside (IPTG)
        into the culture.\\r\\n    add_iptg(op_count,op_in_overexpression)\\r\\n    \\r\\n
        \   relabel_overexpression(op_count,op_in_overexpression,op_out_overexpression)\\r\\n
        \       \\r\\n    # Keep the culture in 37 \xB0C shaker for 4 hours.\\r\\n
        \   # After 4 hours, remove the culture from the shaker.\\r\\n    culture_in_shaker_for_4hrs\\r\\n
        \   \\r\\n    # Measure OD600 value cell culture before IPTG induction by
        nanodrop (Prof. James Carother\u2019s lab).\\r\\n    od_value_before = measure_od_value(op_out_before)\\r\\n
        \       \\r\\n    # Record the OD value.\\r\\n    i = 0\\r\\n    operations.running.each
        do |op|\\r\\n        sample_before = op.output(\\\"Before IPTG\\\").item\\r\\n
        \       sample_before.associate :od_value, od_value_before[i]\\r\\n        i
        = i + 1\\r\\n    end\\r\\n    \\r\\n    spin_down_pellet(op_out_before)\\r\\n
        \   \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n    end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n\\r\\n
        \ def reserve_culture_before_iptg(op_count,op_in_overexpression,op_out_before)\\r\\n
        \   op_table = [[\\\"Cell curture ID\\\",\\\"Volume\\\",\\\"1.5mL tube ID\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c
        op_in_overexpression[i]\\r\\n        row \\u003c\\u003c \\\"1 mL\\\"\\r\\n
        \       row \\u003c\\u003c {content:op_out_before[i], check: true}\\r\\n        op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n      title \\\"Reserve
        1 mL of cell culture before IPTG induction\\\"\\r\\n      check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        1.5mL tube(s).\\\"\\r\\n      check \\\"Label tubes with ID: #{op_out_before.to_sentence}.\\\"\\r\\n
        \     check \\\" Transfer 1 mL of cell culture to the corresponding 1.5 mL
        tube by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def add_iptg(op_count,op_in_overexpression)\\r\\n
        \   show do \\r\\n      title \\\"IPTG induction\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e IPTG aliquot(s) from a box labeled
        \\u003cb\\u003eprotein purification\\u003c/b\\u003e in -20\xB0C freezer (B1-165).\\\"\\r\\n
        \     check \\\"Add one IPTG aliquot to each flask: #{op_in_overexpression.to_sentence}.\\\"
        \\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def relabel_overexpression(op_count,op_in_overexpression,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Old sample ID\\\",\\\"New Label\\\"]]\\r\\n    for i
        in 0..(op_count-1)\\r\\n        row = []\\r\\n        row \\u003c\\u003c op_in_overexpression[i]\\r\\n
        \       row \\u003c\\u003c {content:op_out_overexpression[i], check: true}\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n    end\\r\\n    show do\\r\\n        title
        \\\"Relabel flasks with new ID\\\"\\r\\n        check \\\"Write ID #{op_out_overexpression.to_sentence}
        on a piece of lab tape and affix it on the old labels.\\\"\\r\\n        table
        op_table\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def culture_in_shaker_for_4hrs\\r\\n
        \   show do \\r\\n      title \\\"Incubate\\\"\\r\\n      check \\\"Incubate
        cell culture at 37\xB0C shaker incubator for 4 hours.\\\"\\r\\n      bullet
        \\\"\\u003ca href=\\\\'https://www.google.com/search?q=4%20hour%20timer\\\\'
        target=\\\\'_blank\\\\'\\u003eUse a 4 hour Google timer\\u003c/a\\u003e to
        set a reminder, at which point you will start the \\u003cb\\u003e\\\\'Harvest
        Cell\\\\'\\u003c/b\\u003e protocol.\\\"\\r\\n      check \\\"While the cell
        cultures incubate, finish this protocol by completing the remaining tasks.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def measure_od_value(meas_sample)\\r\\n
        \   od_value = []\\r\\n    show do\\r\\n      bullet \\\"Measure OD600 value
        of cell culture before IPTG induction.\\\"\\r\\n      check \\\"Grab a box
        of 1000\xB5L tip, a P1000 pipettor, a tip waste container, #{meas_sample.size+1}
        plastic cuvettes and 1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring
        the samples (ID: #{meas_sample.to_sentence}) to Prof. James Carother\u2019s
        lab.\\\"\\r\\n      check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value\\\"\\r\\n        get \\\"number\\\", var: \\\"x\\\", label:
        \\\"Enter OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n      od_value
        \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n  end\\r\\n
        \ \\r\\n  def spin_down_pellet(op_out_before)\\r\\n    show do\\r\\n        title
        \\\"Spin down cell\\\"\\r\\n        bullet \\\"Perform the steps with the
        following tubes: #{op_out_before.to_sentence}.\\\"\\r\\n        check \\\"Spin
        down at 6000g for 5 minutes.\\\"\\r\\n        check \\\"Remove tubes from
        the centrifuge. Pour off supernatant and keep the pellet.\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\nend\",\"parent_id\":1154,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:55:07.000-08:00\",\"updated_at\":\"2018-11-07T16:55:07.000-08:00\",\"user_id\":200},{\"id\":90725,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\n\\r\\nneeds \\\"Cloning Libs/Cloning\\\"\\r\\nneeds
        \\\"Standard Libs/Debug\\\"\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\nclass
        Protocol\\r\\n\\r\\n  include Feedback\\r\\n  include Cloning\\r\\n  include
        Debug\\r\\n\\r\\n  def main\\r\\n    # Remove the starter from the shaker.\\r\\n
        \   operations.retrieve\\r\\n    \\r\\n    # check the starter(input) have
        growth\\r\\n    verify_growth(operations)\\r\\n    \\r\\n    operations.make\\r\\n\\r\\n
        \   op_in_overnight = []\\r\\n    op_out_overexpression = []\\r\\n    op_count
        = 0\\r\\n\\r\\n    operations.each do |op|\\r\\n        op_count = op_count
        + 1\\r\\n        op_in_overnight \\u003c\\u003c op.input(\\\"Overnight\\\").item.id\\r\\n
        \       op_out_overexpression \\u003c\\u003c op.output(\\\"Overexpression\\\").item.id\\r\\n
        \   end\\r\\n\\r\\n     \\r\\n    # Take a 2L flask, add 0.8L LB medium(containing
        100ug/ml-ampicillin) into the flask.\\r\\n    # Take 16ml overnight starter
        culture, add the starter to the 2L flask with LB medium in it.\\r\\n    take_flask_add_medium(op_count,op_out_overexpression)\\r\\n\\r\\n
        \   # 2 prepped flasks\\r\\n\\r\\n    # Grow the culture in the 37\xB0C shaker
        with 220 rpm.\\r\\n    grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   \\r\\n    operations.store io: \\\"input\\\", interactive: true\\r\\n
        \   \\r\\n    # set a 150mins timer\\r\\n    set_timer_150mins(op_out_overexpression,op_count)\\r\\n\\r\\n
        \   # Measure optical absorbance of 600nm (OD value) by nanodrop ( in Prof.
        James Carother\u2019s lab) with plastic cuvette.\\r\\n    od_tmp = measure_od_value
        op_out_overexpression\\r\\n\\r\\n    # Record the OD value.\\r\\n    j = 0\\r\\n
        \   operations.running.each do |op|\\r\\n        culture = op.output(\\\"Overexpression\\\").item\\r\\n
        \       culture.associate :od_value, od_tmp[j]\\r\\n        if (od_tmp[j]
        \\u003c 0.6) or (od_tmp[j] \\u003e 1.5)\\r\\n            culture.mark_as_deleted\\r\\n
        \           culture.save\\r\\n            op.temporary[:delete] = true\\r\\n
        \           op.error :od_error, \\\"The OD600 value of #{culture.id} is not
        within the range of 0.6-1.5. Discard the cell culture.\\\"\\r\\n        end\\r\\n
        \       j = j + 1\\r\\n        #culture.associate :od_value, 33\\r\\n        #show{note
        \\\"od value is #{op.output_data(\\\"Overexpression\\\", :od_value)}\\\"}\\r\\n
        \   end\\r\\n    \\r\\n    operations.running.each do |op|\\r\\n      op.output(\\\"Overexpression\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\r\\n      op.input(\\\"Overnight\\\").child_item.store\\r\\n
        \   end\\r\\n    \\r\\n    operations.store\\r\\n    \\r\\n    return {}\\r\\n
        \ end\\r\\n  \\r\\n  def verify_growth(operations)\\r\\n    verify_growth
        = show do\\r\\n        title \\\"Check if overnight starters have growth\\\"\\r\\n
        \       note \\\"Choose No for the overnight starter that does not have growth.
        Empty flask and put in the clean station.\\\"\\r\\n        operations.each
        do |op|\\r\\n            in_id = op.input(\\\"Overnight\\\").item.id\\r\\n
        \           select [\\\"Yes\\\", \\\"No\\\"], var: \\\"verify #{in_id}\\\",
        label: \\\"Does flask #{in_id} have growth?\\\"  \\r\\n        end\\r\\n    end\\r\\n
        \   \\r\\n    operations.select { |op| verify_growth[:\\\"verify#{op.input(\\\"Overnight\\\").item.id}\\\".to_sym]
        == \\\"No\\\" }.each do |op|\\r\\n        on = op.input(\\\"Overnight\\\").item\\r\\n
        \       on.mark_as_deleted\\r\\n        on.save\\r\\n            \\r\\n        op.error
        :no_growth, \\\"Your overnight starter had no growth!\\\"\\r\\n    end\\r\\n
        \ end    \\r\\n  \\r\\n  def take_flask_add_medium(op_count,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overexpression flask ID\\\",\\\"Media\\\",\\\"Amp\\\"]]\\r\\n
        \   for i in 0..(op_count-1)\\r\\n      row = []\\r\\n      row \\u003c\\u003c
        {content:op_out_overexpression[i], check: true}\\r\\n      row \\u003c\\u003c
        \\\"450 mL LB\\\"\\r\\n      row \\u003c\\u003c \\\"1 aliquot\\\"\\r\\n      op_table
        \\u003c\\u003c row\\r\\n    end\\r\\n    #concentration of Amp aliquot(concentration:
        100mg/ml)\\r\\n    show do \\r\\n      title \\\"Label flasks and load media\\\"\\r\\n
        \     check \\\"Grab \\u003cb\\u003e#{op_count}\\u003c/b\\u003e 2L flask(s)
        (Sterile). Write ID #{op_out_overexpression.to_sentence} on a piece of lab
        tape and affix it on the flasks.\\\"\\r\\n      check \\\"Grab a graduated
        cylinder (Sterile). Add 450 mL of LB to each flask.\\\"\\r\\n      check \\\"Grab
        \\u003cb\\u003e#{op_count}\\u003c/b\\u003e Amp aliquots from a box labeled
        \\u003cb\\u003eprotein purificaiton\\u003c/b\\u003e in -20\xB0C freezer (B1-165).
        Add one Amp aliquot to each flask.\\\"\\r\\n      table op_table\\r\\n      image
        \\\"Actions/ProteinPurification/glass_flask_column_packing.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n   # tell technicians to return the cultures to the 37\xB0C
        shaker\\r\\n  def grow_culture_in_shaker(op_count,op_in_overnight,op_out_overexpression)\\r\\n
        \   op_table = [[\\\"Overnight starter ID\\\",\\\"Volume\\\",\\\"Overexpression
        flask ID\\\"]]\\r\\n    for i in 0..(op_count-1)\\r\\n      row = []\\r\\n
        \     row \\u003c\\u003c op_in_overnight[i]\\r\\n      row \\u003c\\u003c
        \\\"10 mL\\\"\\r\\n      row \\u003c\\u003c {content:op_out_overexpression[i],
        check: true}\\r\\n      op_table \\u003c\\u003c row\\r\\n    end\\r\\n    \\r\\n
        \   show do\\r\\n      title \\\"Transfer the overnight starter into flasks\\\"\\r\\n
        \     check \\\"Transfer 10 mL of overnight starter culture into the corresponding
        flask by using a motorized pipet filler.\\\"\\r\\n      table op_table\\r\\n
        \     warning \\\"Use a new serological pipette to avoid cross contamination.\\\"\\r\\n
        \   end\\r\\n    \\r\\n    show do\\r\\n        title \\\"Store overnight
        starter\\\"\\r\\n        note \\\"In the Media Bay, collect \\u003cb\\u003e#{op_count}\\u003c/b\\u003e
        14 mL tube(s).\\\"\\r\\n        note \\\"Write the ID: #{op_in_overnight}
        on the tube(s).\\\"\\r\\n        note \\\"Transfer all the remaining overnight
        starter to the corresponding tube.\\\"\\r\\n    end\\r\\n  end\\r\\n  ######Need
        to put the input back\\r\\n  \\r\\n  # Until OD value reaches ~0.8-1.0.\\r\\n
        \ # Measure OD600 value after 150mins.\\r\\n  \\r\\n   def set_timer_150mins(op_out_overexpression,op_count)\\r\\n
        \   show do\\r\\n      title \\\"Grow cell culture in 37\xB0C shaker\\\"\\r\\n
        \     check \\\"Incubate #{op_out_overexpression.to_sentence} at 37\xB0C shaker.\\\"\\r\\n
        \     check \\\"Set a 2.5-hour timer.\\\" \\r\\n      timer initial: { hours:
        2, minutes: 30, seconds: 0}\\r\\n    end\\r\\n    \\r\\n    show do\\r\\n
        \       title \\\"Check cell density\\\"\\r\\n        check \\\"Grab #{op_count}
        1.5mL tube(s). Label with ID: #{op_out_overexpression.to_sentence}. \\\"\\r\\n
        \       check \\\"Transfer 1mL of cell culture to the corresponding 1.5mL
        tube.\\\"\\r\\n        check \\\"Return the cell culture to 37\xB0C shaker.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def measure_od_value(meas_sample)\\r\\n
        \   od_value = []\\r\\n    show do\\r\\n      title \\\"Measure OD600 value
        of cell culture\\\"\\r\\n      check \\\"Grab a box of 1000 \xB5l tip, a P1000
        pipettor, a tip waste container, #{meas_sample.size+1} plastic cuvettes and
        1mL of LB in a 1.5 mL tube.\\\"\\r\\n      check \\\"Bring the samples (ID
        #{meas_sample.to_sentence}) to Prof. James Carother\u2019s lab.\\\"\\r\\n
        \     check \\\"Open Nanodrop 2000 \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        Home \\u003cb\\u003e\\u003e\\u003c/b\\u003e cell culture \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        use cuvette \\u003cb\\u003e\\u003e\\u003c/b\\u003e pathlength: 10mm \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        stir speed off \\u003cb\\u003e\\u003e\\u003c/b\\u003e blank with 1 mL LB \\u003cb\\u003e\\u003e\\u003c/b\\u003e
        measure\\\"\\r\\n      check \\\"Measure and record the OD600 value.\\\"\\r\\n
        \     image \\\"Actions/ProteinPurification/cuvette_nanodrop.jpg\\\"\\r\\n
        \   end\\r\\n    meas_sample.each do |id|\\r\\n      od = show do\\r\\n        title
        \\\"Enter OD value of cell culture\\\"\\r\\n        get \\\"number\\\", var:
        \\\"x\\\", label: \\\"OD600 value of #{id}\\\", default: 0\\r\\n      end\\r\\n
        \     od_value \\u003c\\u003c od[:x]\\r\\n    end\\r\\n    return od_value\\r\\n
        \ end\\r\\n\\r\\nend\",\"parent_id\":1153,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:54:17.000-08:00\",\"updated_at\":\"2018-11-07T16:54:17.000-08:00\",\"user_id\":200},{\"id\":90724,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n\\n  def main\\n\\n
        \   operations.retrieve.make\\n    \\n    flask_type = \\n    cell_suspension_medium
        =\\n    \\n    ##Label a new flask.\\n    \\n    ##Add cell suspension medium\\n
        \   \\n    ##Transfer 5 mL of cell suspension to the new flask using a seriological
        pipette.\\n    \\n    ##Place in the shaker\\n    \\n    ##Place old flask
        in the cleaning bucket by the sink.\\n    \\n    \\n    ##Reset operation
        input item \\n    operations.eachd do |op|\\n        flask = op.output(\\\"New\\\").item.id\\n
        \       if flask.get(:times_culture_divided).nil?\\n           flask.associate
        :times_culture_divided, 1\\n        else  flask.associate :times_culture_divided,
        \ (flask.get(:times_culture_dived) + 1)\\n        end\\n        \\n        total_age
        = flask.get(:times_culture_divded) * op.input(\\\"Splitting time (days)\\\").val\\n
        \       flask.associate :total_age_in_days, total_age\\n        \\n        if
        flask.get(:times_culture_divided) == op.input(How many times?).val\\n            ##Email
        the user the user that they need to submit another redilute operation\\n        else\\n
        \           op.input(\\\"Old\\\").set item: flask \\n            op.set_status_recursively(\\\"Waiting\\\")\\n
        \       end\\n\\n    {}\\n\\n  end\\n\\nend\\n\",\"parent_id\":1551,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:52:34.000-08:00\",\"updated_at\":\"2018-11-07T16:52:34.000-08:00\",\"user_id\":143},{\"id\":90723,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n\\n  def main\\n\\n
        \   operations.retrieve.make\\n    \\n    flask_type = \\n    cell_suspension_medium
        =\\n    \\n    ##Label a new flask.\\n    \\n    ##Add cell suspension medium\\n
        \   \\n    ##Transfer 5 mL of cell suspension to the new flask using a seriological
        pipette.\\n    \\n    ##Place in the shaker\\n    \\n    ##Place old flask
        in the cleaning bucket by the sink.\\n    \\n    \\n    ##Reset operation
        input item \\n    operations.eachd do |op|\\n        flask = op.output(\\\"New\\\").item.id\\n
        \       if flask.get(:times_culture_divided).nil?\\n           flask.associate
        :times_culture_divided, 1\\n        else  flask.associate :times_culture_divided,
        \ (flask.get(:times_culture_dived) + 1)\\n        end\\n        \\n        total_age
        = flask.get(:times_culture_divded) * op.input(\\\"Splitting time (days)\\\").val\\n
        \       flask.associate :total_age_in_days, total_age\\n        \\n        if
        flask.get(:times_culture_divided) == op.input(How many times?).val\\n            ##Email
        the user the user that they need to submit another redilute operation\\n        else\\n
        \           op.input(\\\"Old\\\").set item: flask \\n            op.set_status_recursively(\\\"Waiting\\\")\\n
        \       end\\n        \\n            \\n    operations.store\\n\\n    {}\\n\\n
        \ end\\n\\nend\\n\",\"parent_id\":1551,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:52:30.000-08:00\",\"updated_at\":\"2018-11-07T16:52:30.000-08:00\",\"user_id\":143},{\"id\":90722,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Oct 2018\\n# Note: modified from \\\"Cloning/Make Overnight
        Suspension\\\"\\n\\nneeds \\\"Cloning Libs/Cloning\\\"\\nneeds \\\"Standard
        Libs/Debug\\\"\\nneeds \\\"Standard Libs/Feedback\\\"\\n\\nclass Protocol\\n\\n
        \ include Feedback    \\n  include Cloning\\n  include Debug\\n\\n  def main\\n
        \     \\n    operations.retrieve(interactive: false)\\n\\n=begin\\n    \\n
        \   # Increase the number of colonies picked the plate. If no picked number
        is present,\\n    # set it equal to one. Note that setting the status to \\\"error\\\"
        will remove the operation\\n    # from operations.running, so it will not
        be listed in tables, etc.\\n    operations.select { |op| op.input(\\\"Plasmid\\\").item.object_type_id
        == ObjectType.where(name: \\\"Checked E coli Plate of Plasmid\\\").first.id
        }.each do |op|\\n       nc = (op.input_data \\\"Plasmid\\\", :num_colonies).to_i\\n
        \      np = (op.input_data \\\"Plasmid\\\", :num_picked).to_i\\n       if
        debug \\u0026\\u0026 !nc \\u0026\\u0026 rand(2) == 1\\n         op.set_input_data
        \\\"Plasmid\\\", :num_colonies, 1\\n         op.set_input_data \\\"Plasmid\\\",
        :num_picked, 1\\n       elsif !nc || nc == 0 || ( np \\u0026\\u0026 np \\u003e=
        nc )\\n         op.error :missing_data, \\\"No colonies left on plate or colony
        number not defined\\\"\\n       else\\n         op.set_input_data \\\"Plasmid\\\",
        :num_picked, (np || 0) + 1\\n       end\\n    end\\n    \\n    # Error out
        operations whose samples don't have bacterial marker data. Tell technician\\n
        \   # which ones are not being used. Quit if there are no samples left.\\n
        \   operations.each do |op|\\n      unless op.input(\\\"Plasmid\\\").child_sample.properties[\\\"Bacterial
        Marker\\\"]\\n        if debug \\u0026\\u0026 rand(2) == 1\\n          op.input(\\\"Plasmid\\\").child_sample.set_property
        \\\"Bacterial Marker\\\", \\\"Amp\\\"\\n        else\\n          op.set_status
        \\\"error\\\"\\n          op.associate :missing_marker, \\\"No bacterial marker
        associated with plasmid\\\"\\n        end\\n      end\\n    end\\n=end\\n\\n
        \   \\n    operations.make\\n    \\n    p_ot = ObjectType.where(name: \\\"Checked
        E coli Plate of Plasmid\\\").first \\n    \\n    raise \\\"Could not find
        object type 'Checked E coli Plate of Plasmid'\\\" unless p_ot\\n    \\n    plate_inputs
        = operations.running.select { |op| op.input(\\\"Plasmid\\\").item.object_type_id
        == p_ot.id }\\n    \\n    g_ot = ObjectType.where(name: \\\"Plasmid Glycerol
        Stock\\\").first \\n    \\n    raise \\\"Could not find object type 'Plasmid
        Glycerol Stock'\\\" unless g_ot \\n    \\n    glycerol_stock_inputs = operations.running.select
        { |op| op.input(\\\"Plasmid\\\").item.object_type_id == g_ot.id }\\n    \\n
        \   overnight_steps plate_inputs, \\\"Checked E coli Plate of Plasmid\\\"
        if plate_inputs.any?\\n    overnight_steps glycerol_stock_inputs, \\\"Plasmid
        Glycerol Stock\\\" if glycerol_stock_inputs.any?\\n    \\n    # Associate
        input id with from data for overnight.\\n    operations.running.each do |op|\\n
        \     gs = op.input(\\\"Plasmid\\\").item\\n      on = op.output(\\\"Overnight\\\").item\\n
        \     \\n      on.associate :from, gs.id\\n      pass_data \\\"sequencing
        results\\\", \\\"sequence_verified\\\", from: gs, to: on\\n    end\\n    \\n
        \   operations.running.each do |op|\\n      op.output(\\\"Overnight\\\").child_item.move
        \\\"37\xB0C shaker incubator\\\"\\n    end\\n    \\n    operations.store\\n
        \   \\n    return {}\\n\\n  end \\n  \\n  # This method sorts operations by
        the bacterial marker attribute and then\\n  # starts overnight steps by calling
        the methods label_load_tubes and inoculate.\\n  def overnight_steps(ops, ot)\\n
        \   if ot == \\\"Plasmid Glycerol Stock\\\"\\n      ops.retrieve interactive:
        false\\n    else\\n      ops.retrieve\\n    end\\n    \\n    # Sorting ops
        by the bacterial marker attribute\\n    temp = ops.sort do |op1,op2|\\n      op1.input(\\\"Plasmid\\\").child_sample.properties[\\\"Bacterial
        Marker\\\"].upcase \\u003c=\\u003e op2.input(\\\"Plasmid\\\").child_sample.properties[\\\"Bacterial
        Marker\\\"].upcase\\n    end\\n    ops = temp\\n    \\n    ops.extend(OperationList)\\n
        \  \\n    #Label and load overnight tubes \\n    label_load_tubes ops\\n\\n
        \   #Inoculation\\n    inoculate ot, ops\\n      \\n  end\\n  \\n  # Given
        operations, tells the technician to label and load the tubes the tubes\\n
        \ def label_load_tubes ops\\n    show do\\n      title \\\"Label and load
        overnight glass flasks\\\"\\n      check \\\"Grab \\u003cb\\u003e#{ops.length}\\u003c/b\\u003e
        200 mL glass flask(s)\\\"\\n      check \\\"Write the overnight ID on a piece
        of lab tape and affix it on the corresponding glass flask.\\\"\\n      check
        \\\"In the Media Bay, add 12 mL of LB+Amp media to each flask.\\\"\\n      table
        ops.start_table\\n        .output_item(\\\"Overnight\\\", checkable: true)\\n
        \       .custom_column(heading: \\\"Media\\\") { |op| \\\"TB+Amp\\\"}\\n        .custom_column(heading:
        \\\"Volume\\\") { |op| \\\"12 mL\\\" }\\n        .end_table\\n    end\\n  end\\n
        \ \\n  # Tells the technician to inoculate colonies from plate into 14 ml
        tubes.\\n  def inoculate ot, ops\\n    show {\\n      title \\\"Inoculation
        from #{ot}\\\"\\n      # \\n      # note \\\"Use 10 uL sterile tips to inoculate
        colonies from plate into 14 mL tubes according to the following table.\\\"
        if ot == \\\"Checked E coli Plate of Plasmid\\\"\\n      note \\\"Use 10 \xB5l
        sterile tips to inoculate a isolated colony from plate into 200 mL flask according
        to the following table.\\\" if ot == \\\"Checked E coli Plate of Plasmid\\\"\\n
        \     note \\\"Use 100 \xB5l pipette to inoculate cells from glycerol stock
        into the 200 mL flask according to the following table.\\\" if ot == \\\"Plasmid
        Glycerol Stock\\\"\\n      table ops.start_table\\n        .input_item(\\\"Plasmid\\\",
        heading: ot)\\n        .custom_column(heading: \\\"#{ot} Location\\\") { |op|
        op.input(\\\"Plasmid\\\").item.location }\\n        .output_item(\\\"Overnight\\\",
        checkable: true)\\n        .end_table      \\n    } \\n  end\\nend \",\"parent_id\":1152,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:52:26.000-08:00\",\"updated_at\":\"2018-11-07T16:52:26.000-08:00\",\"user_id\":200},{\"id\":90721,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n\\n  def main\\n\\n
        \   operations.retrieve.make\\n    \\n    flask_type = \\n    cell_suspension_medium
        =\\n    \\n    ##Label a new flask.\\n    \\n    ##Add cell suspension medium\\n
        \   \\n    ##Transfer 5 mL of cell suspension to the new flask using a seriological
        pipette.\\n    \\n    ##Place in the shaker\\n    \\n    ##Place old flask
        in the cleaning bucket by the sink.\\n    \\n    \\n    ##Reset operation
        input item \\n    operations.eachd do |op|\\n        flask = op.output(\\\"New\\\").item.id\\n
        \       if flask.get(:times_culture_dived).nil?\\n           flask.associate
        :times_culture_divided, 1\\n        else  flask.associate :times_culture_divided,
        \ (flask.get(:times_culture_dived) + 1)\\n        end\\n        \\n        if
        flask.get(:times_culture_dived) == op.input()\\n        \\n        total_age
        = flask.get(:times_culture_divded) * op.input(\\\"Splitting time (days)\\\").val\\n
        \       flask.associate :total_age_in_days, total_age\\n        \\n        op.input(\\\"Old\\\").set
        item: flask \\n        op.set_status_recursively(\\\"Waiting\\\")\\n    end\\n
        \   \\n            \\n    operations.store\\n\\n    {}\\n\\n  end\\n\\nend\\n\",\"parent_id\":1551,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:51:20.000-08:00\",\"updated_at\":\"2018-11-07T16:51:20.000-08:00\",\"user_id\":143},{\"id\":90720,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n    \\n    INPUT = \\\"Culture\\\"\\n\\n
        \ def main\\n\\n    operations.retrieve\\n    \\n    ##Using a cut 1000mL
        tip, remove 1 mL of cell culture from the flask. Repeat this three times.
        Label the tubes, with the item ID number and 1,2,3. \\n    \\n    ##Spin down,
        remove supernatant into liquid waste.\\n    \\n    ##Weigh an empty 1.5mL
        epi and the three tubes. Record the masses in grams.\\n    \\n    ##Associate
        the masses with today's time stamp.\\n    \\n    operations.each do |op|\\n
        \       days_measured = op.input(INPUT).item.get(:days_measured)\\n        if
        days_measured.nil? == true\\n            op.input(INPUT).item.associate :days_measured,
        1\\n        else \\n            days_measured = days_measured + 1\\n            op.input(INPUT).item.associate
        :days_measured, days_measured        \\n        end\\n    if days_measured
        == op.input(\\\"Days to measure\\\").val\\n            op.set_status_recursively('Done')\\n
        \       else op.set_status_recursively('Waiting')\\n    end\\n    \\n    operations.store\\n\\n
        \   {}\\n\\n  end\\n\\nend\\n\",\"parent_id\":1552,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:50:33.000-08:00\",\"updated_at\":\"2018-11-07T16:50:33.000-08:00\",\"user_id\":143},{\"id\":90719,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n    \\n    INPUT = \\\"Culture\\\"\\n\\n
        \ def main\\n\\n    operations.retrieve\\n    \\n    ##Using a cut 1000mL
        tip, remove 1 mL of cell culture from the flask. Repeat this three times.
        Label the tubes, with the item ID number and 1,2,3. \\n    \\n    ##Spin down,
        remove supernatant into liquid waste.\\n    \\n    ##Weigh an empty 1.5mL
        epi and the three tubes. Record the masses in grams.\\n    \\n    ##Associate
        the masses with today's time stamp.\\n    \\n    operations.each do |op|\\n
        \       days_measured = op.input(INPUT).item.get(:days_measured)\\n        if
        days_measured.nil? == true\\n            op.input(INPUT).item.associate(:days_measured),
        1\\n        else \\n            days_measured = days_measured + 1\\n            op.input(INPUT).item.associate(:days_measured),
        days_measured        \\n        end\\n    if days_measured == op.input(\\\"Days
        to measure\\\").val\\n            op.set_status_recursively('Done')\\n        else
        op.set_status_recursively('Waiting')\\n    end\\n    \\n    operations.store\\n\\n
        \   {}\\n\\n  end\\n\\nend\\n\",\"parent_id\":1552,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:50:21.000-08:00\",\"updated_at\":\"2018-11-07T16:50:21.000-08:00\",\"user_id\":143},{\"id\":90718,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n    \\n    INPUT = \\\"Culture\\\"\\n\\n
        \ def main\\n\\n    operations.retrieve\\n    \\n    ##Using a cut 1000mL
        tip, remove 1 mL of cell culture from the flask. Repeat this three times.
        Label the tubes, with the item ID number and 1,2,3. \\n    \\n    ##Spin down,
        remove supernatant into liquid waste.\\n    \\n    ##Weigh an empty 1.5mL
        epi and the three tubes. Record the masses in grams.\\n    \\n    ##Associate
        the masses with today's time stamp.\\n    \\n    operations.each do |op|\\n
        \       days_measured = op.input(INPUT).item.get(:days_measured)\\n        if
        days_measured.nil? == true\\n            days_measured = 1\\n        else
        \\n            days_measured = days_measured + 1\\n            op.input(INPUT).item.associate(:days_measured),
        days_measured        \\n        end\\n    if days_measured == op.input(\\\"Days
        to measure\\\").val\\n            op.set_status_recursively('Done')\\n        else
        op.set_status_recursively('Waiting')\\n    end\\n    \\n    operations.store\\n\\n
        \   {}\\n\\n  end\\n\\nend\\n\",\"parent_id\":1552,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:50:05.000-08:00\",\"updated_at\":\"2018-11-07T16:50:05.000-08:00\",\"user_id\":143},{\"id\":90717,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n    \\n    INPUT = \\\"Culture\\\"\\n\\n
        \ def main\\n\\n    operations.retrieve\\n    \\n    ##Using a cut 1000mL
        tip, remove 1 mL of cell culture from the flask. Repeat this three times.
        Label the tubes, with the item ID number and 1,2,3. \\n    \\n    ##Spin down,
        remove supernatant into liquid waste.\\n    \\n    ##Weigh an empty 1.5mL
        epi and the three tubes. Record the masses in grams.\\n    \\n    ##Associate
        the masses with today's time stamp.\\n    \\n    operations.each do |op|\\n
        \       days_measured = op.input(INPUT).item.get(:days_measured)\\n        if
        days_measured.nil? == true\\n            days_measured = 1\\n            else
        days_measured = days_measured + 1\\n        end\\n    if days_measured ==
        op.input(\\\"Days to measure\\\").val\\n            op.set_status_recursively('Done')\\n
        \       else op.set_status_recursively('Waiting')\\n    end\\n    \\n    operations.store\\n\\n
        \   {}\\n\\n  end\\n\\nend\\n\",\"parent_id\":1552,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:49:23.000-08:00\",\"updated_at\":\"2018-11-07T16:49:23.000-08:00\",\"user_id\":143},{\"id\":90716,\"name\":\"protocol\",\"content\":\"#
        This is a default, one-size-fits all protocol that shows how you can\\r\\n#
        access the inputs and outputs of the operations associated with a job.\\r\\n#
        Add specific instructions for this protocol!\\r\\n\\r\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\r\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\r\\nneeds
        \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\n\\r\\nclass Protocol\\r\\n  include
        Feedback\\r\\n  include UploadHelper, AssociationManagement\\r\\n    \\r\\n
        \ # upload stuff\\r\\n  DIRNAME=\\\"\\u003cwhere are gel files on computer\\u003e\\\"\\r\\n
        \ TRIES=3\\r\\n  \\r\\n  def main\\r\\n\\r\\n    operations.retrieve(interactive:
        false)\\r\\n    \\r\\n    # get gel images\\r\\n    gels = operations.map
        { |op| op.input(\\\"SDS Gel\\\").collection}.uniq\\r\\n    gels.each do |gel|\\r\\n
        \   \\r\\n        grouped_ops=operations.select { |op| op.input(\\\"SDS Gel\\\").collection
        == gel }\\r\\n        image_name = \\\"gel_#{gel.id}\\\"\\r\\n        \\r\\n
        \       # image gel\\r\\n        image_gel(gel,image_name)\\r\\n        \\r\\n
        \       # upload image\\r\\n        ups = uploadData(\\\"#{DIRNAME}/#{image_name}\\\",
        1, TRIES) # 1 file per gel\\r\\n        ups = [Upload.find(1)] if debug\\r\\n
        \       \\r\\n        # associate to gel, plan, op \\r\\n        # can't associate
        to outputs yet because they are only made if lengths are verified\\r\\n        up=nil\\r\\n
        \       if(!(ups.nil?))\\r\\n            up=ups[0]\\r\\n\\r\\n            gel_item
        = Item.find(gel.id)\\r\\n\\r\\n            # associate gel image to gel\\r\\n
        \           gel_item.associate image_name, \\\"successfully imaged gel\\\",
        up\\r\\n          \\r\\n            grouped_ops.each do |op| # associate to
        all operations connected to gel\\r\\n                # description of where
        this op is in the gel, to be used as desc tag for image upload\\r\\n                location_in_gel
        = \\\"#{op.input(\\\"SDS Gel\\\").sample.name} is in row #{op.input(\\\"SDS
        Gel\\\").row + 1} and column #{op.input(\\\"SDS Gel\\\").column + 1}\\\"\\r\\n
        \           \\r\\n                # associate image to op with a location
        description\\r\\n                op.associate image_name, location_in_gel,
        up\\r\\n            \\r\\n                # associate image to plan, or append
        new location to description if association already exists\\r\\n                existing_assoc
        = op.plan.get(image_name)\\r\\n                if existing_assoc \\u0026\\u0026
        op.plan.upload(image_name) == up\\r\\n                    op.plan.modify(image_name,
        existing_assoc.to_s + \\\"\\\\n\\\" + location_in_gel, up)\\r\\n                else\\r\\n
        \                   op.plan.associate image_name, location_in_gel , up\\r\\n
        \               end\\r\\n            end\\r\\n        end\\r\\n        \\r\\n
        \       # check lengths of fragments in gel\\r\\n        verify_protein_size(gel,grouped_ops)\\r\\n
        \       \\r\\n        clean_up gel, gels\\r\\n    end\\r\\n\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def image_gel(gel,image_name)\\r\\n    show do\\r\\n        title \\\"Image
        gel #{gel}\\\"\\r\\n        check \\\"Take off the filter on the camera.\\\"\\r\\n
        \       check \\\"Spray the light box with ethanol and wipe until dry using
        a paper towel.\\\"\\r\\n        check \\\"Put the gel #{gel} on the light
        box and take a picture.\\\"\\r\\n        check \\\"Check to see if the picture
        matches the gel before uploading.\\\"\\r\\n        check \\\"Rename the picture
        you just took exactly as \\u003cb\\u003e#{image_name}\\u003c/b\\u003e.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def verify_protein_size(gel,grouped_ops)\\r\\n
        \   op_table = [[\\\"Gel ID\\\",\\\"Well Number\\\",\\\"Batch - Sample\\\",\\\"Expected
        protein band\\\"]]\\r\\n    well_no = 2\\r\\n    batch_no = 1\\r\\n\\r\\n
        \   grouped_ops.each do |op|\\r\\n        # before\\r\\n        row = []\\r\\n
        \       row \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row
        \\u003c\\u003c well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 1\\\"\\r\\n
        \       #row \\u003c\\u003c \\\"Before IPTG\\\"\\r\\n        row \\u003c\\u003c
        \\\"Undetectable\\\"\\r\\n        op_table \\u003c\\u003c row\\r\\n        well_no
        = well_no + 1\\r\\n        # after\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row \\u003c\\u003c
        well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 2\\\"\\r\\n        #row
        \\u003c\\u003c \\\"After IPTG\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n
        \       # sample\\r\\n        row = []\\r\\n        row \\u003c\\u003c op.input(\\\"SDS
        Gel\\\").item.id\\r\\n        row \\u003c\\u003c well_no\\r\\n        row
        \\u003c\\u003c \\\"#{batch_no} - 3\\\"\\r\\n        #row \\u003c\\u003c \\\"Protein
        Sample\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n        \\r\\n
        \       batch_no = batch_no + 1\\r\\n    end\\r\\n\\r\\n    show {\\r\\n        title
        \\\"Verify protein size for gel #{gel}\\\"\\r\\n        bullet \\\"To verify
        a protein expression, every three wells are viewed as a data set for a batch.
        In the following table, 1-1, 1-2 and 1-3 are considered as one data set to
        verify a protein expression. The same condition applies to 2-1, 2-2 and 2-3
        and so on.\\\"\\r\\n        table op_table\\r\\n        bullet \\\"An example
        of expected results as shown in the picture below.\\\"\\r\\n        table
        grouped_ops.start_table\\r\\n          .custom_column(heading: \\\"Gel ID\\\")
        { |op| op.input(\\\"SDS Gel\\\").item.id }\\r\\n          .custom_column(heading:
        \\\"Batch Number\\\", checkable: false) { |op| op.input(\\\"SDS Gel\\\").column
        + 1 }\\r\\n          .custom_column(heading: \\\"Expected Protein Size\\\")
        { |op| op.input(\\\"SDS Gel\\\").sample.properties[\\\"Size\\\"] }\\r\\n          .get(:correct,
        type: 'text', heading: \\\"Does the bands of one data set match the expected
        result? (y/n)\\\", default: 'y')\\r\\n          .custom_column(heading: \\\"User\\\")
        { |op| op.user.name }\\r\\n        .end_table\\r\\n        image \\\"Actions/ProteinPurification/expected_protein_expression.jpg\\\"\\r\\n
        \   }\\r\\n  end\\r\\n  \\r\\n  def clean_up gel, gels\\r\\n      show {\\r\\n
        \       title \\\"Clean Up\\\"\\r\\n        check \\\"Turn off the light box.\\\"\\r\\n
        \       check \\\"Dispose of the gel #{gel} by placing it in the waste container.
        Spray the surface of the light box with ethanol and wipe until dry using a
        paper towel.\\\"\\r\\n        check \\\"Reassemble the filter to the camera.\\\"\\r\\n
        \       check \\\"Clean up the gel box by rinsing with water and remove the
        id tag from the box. Return them to the gel station.\\\"\\r\\n      }\\r\\n
        \   end\\r\\n\\r\\nend\",\"parent_id\":1546,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:49:06.000-08:00\",\"updated_at\":\"2018-11-07T16:49:06.000-08:00\",\"user_id\":200},{\"id\":90715,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n\\n  def main\\n\\n
        \   operations.retrieve.make\\n    \\n    flask_type = \\n    cell_suspension_medium
        =\\n    \\n    ##Label a new flask.\\n    \\n    ##Add cell suspension medium\\n
        \   \\n    ##Transfer 5 mL of cell suspension to the new flask using a seriological
        pipette.\\n    \\n    ##Place in the shaker\\n    \\n    ##Place old flask
        in the cleaning bucket by the sink.\\n    \\n    \\n    ##Reset operation
        input item \\n    operations.eachd do |op|\\n        flask = op.output(\\\"New\\\").item.id\\n
        \       if flask.get(:times_culture_dived).nil?\\n           flask.associate
        :times_culture_divided, 1\\n        else  flask.associate :times_culture_divided,
        \ (flask.get(:times_culture_dived) + 1)\\n        end\\n        \\n        total_age
        = flask.get(:times_culture_divded) * op.input(\\\"Splitting time (days)\\\").val\\n
        \       flask.associate :total_age_in_days, total_age\\n        \\n        op.input(\\\"Old\\\").set
        item: flask \\n        op.set_status_recursively(\\\"Waiting\\\")\\n    end\\n
        \   \\n            \\n    operations.store\\n\\n    {}\\n\\n  end\\n\\nend\\n\",\"parent_id\":1551,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:48:49.000-08:00\",\"updated_at\":\"2018-11-07T16:48:49.000-08:00\",\"user_id\":143},{\"id\":90714,\"name\":\"protocol\",\"content\":\"#
        This is a default, one-size-fits all protocol that shows how you can\\r\\n#
        access the inputs and outputs of the operations associated with a job.\\r\\n#
        Add specific instructions for this protocol!\\r\\n\\r\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\r\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\r\\nneeds
        \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\n\\r\\nclass Protocol\\r\\n  include
        Feedback\\r\\n  include UploadHelper, AssociationManagement\\r\\n    \\r\\n
        \ # upload stuff\\r\\n  DIRNAME=\\\"\\u003cwhere are gel files on computer\\u003e\\\"\\r\\n
        \ TRIES=3\\r\\n  \\r\\n  def main\\r\\n\\r\\n    operations.retrieve(interactive:
        false)\\r\\n    \\r\\n    # get gel images\\r\\n    gels = operations.map
        { |op| op.input(\\\"SDS Gel\\\").collection}.uniq\\r\\n    gels.each do |gel|\\r\\n
        \   \\r\\n        grouped_ops=operations.select { |op| op.input(\\\"SDS Gel\\\").collection
        == gel }\\r\\n        image_name = \\\"gel_#{gel.id}\\\"\\r\\n        \\r\\n
        \       # image gel\\r\\n        image_gel(gel,image_name)\\r\\n        \\r\\n
        \       # upload image\\r\\n        ups = uploadData(\\\"#{DIRNAME}/#{image_name}\\\",
        1, TRIES) # 1 file per gel\\r\\n        ups = [Upload.find(1)] if debug\\r\\n
        \       \\r\\n        # associate to gel, plan, op \\r\\n        # can't associate
        to outputs yet because they are only made if lengths are verified\\r\\n        up=nil\\r\\n
        \       if(!(ups.nil?))\\r\\n            up=ups[0]\\r\\n\\r\\n            gel_item
        = Item.find(gel.id)\\r\\n\\r\\n            # associate gel image to gel\\r\\n
        \           gel_item.associate image_name, \\\"successfully imaged gel\\\",
        up\\r\\n          \\r\\n            grouped_ops.each do |op| # associate to
        all operations connected to gel\\r\\n                # description of where
        this op is in the gel, to be used as desc tag for image upload\\r\\n                location_in_gel
        = \\\"#{op.input(\\\"SDS Gel\\\").sample.name} is in row #{op.input(\\\"SDS
        Gel\\\").row + 1} and column #{op.input(\\\"SDS Gel\\\").column + 1}\\\"\\r\\n
        \           \\r\\n                # associate image to op with a location
        description\\r\\n                op.associate image_name, location_in_gel,
        up\\r\\n            \\r\\n                # associate image to plan, or append
        new location to description if association already exists\\r\\n                existing_assoc
        = op.plan.get(image_name)\\r\\n                if existing_assoc \\u0026\\u0026
        op.plan.upload(image_name) == up\\r\\n                    op.plan.modify(image_name,
        existing_assoc.to_s + \\\"\\\\n\\\" + location_in_gel, up)\\r\\n                else\\r\\n
        \                   op.plan.associate image_name, location_in_gel , up\\r\\n
        \               end\\r\\n            end\\r\\n        end\\r\\n        \\r\\n
        \       # check lengths of fragments in gel\\r\\n        verify_protein_size(gel,grouped_ops)\\r\\n
        \       \\r\\n        clean_up gel, gels\\r\\n    end\\r\\n\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def image_gel(gel,image_name)\\r\\n    show do\\r\\n        title \\\"Image
        gel #{gel}\\\"\\r\\n        check \\\"Take off the filter on the camera.\\\"\\r\\n
        \       check \\\"Spray the light box with ethanol and wipe until dry using
        a paper towel.\\\"\\r\\n        check \\\"Put the gel #{gel} on the light
        box and take a picture.\\\"\\r\\n        check \\\"Check to see if the picture
        matches the gel before uploading.\\\"\\r\\n        check \\\"Rename the picture
        you just took exactly as \\u003cb\\u003e#{image_name}\\u003c/b\\u003e.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def verify_protein_size(gel,grouped_ops)\\r\\n
        \   op_table = [[\\\"Gel ID\\\",\\\"Well Number\\\",\\\"Batch - Sample\\\",\\\"Expected
        protein band\\\"]]\\r\\n    well_no = 2\\r\\n    batch_no = 1\\r\\n\\r\\n
        \   grouped_ops.each do |op|\\r\\n        # before\\r\\n        row = []\\r\\n
        \       row \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row
        \\u003c\\u003c well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 1\\\"\\r\\n
        \       #row \\u003c\\u003c \\\"Before IPTG\\\"\\r\\n        row \\u003c\\u003c
        \\\"Undetectable\\\"\\r\\n        op_table \\u003c\\u003c row\\r\\n        well_no
        = well_no + 1\\r\\n        # after\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row \\u003c\\u003c
        well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 2\\\"\\r\\n        #row
        \\u003c\\u003c \\\"After IPTG\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n
        \       # sample\\r\\n        row = []\\r\\n        row \\u003c\\u003c op.input(\\\"SDS
        Gel\\\").item.id\\r\\n        row \\u003c\\u003c well_no\\r\\n        row
        \\u003c\\u003c \\\"#{batch_no} - 3\\\"\\r\\n        #row \\u003c\\u003c \\\"Protein
        Sample\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n        \\r\\n
        \       batch_no = batch_no + 1\\r\\n    end\\r\\n\\r\\n    show {\\r\\n        title
        \\\"Verify protein size for gel #{gel}\\\"\\r\\n        bullet \\\"To verify
        a protein expression, every three wells are viewed as a data set for a batch.
        In the following table, 1-1, 1-2 and 1-3 are considered as one data set to
        verify a protein expression. The same condition applies to 2-1, 2-2 and 2-3
        and so on.\\\"\\r\\n        table op_table\\r\\n        bullet \\\"An example
        of expected results as shown in the picture below.\\\"\\r\\n        table
        grouped_ops.start_table\\r\\n          .custom_column(heading: \\\"Gel ID\\\")
        { |op| op.input(\\\"SDS Gel\\\").item.id }\\r\\n          .custom_column(heading:
        \\\"Batch Number\\\", checkable: true) { |op| op.input(\\\"SDS Gel\\\").column
        + 1 }\\r\\n          .custom_column(heading: \\\"Expected Protein Size\\\")
        { |op| op.input(\\\"SDS Gel\\\").sample.properties[\\\"Size\\\"] }\\r\\n          .get(:correct,
        type: 'text', heading: \\\"Does the bands of one data set match the expected
        result? (y/n)\\\", default: 'y')\\r\\n          .custom_column(heading: \\\"User\\\")
        { |op| op.user.name }\\r\\n        .end_table\\r\\n        image \\\"Actions/ProteinPurification/expected_protein_expression.jpg\\\"\\r\\n
        \   }\\r\\n  end\\r\\n  \\r\\n  def clean_up gel, gels\\r\\n      show {\\r\\n
        \       title \\\"Clean Up\\\"\\r\\n        check \\\"Turn off the light box.\\\"\\r\\n
        \       check \\\"Dispose of the gel #{gel} by placing it in the waste container.
        Spray the surface of the light box with ethanol and wipe until dry using a
        paper towel.\\\"\\r\\n        check \\\"Reassemble the filter to the camera.\\\"\\r\\n
        \       check \\\"Clean up the gel box by rinsing with water and remove the
        id tag from the box. Return them to the gel station.\\\"\\r\\n      }\\r\\n
        \   end\\r\\n\\r\\nend\",\"parent_id\":1546,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:48:14.000-08:00\",\"updated_at\":\"2018-11-07T16:48:14.000-08:00\",\"user_id\":200},{\"id\":90713,\"name\":\"protocol\",\"content\":\"#
        This is a default, one-size-fits all protocol that shows how you can\\r\\n#
        access the inputs and outputs of the operations associated with a job.\\r\\n#
        Add specific instructions for this protocol!\\r\\n\\r\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\r\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\r\\nneeds
        \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\n\\r\\nclass Protocol\\r\\n  include
        Feedback\\r\\n  include UploadHelper, AssociationManagement\\r\\n    \\r\\n
        \ # upload stuff\\r\\n  DIRNAME=\\\"\\u003cwhere are gel files on computer\\u003e\\\"\\r\\n
        \ TRIES=3\\r\\n  \\r\\n  def main\\r\\n\\r\\n    operations.retrieve(interactive:
        false)\\r\\n    \\r\\n    # get gel images\\r\\n    gels = operations.map
        { |op| op.input(\\\"SDS Gel\\\").collection}.uniq\\r\\n    gels.each do |gel|\\r\\n
        \   \\r\\n        grouped_ops=operations.select { |op| op.input(\\\"SDS Gel\\\").collection
        == gel }\\r\\n        image_name = \\\"gel_#{gel.id}\\\"\\r\\n        \\r\\n
        \       # image gel\\r\\n        image_gel(gel,image_name)\\r\\n        \\r\\n
        \       # upload image\\r\\n        ups = uploadData(\\\"#{DIRNAME}/#{image_name}\\\",
        1, TRIES) # 1 file per gel\\r\\n        ups = [Upload.find(1)] if debug\\r\\n
        \       \\r\\n        # associate to gel, plan, op \\r\\n        # can't associate
        to outputs yet because they are only made if lengths are verified\\r\\n        up=nil\\r\\n
        \       if(!(ups.nil?))\\r\\n            up=ups[0]\\r\\n\\r\\n            gel_item
        = Item.find(gel.id)\\r\\n\\r\\n            # associate gel image to gel\\r\\n
        \           gel_item.associate image_name, \\\"successfully imaged gel\\\",
        up\\r\\n          \\r\\n            grouped_ops.each do |op| # associate to
        all operations connected to gel\\r\\n                # description of where
        this op is in the gel, to be used as desc tag for image upload\\r\\n                location_in_gel
        = \\\"#{op.input(\\\"SDS Gel\\\").sample.name} is in row #{op.input(\\\"SDS
        Gel\\\").row + 1} and column #{op.input(\\\"SDS Gel\\\").column + 1}\\\"\\r\\n
        \           \\r\\n                # associate image to op with a location
        description\\r\\n                op.associate image_name, location_in_gel,
        up\\r\\n            \\r\\n                # associate image to plan, or append
        new location to description if association already exists\\r\\n                existing_assoc
        = op.plan.get(image_name)\\r\\n                if existing_assoc \\u0026\\u0026
        op.plan.upload(image_name) == up\\r\\n                    op.plan.modify(image_name,
        existing_assoc.to_s + \\\"\\\\n\\\" + location_in_gel, up)\\r\\n                else\\r\\n
        \                   op.plan.associate image_name, location_in_gel , up\\r\\n
        \               end\\r\\n            end\\r\\n        end\\r\\n        \\r\\n
        \       # check lengths of fragments in gel\\r\\n        verify_protein_size(gel,grouped_ops)\\r\\n
        \       \\r\\n        clean_up gel, gels\\r\\n    end\\r\\n\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def image_gel(gel,image_name)\\r\\n    show do\\r\\n        title \\\"Image
        gel #{gel}\\\"\\r\\n        check \\\"Take off the filter on the camera.\\\"\\r\\n
        \       check \\\"Spray the light box with ethanol and wipe until dry using
        a paper towel.\\\"\\r\\n        check \\\"Put the gel #{gel} on the light
        box and take a picture.\\\"\\r\\n        check \\\"Check to see if the picture
        matches the gel before uploading.\\\"\\r\\n        check \\\"Rename the picture
        you just took exactly as \\u003cb\\u003e#{image_name}\\u003c/b\\u003e.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def verify_protein_size(gel,grouped_ops)\\r\\n
        \   op_table = [[\\\"Gel ID\\\",\\\"Well Number\\\",\\\"Batch - Sample\\\",\\\"Expected
        protein band\\\"]]\\r\\n    well_no = 2\\r\\n    batch_no = 1\\r\\n\\r\\n
        \   grouped_ops.each do |op|\\r\\n        # before\\r\\n        row = []\\r\\n
        \       row \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row
        \\u003c\\u003c well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 1\\\"\\r\\n
        \       #row \\u003c\\u003c \\\"Before IPTG\\\"\\r\\n        row \\u003c\\u003c
        \\\"Undetectable\\\"\\r\\n        op_table \\u003c\\u003c row\\r\\n        well_no
        = well_no + 1\\r\\n        # after\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row \\u003c\\u003c
        well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 2\\\"\\r\\n        #row
        \\u003c\\u003c \\\"After IPTG\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n
        \       # sample\\r\\n        row = []\\r\\n        row \\u003c\\u003c op.input(\\\"SDS
        Gel\\\").item.id\\r\\n        row \\u003c\\u003c well_no\\r\\n        row
        \\u003c\\u003c \\\"#{batch_no} - 3\\\"\\r\\n        #row \\u003c\\u003c \\\"Protein
        Sample\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n        \\r\\n
        \       batch_no = batch_no + 1\\r\\n    end\\r\\n\\r\\n    show {\\r\\n        title
        \\\"Verify protein size for gel #{gel}\\\"\\r\\n        bullet \\\"To verify
        a protein expression, every three wells are viewed as a data set for a batch.
        In the following table, 1-1, 1-2 and 1-3 are considered as one data set to
        verify a protein expression. The same condition applies to 2-1, 2-2 and 2-3
        and so on.\\\"\\r\\n        table op_table\\r\\n        bullet \\\"An example
        of expected results as shown in the picture below.\\\"\\r\\n        table
        grouped_ops.start_table\\r\\n          .custom_column(heading: \\\"Gel ID\\\")
        { |op| op.input(\\\"SDS Gel\\\").item.id }\\r\\n          .custom_column(heading:
        \\\"Batch Number\\\", checkable: true) { |op| op.input(\\\"SDS Gel\\\").column
        + 1 }\\r\\n          .custom_column(heading: \\\"Expected Protein Size\\\")
        { |op| op.input(\\\"SDS Gel\\\").sample.properties[\\\"Size\\\"] }\\r\\n          .get(:correct,
        type: 'text', heading: \\\"Does the bands match the expected result? (y/n)\\\",
        default: 'y')\\r\\n          .custom_column(heading: \\\"User\\\") { |op|
        op.user.name }\\r\\n        .end_table\\r\\n        image \\\"Actions/ProteinPurification/expected_protein_expression.jpg\\\"\\r\\n
        \   }\\r\\n  end\\r\\n  \\r\\n  def clean_up gel, gels\\r\\n      show {\\r\\n
        \       title \\\"Clean Up\\\"\\r\\n        check \\\"Turn off the light box.\\\"\\r\\n
        \       check \\\"Dispose of the gel #{gel} by placing it in the waste container.
        Spray the surface of the light box with ethanol and wipe until dry using a
        paper towel.\\\"\\r\\n        check \\\"Reassemble the filter to the camera.\\\"\\r\\n
        \       check \\\"Clean up the gel box by rinsing with water and remove the
        id tag from the box. Return them to the gel station.\\\"\\r\\n      }\\r\\n
        \   end\\r\\n\\r\\nend\",\"parent_id\":1546,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:47:50.000-08:00\",\"updated_at\":\"2018-11-07T16:47:50.000-08:00\",\"user_id\":200},{\"id\":90712,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n\\n  def main\\n\\n
        \   operations.retrieve.make\\n    \\n    flask_type = \\n    cell_suspension_medium
        =\\n    \\n    ##Label a new flask.\\n    \\n    ##Add cell suspension medium\\n
        \   \\n    ##Transfer 5 mL of cell suspension to the new flask using a seriological
        pipette.\\n    \\n    ##Place in the shaker\\n    \\n    ##Place old flask
        in the cleaning bucket by the sink.\\n    \\n    \\n    ##Reset operation
        input item \\n    operations.eachd do |op|\\n        flask = op.output(\\\"New\\\").item.id\\n
        \       if flask.get(:times_culture_dived).nil?\\n           flask.associate
        :times_culture_divided = 1\\n        else  flask.associate :times_culture_divided
        =  flask.get(:times_culture_dived) + 1\\n        end\\n        \\n        total_age
        = flask.get(:times_culture_divded) * op.input()\\n        \\n        op.input(\\\"Old\\\").set
        item: flask \\n        op.set_status_recursively(\\\"Waiting\\\")\\n    end\\n
        \   \\n            \\n    operations.store\\n\\n    {}\\n\\n  end\\n\\nend\\n\",\"parent_id\":1551,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:47:42.000-08:00\",\"updated_at\":\"2018-11-07T16:47:42.000-08:00\",\"user_id\":143},{\"id\":90711,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n\\n  def main\\n\\n
        \   operations.retrieve.make\\n    \\n    flask_type = \\n    cell_suspension_medium
        =\\n    \\n    ##Label a new flask.\\n    \\n    ##Add cell suspension medium\\n
        \   \\n    ##Transfer 5 mL of cell suspension to the new flask using a seriological
        pipette.\\n    \\n    ##Place in the shaker\\n    \\n    ##Place old flask
        in the cleaning bucket by the sink.\\n    \\n    \\n    ##Reset operation
        input item \\n    operations.eachd do |op|\\n        flask = op.output(\\\"New\\\").item.id\\n
        \       if flask.get(:times_culture_dived).nil?\\n           flask.associate
        :times_culture_divided = 1\\n        else  flask.associate :times_culture_divided
        =  flask.get(:times_culture_dived) + 1\\n        end\\n        \\n        total_age
        = flask.get(:time)\\n        \\n        op.input(\\\"Old\\\").set item: flask
        \\n        op.set_status_recursively(\\\"Waiting\\\")\\n    end\\n    \\n
        \           \\n    operations.store\\n\\n    {}\\n\\n  end\\n\\nend\\n\",\"parent_id\":1551,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:46:47.000-08:00\",\"updated_at\":\"2018-11-07T16:46:47.000-08:00\",\"user_id\":143},{\"id\":90710,\"name\":\"protocol\",\"content\":\"#
        This is a default, one-size-fits all protocol that shows how you can\\r\\n#
        access the inputs and outputs of the operations associated with a job.\\r\\n#
        Add specific instructions for this protocol!\\r\\n\\r\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\r\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\r\\nneeds
        \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\n\\r\\nclass Protocol\\r\\n  include
        Feedback\\r\\n  include UploadHelper, AssociationManagement\\r\\n    \\r\\n
        \ # upload stuff\\r\\n  DIRNAME=\\\"\\u003cwhere are gel files on computer\\u003e\\\"\\r\\n
        \ TRIES=3\\r\\n  \\r\\n  def main\\r\\n\\r\\n    operations.retrieve(interactive:
        false)\\r\\n    \\r\\n    # get gel images\\r\\n    gels = operations.map
        { |op| op.input(\\\"SDS Gel\\\").collection}.uniq\\r\\n    gels.each do |gel|\\r\\n
        \   \\r\\n        grouped_ops=operations.select { |op| op.input(\\\"SDS Gel\\\").collection
        == gel }\\r\\n        image_name = \\\"gel_#{gel.id}\\\"\\r\\n        \\r\\n
        \       # image gel\\r\\n        image_gel(gel,image_name)\\r\\n        \\r\\n
        \       # upload image\\r\\n        ups = uploadData(\\\"#{DIRNAME}/#{image_name}\\\",
        1, TRIES) # 1 file per gel\\r\\n        ups = [Upload.find(1)] if debug\\r\\n
        \       \\r\\n        # associate to gel, plan, op \\r\\n        # can't associate
        to outputs yet because they are only made if lengths are verified\\r\\n        up=nil\\r\\n
        \       if(!(ups.nil?))\\r\\n            up=ups[0]\\r\\n\\r\\n            gel_item
        = Item.find(gel.id)\\r\\n\\r\\n            # associate gel image to gel\\r\\n
        \           gel_item.associate image_name, \\\"successfully imaged gel\\\",
        up\\r\\n          \\r\\n            grouped_ops.each do |op| # associate to
        all operations connected to gel\\r\\n                # description of where
        this op is in the gel, to be used as desc tag for image upload\\r\\n                location_in_gel
        = \\\"#{op.input(\\\"SDS Gel\\\").sample.name} is in row #{op.input(\\\"SDS
        Gel\\\").row + 1} and column #{op.input(\\\"SDS Gel\\\").column + 1}\\\"\\r\\n
        \           \\r\\n                # associate image to op with a location
        description\\r\\n                op.associate image_name, location_in_gel,
        up\\r\\n            \\r\\n                # associate image to plan, or append
        new location to description if association already exists\\r\\n                existing_assoc
        = op.plan.get(image_name)\\r\\n                if existing_assoc \\u0026\\u0026
        op.plan.upload(image_name) == up\\r\\n                    op.plan.modify(image_name,
        existing_assoc.to_s + \\\"\\\\n\\\" + location_in_gel, up)\\r\\n                else\\r\\n
        \                   op.plan.associate image_name, location_in_gel , up\\r\\n
        \               end\\r\\n            end\\r\\n        end\\r\\n        \\r\\n
        \       # check lengths of fragments in gel\\r\\n        verify_protein_size(gel,grouped_ops)\\r\\n
        \       \\r\\n        clean_up gel, gels\\r\\n    end\\r\\n\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def image_gel(gel,image_name)\\r\\n    show do\\r\\n        title \\\"Image
        gel #{gel}\\\"\\r\\n        check \\\"Take off the filter on the camera.\\\"\\r\\n
        \       check \\\"Spray the light box with ethanol and wipe until dry using
        a paper towel.\\\"\\r\\n        check \\\"Put the gel #{gel} on the light
        box and take a picture.\\\"\\r\\n        check \\\"Check to see if the picture
        matches the gel before uploading.\\\"\\r\\n        check \\\"Rename the picture
        you just took exactly as \\u003cb\\u003e#{image_name}\\u003c/b\\u003e.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def verify_protein_size(gel,grouped_ops)\\r\\n
        \   op_table = [[\\\"Gel ID\\\",\\\"Well Number\\\",\\\"Batch - Sample\\\",\\\"Expected
        protein band\\\"]]\\r\\n    well_no = 2\\r\\n    batch_no = 1\\r\\n\\r\\n
        \   grouped_ops.each do |op|\\r\\n        # before\\r\\n        row = []\\r\\n
        \       row \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row
        \\u003c\\u003c well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 1\\\"\\r\\n
        \       #row \\u003c\\u003c \\\"Before IPTG\\\"\\r\\n        row \\u003c\\u003c
        \\\"Undetectable\\\"\\r\\n        op_table \\u003c\\u003c row\\r\\n        well_no
        = well_no + 1\\r\\n        # after\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row \\u003c\\u003c
        well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 2\\\"\\r\\n        #row
        \\u003c\\u003c \\\"After IPTG\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n
        \       # sample\\r\\n        row = []\\r\\n        row \\u003c\\u003c op.input(\\\"SDS
        Gel\\\").item.id\\r\\n        row \\u003c\\u003c well_no\\r\\n        row
        \\u003c\\u003c \\\"#{batch_no} - 3\\\"\\r\\n        #row \\u003c\\u003c \\\"Protein
        Sample\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n        \\r\\n
        \       batch_no = batch_no + 1\\r\\n    end\\r\\n\\r\\n    show {\\r\\n        title
        \\\"Verify protein size for gel #{gel}\\\"\\r\\n        bullet \\\"To verify
        a protein expression, every three wells are viewed as a data set for a batch.
        In the following table, 1-1, 1-2 and 1-3 are considered as one data set to
        verify a protein expression. The same condition applies to 2-1, 2-2 and 2-3
        and so on.\\\"\\r\\n        table op_table\\r\\n        bullet \\\"An example
        of expected results as shown in the picture below.\\\"\\r\\n        table
        grouped_ops.start_table\\r\\n          .custom_column(heading: \\\"Gel ID\\\")
        { |op| op.input(\\\"SDS Gel\\\").item.id }\\r\\n          .custom_column(heading:
        \\\"Batch Number\\\", checkable: true) { |op| op.input(\\\"SDS Gel\\\").column
        + 1 }\\r\\n          .custom_column(heading: \\\"Expected Protein Size\\\")
        { |op| op.input(\\\"SDS Gel\\\").sample.properties[\\\"Size\\\"] }\\r\\n          .get(:correct,
        type: 'text', heading: \\\"Does the bands (Batch-1,Batch-2 and Batch-3) match
        the expected result? (y/n)\\\", default: 'y')\\r\\n          .custom_column(heading:
        \\\"User\\\") { |op| op.user.name }\\r\\n        .end_table\\r\\n        image
        \\\"Actions/ProteinPurification/expected_protein_expression.jpg\\\"\\r\\n
        \   }\\r\\n  end\\r\\n  \\r\\n  def clean_up gel, gels\\r\\n      show {\\r\\n
        \       title \\\"Clean Up\\\"\\r\\n        check \\\"Turn off the light box.\\\"\\r\\n
        \       check \\\"Dispose of the gel #{gel} by placing it in the waste container.
        Spray the surface of the light box with ethanol and wipe until dry using a
        paper towel.\\\"\\r\\n        check \\\"Reassemble the filter to the camera.\\\"\\r\\n
        \       check \\\"Clean up the gel box by rinsing with water and remove the
        id tag from the box. Return them to the gel station.\\\"\\r\\n      }\\r\\n
        \   end\\r\\n\\r\\nend\",\"parent_id\":1546,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:46:30.000-08:00\",\"updated_at\":\"2018-11-07T16:46:30.000-08:00\",\"user_id\":200},{\"id\":90709,\"name\":\"protocol\",\"content\":\"#
        This is a default, one-size-fits all protocol that shows how you can\\r\\n#
        access the inputs and outputs of the operations associated with a job.\\r\\n#
        Add specific instructions for this protocol!\\r\\n\\r\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\r\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\r\\nneeds
        \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\n\\r\\nclass Protocol\\r\\n  include
        Feedback\\r\\n  include UploadHelper, AssociationManagement\\r\\n    \\r\\n
        \ # upload stuff\\r\\n  DIRNAME=\\\"\\u003cwhere are gel files on computer\\u003e\\\"\\r\\n
        \ TRIES=3\\r\\n  \\r\\n  def main\\r\\n\\r\\n    operations.retrieve(interactive:
        false)\\r\\n    \\r\\n    # get gel images\\r\\n    gels = operations.map
        { |op| op.input(\\\"SDS Gel\\\").collection}.uniq\\r\\n    gels.each do |gel|\\r\\n
        \   \\r\\n        grouped_ops=operations.select { |op| op.input(\\\"SDS Gel\\\").collection
        == gel }\\r\\n        image_name = \\\"gel_#{gel.id}\\\"\\r\\n        \\r\\n
        \       # image gel\\r\\n        image_gel(gel,image_name)\\r\\n        \\r\\n
        \       # upload image\\r\\n        ups = uploadData(\\\"#{DIRNAME}/#{image_name}\\\",
        1, TRIES) # 1 file per gel\\r\\n        ups = [Upload.find(1)] if debug\\r\\n
        \       \\r\\n        # associate to gel, plan, op \\r\\n        # can't associate
        to outputs yet because they are only made if lengths are verified\\r\\n        up=nil\\r\\n
        \       if(!(ups.nil?))\\r\\n            up=ups[0]\\r\\n\\r\\n            gel_item
        = Item.find(gel.id)\\r\\n\\r\\n            # associate gel image to gel\\r\\n
        \           gel_item.associate image_name, \\\"successfully imaged gel\\\",
        up\\r\\n          \\r\\n            grouped_ops.each do |op| # associate to
        all operations connected to gel\\r\\n                # description of where
        this op is in the gel, to be used as desc tag for image upload\\r\\n                location_in_gel
        = \\\"#{op.input(\\\"SDS Gel\\\").sample.name} is in row #{op.input(\\\"SDS
        Gel\\\").row + 1} and column #{op.input(\\\"SDS Gel\\\").column + 1}\\\"\\r\\n
        \           \\r\\n                # associate image to op with a location
        description\\r\\n                op.associate image_name, location_in_gel,
        up\\r\\n            \\r\\n                # associate image to plan, or append
        new location to description if association already exists\\r\\n                existing_assoc
        = op.plan.get(image_name)\\r\\n                if existing_assoc \\u0026\\u0026
        op.plan.upload(image_name) == up\\r\\n                    op.plan.modify(image_name,
        existing_assoc.to_s + \\\"\\\\n\\\" + location_in_gel, up)\\r\\n                else\\r\\n
        \                   op.plan.associate image_name, location_in_gel , up\\r\\n
        \               end\\r\\n            end\\r\\n        end\\r\\n        \\r\\n
        \       # check lengths of fragments in gel\\r\\n        verify_protein_size(gel,grouped_ops)\\r\\n
        \       \\r\\n        clean_up gel, gels\\r\\n    end\\r\\n\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def image_gel(gel,image_name)\\r\\n    show do\\r\\n        title \\\"Image
        gel #{gel}\\\"\\r\\n        check \\\"Take off the filter on the camera.\\\"\\r\\n
        \       check \\\"Spray the light box with ethanol and wipe until dry using
        a paper towel.\\\"\\r\\n        check \\\"Put the gel #{gel} on the light
        box and take a picture.\\\"\\r\\n        check \\\"Check to see if the picture
        matches the gel before uploading.\\\"\\r\\n        check \\\"Rename the picture
        you just took exactly as \\u003cb\\u003e#{image_name}\\u003c/b\\u003e.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def verify_protein_size(gel,grouped_ops)\\r\\n
        \   op_table = [[\\\"Gel ID\\\",\\\"Well Number\\\",\\\"Batch - Sample\\\",\\\"Expected
        protein band\\\"]]\\r\\n    well_no = 2\\r\\n    batch_no = 1\\r\\n\\r\\n
        \   grouped_ops.each do |op|\\r\\n        # before\\r\\n        row = []\\r\\n
        \       row \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row
        \\u003c\\u003c well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 1\\\"\\r\\n
        \       #row \\u003c\\u003c \\\"Before IPTG\\\"\\r\\n        row \\u003c\\u003c
        \\\"Undetectable\\\"\\r\\n        op_table \\u003c\\u003c row\\r\\n        well_no
        = well_no + 1\\r\\n        # after\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row \\u003c\\u003c
        well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 2\\\"\\r\\n        #row
        \\u003c\\u003c \\\"After IPTG\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n
        \       # sample\\r\\n        row = []\\r\\n        row \\u003c\\u003c op.input(\\\"SDS
        Gel\\\").item.id\\r\\n        row \\u003c\\u003c well_no\\r\\n        row
        \\u003c\\u003c \\\"#{batch_no} - 3\\\"\\r\\n        #row \\u003c\\u003c \\\"Protein
        Sample\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n        \\r\\n
        \       batch_no = batch_no + 1\\r\\n    end\\r\\n\\r\\n    show {\\r\\n        title
        \\\"Verify protein size for gel #{gel}\\\"\\r\\n        bullet \\\"To verify
        a protein expression, every three wells are viewed as a data set for a batch.
        In the following table, 1-1, 1-2 and 1-3 are considered as one data set to
        verify a protein expression. The same condition applies to 2-1, 2-2 and 2-3
        and so on.\\\"\\r\\n        table op_table\\r\\n        bullet \\\"An example
        of expected results as shown in the picture below.\\\"\\r\\n        table
        grouped_ops.start_table\\r\\n          .custom_column(heading: \\\"Gel ID\\\")
        { |op| op.input(\\\"SDS Gel\\\").item.id }\\r\\n          .custom_column(heading:
        \\\"Batch Number\\\", checkable: true) { |op| op.input(\\\"SDS Gel\\\").column
        + 1 }\\r\\n          .custom_column(heading: \\\"Expected Protein Size\\\")
        { |op| op.input(\\\"SDS Gel\\\").sample.properties[\\\"Size\\\"] }\\r\\n          .get(:correct,
        type: 'text', heading: \\\"Does the bands (Batch-1,Batch-2 and Batch-3) match
        the expected result? (y/n)\\\", default: 'y')\\r\\n          .custom_column(heading:
        \\\"User\\\") { |op| op.user.name }\\r\\n        .end_table\\r\\n        image
        \\\"Actions/ProteinPurification/expected_protein_expression.jpg\\\"\\r\\n
        \   }\\r\\n  end\\r\\n  \\r\\n  def clean_up gel, gels\\r\\n      show {\\r\\n
        \       title \\\"Clean Up\\\"\\r\\n        check \\\"Turn off the light box.\\\"\\r\\n
        \       check \\\"Dispose of the gel #{gel} by placing it in the waste container.
        Spray the surface of the light box with ethanol and wipe until dry using a
        paper towel.\\\"\\r\\n        check \\\"Clean up the gel box by rinsing with
        water and remove the id tag from the box. Return them to the gel station.\\\"\\r\\n
        \       check \\\"Reassemble the filter to the camera.\\\"\\r\\n      }\\r\\n
        \   end\\r\\n\\r\\nend\",\"parent_id\":1546,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:45:42.000-08:00\",\"updated_at\":\"2018-11-07T16:45:42.000-08:00\",\"user_id\":200},{\"id\":90708,\"name\":\"protocol\",\"content\":\"#
        This is a default, one-size-fits all protocol that shows how you can\\r\\n#
        access the inputs and outputs of the operations associated with a job.\\r\\n#
        Add specific instructions for this protocol!\\r\\n\\r\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\r\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\r\\nneeds
        \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\n\\r\\nclass Protocol\\r\\n  include
        Feedback\\r\\n  include UploadHelper, AssociationManagement\\r\\n    \\r\\n
        \ # upload stuff\\r\\n  DIRNAME=\\\"\\u003cwhere are gel files on computer\\u003e\\\"\\r\\n
        \ TRIES=3\\r\\n  \\r\\n  def main\\r\\n\\r\\n    operations.retrieve(interactive:
        false)\\r\\n    \\r\\n    # get gel images\\r\\n    gels = operations.map
        { |op| op.input(\\\"SDS Gel\\\").collection}.uniq\\r\\n    gels.each do |gel|\\r\\n
        \   \\r\\n        grouped_ops=operations.select { |op| op.input(\\\"SDS Gel\\\").collection
        == gel }\\r\\n        image_name = \\\"gel_#{gel.id}\\\"\\r\\n        \\r\\n
        \       # image gel\\r\\n        image_gel(gel,image_name)\\r\\n        \\r\\n
        \       # upload image\\r\\n        ups = uploadData(\\\"#{DIRNAME}/#{image_name}\\\",
        1, TRIES) # 1 file per gel\\r\\n        ups = [Upload.find(1)] if debug\\r\\n
        \       \\r\\n        # associate to gel, plan, op \\r\\n        # can't associate
        to outputs yet because they are only made if lengths are verified\\r\\n        up=nil\\r\\n
        \       if(!(ups.nil?))\\r\\n            up=ups[0]\\r\\n\\r\\n            gel_item
        = Item.find(gel.id)\\r\\n\\r\\n            # associate gel image to gel\\r\\n
        \           gel_item.associate image_name, \\\"successfully imaged gel\\\",
        up\\r\\n          \\r\\n            grouped_ops.each do |op| # associate to
        all operations connected to gel\\r\\n                # description of where
        this op is in the gel, to be used as desc tag for image upload\\r\\n                location_in_gel
        = \\\"#{op.input(\\\"SDS Gel\\\").sample.name} is in row #{op.input(\\\"SDS
        Gel\\\").row + 1} and column #{op.input(\\\"SDS Gel\\\").column + 1}\\\"\\r\\n
        \           \\r\\n                # associate image to op with a location
        description\\r\\n                op.associate image_name, location_in_gel,
        up\\r\\n            \\r\\n                # associate image to plan, or append
        new location to description if association already exists\\r\\n                existing_assoc
        = op.plan.get(image_name)\\r\\n                if existing_assoc \\u0026\\u0026
        op.plan.upload(image_name) == up\\r\\n                    op.plan.modify(image_name,
        existing_assoc.to_s + \\\"\\\\n\\\" + location_in_gel, up)\\r\\n                else\\r\\n
        \                   op.plan.associate image_name, location_in_gel , up\\r\\n
        \               end\\r\\n            end\\r\\n        end\\r\\n        \\r\\n
        \       # check lengths of fragments in gel\\r\\n        verify_protein_size(gel,grouped_ops)\\r\\n
        \       \\r\\n        clean_up gel, gels\\r\\n    end\\r\\n\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def image_gel(gel,image_name)\\r\\n    show do\\r\\n        title \\\"Image
        gel #{gel}\\\"\\r\\n        check \\\"Take off the filter on the camera.\\\"\\r\\n
        \       check \\\"Spray the light box with ethanol and wipe until dry using
        a paper towel.\\\"\\r\\n        check \\\"Put the gel #{gel} on the light
        box and take a picture.\\\"\\r\\n        check \\\"Check to see if the picture
        matches the gel before uploading.\\\"\\r\\n        check \\\"Rename the picture
        you just took exactly as \\u003cb\\u003e#{image_name}\\u003c/b\\u003e.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def verify_protein_size(gel,grouped_ops)\\r\\n
        \   op_table = [[\\\"Gel ID\\\",\\\"Well Number\\\",\\\"Batch - Sample\\\",\\\"Expected
        protein band\\\"]]\\r\\n    well_no = 2\\r\\n    batch_no = 1\\r\\n\\r\\n
        \   grouped_ops.each do |op|\\r\\n        # before\\r\\n        row = []\\r\\n
        \       row \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row
        \\u003c\\u003c well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 1\\\"\\r\\n
        \       #row \\u003c\\u003c \\\"Before IPTG\\\"\\r\\n        row \\u003c\\u003c
        \\\"Undetectable\\\"\\r\\n        op_table \\u003c\\u003c row\\r\\n        well_no
        = well_no + 1\\r\\n        # after\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row \\u003c\\u003c
        well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 2\\\"\\r\\n        #row
        \\u003c\\u003c \\\"After IPTG\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n
        \       # sample\\r\\n        row = []\\r\\n        row \\u003c\\u003c op.input(\\\"SDS
        Gel\\\").item.id\\r\\n        row \\u003c\\u003c well_no\\r\\n        row
        \\u003c\\u003c \\\"#{batch_no} - 3\\\"\\r\\n        #row \\u003c\\u003c \\\"Protein
        Sample\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n        \\r\\n
        \       batch_no = batch_no + 1\\r\\n    end\\r\\n\\r\\n    show {\\r\\n        title
        \\\"Verify protein size for gel #{gel}\\\"\\r\\n        bullet \\\"To verify
        a protein expression, every three wells are viewed as a data set for a batch.
        In the following table, 1-1, 1-2 and 1-3 are considered as one data set to
        verify a protein expression. The same condition applies to 2-1, 2-2 and 2-3
        and so on.\\\"\\r\\n        table op_table\\r\\n        bullet \\\"An example
        of expected results as shown in the picture below.\\\"\\r\\n        table
        grouped_ops.start_table\\r\\n          .custom_column(heading: \\\"Gel ID\\\")
        { |op| op.input(\\\"SDS Gel\\\").item.id }\\r\\n          .custom_column(heading:
        \\\"Batch Number\\\", checkable: true) { |op| op.input(\\\"SDS Gel\\\").column
        + 1 }\\r\\n          .custom_column(heading: \\\"Expected Protein Size\\\")
        { |op| op.input(\\\"SDS Gel\\\").sample.properties[\\\"Size\\\"] }\\r\\n          .get(:correct,
        type: 'text', heading: \\\"Does the bands (Batch-1,Batch-2 and Batch-3) match
        the expected result? (y/n)\\\", default: 'y')\\r\\n          .custom_column(heading:
        \\\"User\\\") { |op| op.user.name }\\r\\n        .end_table\\r\\n        image
        \\\"Actions/ProteinPurification/expected_protein_expression.jpg\\\"\\r\\n
        \   }\\r\\n  end\\r\\n  \\r\\n  def clean_up gel, gels\\r\\n      show {\\r\\n
        \       title \\\"Clean Up\\\"\\r\\n        check \\\"Turn off the light box.\\\"\\r\\n
        \       check \\\"Dispose of the gel #{gel} by placing it in the waste container.
        Spray the surface of the light box with ethanol and wipe until dry using a
        paper towel.\\\"\\r\\n        check \\\"Clean up the gel box by rinsing with
        water and remove the id from the box. Return them to the gel station.\\\"\\r\\n
        \       check \\\"Reassemble the filter to the camera.\\\"\\r\\n      }\\r\\n
        \   end\\r\\n\\r\\nend\",\"parent_id\":1546,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:45:24.000-08:00\",\"updated_at\":\"2018-11-07T16:45:24.000-08:00\",\"user_id\":200},{\"id\":90707,\"name\":\"protocol\",\"content\":\"#
        This is a default, one-size-fits all protocol that shows how you can\\r\\n#
        access the inputs and outputs of the operations associated with a job.\\r\\n#
        Add specific instructions for this protocol!\\r\\n\\r\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\r\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\r\\nneeds
        \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\n\\r\\nclass Protocol\\r\\n  include
        Feedback\\r\\n  include UploadHelper, AssociationManagement\\r\\n    \\r\\n
        \ # upload stuff\\r\\n  DIRNAME=\\\"\\u003cwhere are gel files on computer\\u003e\\\"\\r\\n
        \ TRIES=3\\r\\n  \\r\\n  def main\\r\\n\\r\\n    operations.retrieve(interactive:
        false)\\r\\n    \\r\\n    # get gel images\\r\\n    gels = operations.map
        { |op| op.input(\\\"SDS Gel\\\").collection}.uniq\\r\\n    gels.each do |gel|\\r\\n
        \   \\r\\n        grouped_ops=operations.select { |op| op.input(\\\"SDS Gel\\\").collection
        == gel }\\r\\n        image_name = \\\"gel_#{gel.id}\\\"\\r\\n        \\r\\n
        \       # image gel\\r\\n        image_gel(gel,image_name)\\r\\n        \\r\\n
        \       # upload image\\r\\n        ups = uploadData(\\\"#{DIRNAME}/#{image_name}\\\",
        1, TRIES) # 1 file per gel\\r\\n        ups = [Upload.find(1)] if debug\\r\\n
        \       \\r\\n        # associate to gel, plan, op \\r\\n        # can't associate
        to outputs yet because they are only made if lengths are verified\\r\\n        up=nil\\r\\n
        \       if(!(ups.nil?))\\r\\n            up=ups[0]\\r\\n\\r\\n            gel_item
        = Item.find(gel.id)\\r\\n\\r\\n            # associate gel image to gel\\r\\n
        \           gel_item.associate image_name, \\\"successfully imaged gel\\\",
        up\\r\\n          \\r\\n            grouped_ops.each do |op| # associate to
        all operations connected to gel\\r\\n                # description of where
        this op is in the gel, to be used as desc tag for image upload\\r\\n                location_in_gel
        = \\\"#{op.input(\\\"SDS Gel\\\").sample.name} is in row #{op.input(\\\"SDS
        Gel\\\").row + 1} and column #{op.input(\\\"SDS Gel\\\").column + 1}\\\"\\r\\n
        \           \\r\\n                # associate image to op with a location
        description\\r\\n                op.associate image_name, location_in_gel,
        up\\r\\n            \\r\\n                # associate image to plan, or append
        new location to description if association already exists\\r\\n                existing_assoc
        = op.plan.get(image_name)\\r\\n                if existing_assoc \\u0026\\u0026
        op.plan.upload(image_name) == up\\r\\n                    op.plan.modify(image_name,
        existing_assoc.to_s + \\\"\\\\n\\\" + location_in_gel, up)\\r\\n                else\\r\\n
        \                   op.plan.associate image_name, location_in_gel , up\\r\\n
        \               end\\r\\n            end\\r\\n        end\\r\\n        \\r\\n
        \       # check lengths of fragments in gel\\r\\n        verify_protein_size(gel,grouped_ops)\\r\\n
        \       \\r\\n        clean_up gel, gels\\r\\n    end\\r\\n\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def image_gel(gel,image_name)\\r\\n    show do\\r\\n        title \\\"Image
        gel #{gel}\\\"\\r\\n        check \\\"Take off the filter on the camera.\\\"\\r\\n
        \       check \\\"Spray the light box with ethanol and wipe dry with a paper
        towel.\\\"\\r\\n        check \\\"Put the gel #{gel} on the light box and
        take a picture.\\\"\\r\\n        check \\\"Check to see if the picture matches
        the gel before uploading.\\\"\\r\\n        check \\\"Rename the picture you
        just took exactly as \\u003cb\\u003e#{image_name}\\u003c/b\\u003e.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def verify_protein_size(gel,grouped_ops)\\r\\n
        \   op_table = [[\\\"Gel ID\\\",\\\"Well Number\\\",\\\"Batch - Sample\\\",\\\"Expected
        protein band\\\"]]\\r\\n    well_no = 2\\r\\n    batch_no = 1\\r\\n\\r\\n
        \   grouped_ops.each do |op|\\r\\n        # before\\r\\n        row = []\\r\\n
        \       row \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row
        \\u003c\\u003c well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 1\\\"\\r\\n
        \       #row \\u003c\\u003c \\\"Before IPTG\\\"\\r\\n        row \\u003c\\u003c
        \\\"Undetectable\\\"\\r\\n        op_table \\u003c\\u003c row\\r\\n        well_no
        = well_no + 1\\r\\n        # after\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row \\u003c\\u003c
        well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 2\\\"\\r\\n        #row
        \\u003c\\u003c \\\"After IPTG\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n
        \       # sample\\r\\n        row = []\\r\\n        row \\u003c\\u003c op.input(\\\"SDS
        Gel\\\").item.id\\r\\n        row \\u003c\\u003c well_no\\r\\n        row
        \\u003c\\u003c \\\"#{batch_no} - 3\\\"\\r\\n        #row \\u003c\\u003c \\\"Protein
        Sample\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n        \\r\\n
        \       batch_no = batch_no + 1\\r\\n    end\\r\\n\\r\\n    show {\\r\\n        title
        \\\"Verify protein size for gel #{gel}\\\"\\r\\n        bullet \\\"To verify
        a protein expression, every three wells are viewed as a data set for a batch.
        In the following table, 1-1, 1-2 and 1-3 are considered as one data set to
        verify a protein expression. The same condition applies to 2-1, 2-2 and 2-3
        and so on.\\\"\\r\\n        table op_table\\r\\n        bullet \\\"An example
        of expected results as shown in the picture below.\\\"\\r\\n        table
        grouped_ops.start_table\\r\\n          .custom_column(heading: \\\"Gel ID\\\")
        { |op| op.input(\\\"SDS Gel\\\").item.id }\\r\\n          .custom_column(heading:
        \\\"Batch Number\\\", checkable: true) { |op| op.input(\\\"SDS Gel\\\").column
        + 1 }\\r\\n          .custom_column(heading: \\\"Expected Protein Size\\\")
        { |op| op.input(\\\"SDS Gel\\\").sample.properties[\\\"Size\\\"] }\\r\\n          .get(:correct,
        type: 'text', heading: \\\"Does the bands (Batch-1,Batch-2 and Batch-3) match
        the expected result? (y/n)\\\", default: 'y')\\r\\n          .custom_column(heading:
        \\\"User\\\") { |op| op.user.name }\\r\\n        .end_table\\r\\n        image
        \\\"Actions/ProteinPurification/expected_protein_expression.jpg\\\"\\r\\n
        \   }\\r\\n  end\\r\\n  \\r\\n  def clean_up gel, gels\\r\\n      show {\\r\\n
        \       title \\\"Clean Up\\\"\\r\\n        check \\\"Turn off the light box.\\\"\\r\\n
        \       check \\\"Dispose of the gel #{gel} by placing it in the waste container.
        Spray the surface of the light box with ethanol and wipe until dry using a
        paper towel.\\\"\\r\\n        check \\\"Clean up the gel box by rinsing with
        water and remove the id from the box. Return them to the gel station.\\\"\\r\\n
        \       check \\\"Reassemble the filter to the camera.\\\"\\r\\n      }\\r\\n
        \   end\\r\\n\\r\\nend\",\"parent_id\":1546,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:43:41.000-08:00\",\"updated_at\":\"2018-11-07T16:43:41.000-08:00\",\"user_id\":200},{\"id\":90706,\"name\":\"protocol\",\"content\":\"#
        This is a default, one-size-fits all protocol that shows how you can\\r\\n#
        access the inputs and outputs of the operations associated with a job.\\r\\n#
        Add specific instructions for this protocol!\\r\\n\\r\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\r\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\r\\nneeds
        \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\n\\r\\nclass Protocol\\r\\n  include
        Feedback\\r\\n  include UploadHelper, AssociationManagement\\r\\n    \\r\\n
        \ # upload stuff\\r\\n  DIRNAME=\\\"\\u003cwhere are gel files on computer\\u003e\\\"\\r\\n
        \ TRIES=3\\r\\n  \\r\\n  def main\\r\\n\\r\\n    operations.retrieve(interactive:
        false)\\r\\n    \\r\\n    # get gel images\\r\\n    gels = operations.map
        { |op| op.input(\\\"SDS Gel\\\").collection}.uniq\\r\\n    gels.each do |gel|\\r\\n
        \   \\r\\n        grouped_ops=operations.select { |op| op.input(\\\"SDS Gel\\\").collection
        == gel }\\r\\n        image_name = \\\"gel_#{gel.id}\\\"\\r\\n        \\r\\n
        \       # image gel\\r\\n        image_gel(gel,image_name)\\r\\n        \\r\\n
        \       # upload image\\r\\n        ups = uploadData(\\\"#{DIRNAME}/#{image_name}\\\",
        1, TRIES) # 1 file per gel\\r\\n        ups = [Upload.find(1)] if debug\\r\\n
        \       \\r\\n        # associate to gel, plan, op \\r\\n        # can't associate
        to outputs yet because they are only made if lengths are verified\\r\\n        up=nil\\r\\n
        \       if(!(ups.nil?))\\r\\n            up=ups[0]\\r\\n\\r\\n            gel_item
        = Item.find(gel.id)\\r\\n\\r\\n            # associate gel image to gel\\r\\n
        \           gel_item.associate image_name, \\\"successfully imaged gel\\\",
        up\\r\\n          \\r\\n            grouped_ops.each do |op| # associate to
        all operations connected to gel\\r\\n                # description of where
        this op is in the gel, to be used as desc tag for image upload\\r\\n                location_in_gel
        = \\\"#{op.input(\\\"SDS Gel\\\").sample.name} is in row #{op.input(\\\"SDS
        Gel\\\").row + 1} and column #{op.input(\\\"SDS Gel\\\").column + 1}\\\"\\r\\n
        \           \\r\\n                # associate image to op with a location
        description\\r\\n                op.associate image_name, location_in_gel,
        up\\r\\n            \\r\\n                # associate image to plan, or append
        new location to description if association already exists\\r\\n                existing_assoc
        = op.plan.get(image_name)\\r\\n                if existing_assoc \\u0026\\u0026
        op.plan.upload(image_name) == up\\r\\n                    op.plan.modify(image_name,
        existing_assoc.to_s + \\\"\\\\n\\\" + location_in_gel, up)\\r\\n                else\\r\\n
        \                   op.plan.associate image_name, location_in_gel , up\\r\\n
        \               end\\r\\n            end\\r\\n        end\\r\\n        \\r\\n
        \       # check lengths of fragments in gel\\r\\n        verify_protein_size(gel,grouped_ops)\\r\\n
        \       \\r\\n        clean_up gel, gels\\r\\n    end\\r\\n\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def image_gel(gel,image_name)\\r\\n    show do\\r\\n        title \\\"Image
        gel #{gel}\\\"\\r\\n        check \\\"Take off the filter on the camera.\\\"\\r\\n
        \       check \\\"Spray the light box with ethanol and wipe dry with a paper
        towel.\\\"\\r\\n        check \\\"Put the gel #{gel} on the light box and
        take a picture.\\\"\\r\\n        check \\\"Check to see if the picture matches
        the gel before uploading.\\\"\\r\\n        check \\\"Rename the picture you
        just took exactly as \\u003cb\\u003e#{image_name}\\u003c/b\\u003e.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def verify_protein_size(gel,grouped_ops)\\r\\n
        \   op_table = [[\\\"Gel ID\\\",\\\"Well Number\\\",\\\"Batch - Sample\\\",\\\"Expected
        protein band\\\"]]\\r\\n    well_no = 2\\r\\n    batch_no = 1\\r\\n\\r\\n
        \   grouped_ops.each do |op|\\r\\n        # before\\r\\n        row = []\\r\\n
        \       row \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row
        \\u003c\\u003c well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 1\\\"\\r\\n
        \       #row \\u003c\\u003c \\\"Before IPTG\\\"\\r\\n        row \\u003c\\u003c
        \\\"Undetectable\\\"\\r\\n        op_table \\u003c\\u003c row\\r\\n        well_no
        = well_no + 1\\r\\n        # after\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row \\u003c\\u003c
        well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 2\\\"\\r\\n        #row
        \\u003c\\u003c \\\"After IPTG\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n
        \       # sample\\r\\n        row = []\\r\\n        row \\u003c\\u003c op.input(\\\"SDS
        Gel\\\").item.id\\r\\n        row \\u003c\\u003c well_no\\r\\n        row
        \\u003c\\u003c \\\"#{batch_no} - 3\\\"\\r\\n        #row \\u003c\\u003c \\\"Protein
        Sample\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n        \\r\\n
        \       batch_no = batch_no + 1\\r\\n    end\\r\\n\\r\\n    show {\\r\\n        title
        \\\"Verify protein size for gel #{gel}\\\"\\r\\n        bullet \\\"To verify
        a protein expression, every three wells are viewed as a data set for a batch.
        In the following table, 1-1, 1-2 and 1-3 are considered as one data set to
        verify a protein expression. The same condition applies to 2-1, 2-2 and 2-3
        and so on.\\\"\\r\\n        table op_table\\r\\n        note \\\"An example
        of expected results as shown in the picture below.\\\"\\r\\n        \\r\\n
        \       table grouped_ops.start_table\\r\\n          .custom_column(heading:
        \\\"Gel ID\\\") { |op| op.input(\\\"SDS Gel\\\").item.id }\\r\\n          .custom_column(heading:
        \\\"Batch Number\\\", checkable: true) { |op| op.input(\\\"SDS Gel\\\").column
        + 1 }\\r\\n          .custom_column(heading: \\\"Expected Protein Size\\\")
        { |op| op.input(\\\"SDS Gel\\\").sample.properties[\\\"Size\\\"] }\\r\\n          .get(:correct,
        type: 'text', heading: \\\"Does the bands (Batch-1,Batch-2 and Batch-3) match
        the expected result? (y/n)\\\", default: 'y')\\r\\n          .custom_column(heading:
        \\\"User\\\") { |op| op.user.name }\\r\\n        .end_table\\r\\n        image
        \\\"Actions/ProteinPurification/expected_protein_expression.jpg\\\"\\r\\n
        \   }\\r\\n  end\\r\\n  \\r\\n  def clean_up gel, gels\\r\\n      show {\\r\\n
        \       title \\\"Clean Up\\\"\\r\\n        check \\\"Turn off the light box.\\\"\\r\\n
        \       check \\\"Dispose of the gel #{gel} by placing it in the waste container.
        Spray the surface of the light box with ethanol and wipe until dry using a
        paper towel.\\\"\\r\\n        check \\\"Clean up the gel box by rinsing with
        water and remove the id from the box. Return them to the gel station.\\\"\\r\\n
        \       check \\\"Reassemble the filter to the camera.\\\"\\r\\n      }\\r\\n
        \   end\\r\\n\\r\\nend\",\"parent_id\":1546,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:43:32.000-08:00\",\"updated_at\":\"2018-11-07T16:43:32.000-08:00\",\"user_id\":200},{\"id\":90705,\"name\":\"protocol\",\"content\":\"#
        This is a default, one-size-fits all protocol that shows how you can\\r\\n#
        access the inputs and outputs of the operations associated with a job.\\r\\n#
        Add specific instructions for this protocol!\\r\\n\\r\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\r\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\r\\nneeds
        \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\n\\r\\nclass Protocol\\r\\n  include
        Feedback\\r\\n  include UploadHelper, AssociationManagement\\r\\n    \\r\\n
        \ # upload stuff\\r\\n  DIRNAME=\\\"\\u003cwhere are gel files on computer\\u003e\\\"\\r\\n
        \ TRIES=3\\r\\n  \\r\\n  def main\\r\\n\\r\\n    operations.retrieve(interactive:
        false)\\r\\n    \\r\\n    # get gel images\\r\\n    gels = operations.map
        { |op| op.input(\\\"SDS Gel\\\").collection}.uniq\\r\\n    gels.each do |gel|\\r\\n
        \   \\r\\n        grouped_ops=operations.select { |op| op.input(\\\"SDS Gel\\\").collection
        == gel }\\r\\n        image_name = \\\"gel_#{gel.id}\\\"\\r\\n        \\r\\n
        \       # image gel\\r\\n        image_gel(gel,image_name)\\r\\n        \\r\\n
        \       # upload image\\r\\n        ups = uploadData(\\\"#{DIRNAME}/#{image_name}\\\",
        1, TRIES) # 1 file per gel\\r\\n        ups = [Upload.find(1)] if debug\\r\\n
        \       \\r\\n        # associate to gel, plan, op \\r\\n        # can't associate
        to outputs yet because they are only made if lengths are verified\\r\\n        up=nil\\r\\n
        \       if(!(ups.nil?))\\r\\n            up=ups[0]\\r\\n\\r\\n            gel_item
        = Item.find(gel.id)\\r\\n\\r\\n            # associate gel image to gel\\r\\n
        \           gel_item.associate image_name, \\\"successfully imaged gel\\\",
        up\\r\\n          \\r\\n            grouped_ops.each do |op| # associate to
        all operations connected to gel\\r\\n                # description of where
        this op is in the gel, to be used as desc tag for image upload\\r\\n                location_in_gel
        = \\\"#{op.input(\\\"SDS Gel\\\").sample.name} is in row #{op.input(\\\"SDS
        Gel\\\").row + 1} and column #{op.input(\\\"SDS Gel\\\").column + 1}\\\"\\r\\n
        \           \\r\\n                # associate image to op with a location
        description\\r\\n                op.associate image_name, location_in_gel,
        up\\r\\n            \\r\\n                # associate image to plan, or append
        new location to description if association already exists\\r\\n                existing_assoc
        = op.plan.get(image_name)\\r\\n                if existing_assoc \\u0026\\u0026
        op.plan.upload(image_name) == up\\r\\n                    op.plan.modify(image_name,
        existing_assoc.to_s + \\\"\\\\n\\\" + location_in_gel, up)\\r\\n                else\\r\\n
        \                   op.plan.associate image_name, location_in_gel , up\\r\\n
        \               end\\r\\n            end\\r\\n        end\\r\\n        \\r\\n
        \       # check lengths of fragments in gel\\r\\n        verify_protein_size(gel,grouped_ops)\\r\\n
        \       \\r\\n        clean_up gel, gels\\r\\n    end\\r\\n\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def image_gel(gel,image_name)\\r\\n    show do\\r\\n        title \\\"Image
        gel #{gel}\\\"\\r\\n        check \\\"Take off the filter on the camera.\\\"\\r\\n
        \       check \\\"Spray the light box with ethanol and wipe dry with a paper
        towel.\\\"\\r\\n        check \\\"Put the gel #{gel} on the light box and
        take a picture.\\\"\\r\\n        check \\\"Check to see if the picture matches
        the gel before uploading.\\\"\\r\\n        check \\\"Rename the picture you
        just took exactly as \\u003cb\\u003e#{image_name}\\u003c/b\\u003e.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def verify_protein_size(gel,grouped_ops)\\r\\n
        \   op_table = [[\\\"Gel ID\\\",\\\"Well Number\\\",\\\"Batch - Sample\\\",\\\"Expected
        protein band\\\"]]\\r\\n    well_no = 2\\r\\n    batch_no = 1\\r\\n\\r\\n
        \   grouped_ops.each do |op|\\r\\n        # before\\r\\n        row = []\\r\\n
        \       row \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row
        \\u003c\\u003c well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 1\\\"\\r\\n
        \       #row \\u003c\\u003c \\\"Before IPTG\\\"\\r\\n        row \\u003c\\u003c
        \\\"Undetectable\\\"\\r\\n        op_table \\u003c\\u003c row\\r\\n        well_no
        = well_no + 1\\r\\n        # after\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row \\u003c\\u003c
        well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 2\\\"\\r\\n        #row
        \\u003c\\u003c \\\"After IPTG\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n
        \       # sample\\r\\n        row = []\\r\\n        row \\u003c\\u003c op.input(\\\"SDS
        Gel\\\").item.id\\r\\n        row \\u003c\\u003c well_no\\r\\n        row
        \\u003c\\u003c \\\"#{batch_no} - 3\\\"\\r\\n        #row \\u003c\\u003c \\\"Protein
        Sample\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n        \\r\\n
        \       batch_no = batch_no + 1\\r\\n    end\\r\\n\\r\\n    show {\\r\\n        title
        \\\"Verify protein size for gel #{gel}\\\"\\r\\n        bullet \\\"To verify
        a protein expression, every three wells are viewed as a data set for a batch.
        In the following table, 1-1, 1-2 and 1-3 are considered as one data set to
        verify a protein expression. The same condition applies to 2-1, 2-2 and 2-3
        and so on.\\\"\\r\\n        note \\\"An example of expected results as shown
        in the picture below.\\\"\\r\\n        table op_table\\r\\n        table grouped_ops.start_table\\r\\n
        \         .custom_column(heading: \\\"Gel ID\\\") { |op| op.input(\\\"SDS
        Gel\\\").item.id }\\r\\n          .custom_column(heading: \\\"Batch Number\\\",
        checkable: true) { |op| op.input(\\\"SDS Gel\\\").column + 1 }\\r\\n          .custom_column(heading:
        \\\"Expected Protein Size\\\") { |op| op.input(\\\"SDS Gel\\\").sample.properties[\\\"Size\\\"]
        }\\r\\n          .get(:correct, type: 'text', heading: \\\"Does the bands
        (Batch-1,Batch-2 and Batch-3) match the expected result? (y/n)\\\", default:
        'y')\\r\\n          .custom_column(heading: \\\"User\\\") { |op| op.user.name
        }\\r\\n        .end_table\\r\\n        image \\\"Actions/ProteinPurification/expected_protein_expression.jpg\\\"\\r\\n
        \   }\\r\\n  end\\r\\n  \\r\\n  def clean_up gel, gels\\r\\n      show {\\r\\n
        \       title \\\"Clean Up\\\"\\r\\n        check \\\"Turn off the light box.\\\"\\r\\n
        \       check \\\"Dispose of the gel #{gel} by placing it in the waste container.
        Spray the surface of the light box with ethanol and wipe until dry using a
        paper towel.\\\"\\r\\n        check \\\"Clean up the gel box by rinsing with
        water and remove the id from the box. Return them to the gel station.\\\"\\r\\n
        \       check \\\"Reassemble the filter to the camera.\\\"\\r\\n      }\\r\\n
        \   end\\r\\n\\r\\nend\",\"parent_id\":1546,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:42:22.000-08:00\",\"updated_at\":\"2018-11-07T16:42:22.000-08:00\",\"user_id\":200},{\"id\":90704,\"name\":\"protocol\",\"content\":\"#
        By: Eriberto Lopez\\n# elopez3@uw.edu\\n# 05/30/18\\n# C l\\n\\n# Outline\\n#
        After 5hr incubation sample 4 24 Deep Well plates\\n# Prepare PBS + Kan plate
        for ribosomal arrest - PBS_Kan_Plate #\\n# Sample 24 Deep wells and transfer
        to PBS_Kan_Plate\\n# PBS_Kan_Plate - Measure OD \\u0026 GFP\\n# Incubate for
        1hr - may be able to keep overnight and run flow in the morning\\n# Prepare
        RNAprotect plate (RNAlater)\\n# Spin down plates, aspirate supernatant, and
        resuspend pellet in 1mL of PBS in order to transfer to RNA protect plate\\n#
        store RNA plate in -80C freezer for downstream processing\\n\\nneeds \\\"Standard
        Libs/Debug\\\"\\nneeds \\\"YG_Harmonization/Upload_PlateReader_Data\\\"\\nneeds
        \\\"YG_Harmonization/PlateReaderMethods\\\"\\nneeds \\\"Tissue Culture Libs/CollectionDisplay\\\"\\nneeds
        \\\"Induction - High Throughput/NovelChassisLib\\\" # Temporary EL\\n# needs
        \\\"Plate Reader Lib/PlateReaderHelper\\\"\\nneeds \\\"Induction - High Throughput/HighThroughputHelper\\\"\\n\\nclass
        Protocol\\n    \\n    include Debug\\n    include Upload_PlateReader_Data\\n
        \   include PlateReaderMethods\\n    include CollectionDisplay\\n    include
        NovelChassisLib\\n    # include PlateReaderHelper\\n    include HighThroughputHelper\\n
        \   \\n    #I/O\\n    INPUT = \\\"24 Deep Wells\\\"\\n    OUT_FC_PLT = \\\"Flow
        Cytometry Plate\\\"\\n    OUT_PLT_RDR_PLT = \\\"Plate Reader Plate\\\"\\n
        \   OUT_RNA_PLT = \\\"RNA Prep Tubes\\\"\\n    \\n    # Constants\\n    FC_PLT_TRANSFER_VOL
        = 20#l\\n    PLT_RDR_PLT_TRANSERFER_VOL = 300#l\\n\\n\\n    def main\\n        \\n
        \       operations.make # Creates output plates\\n        \\n        intro()\\n
        \       \\n        operations.each { |op|\\n            # gather_materials(op)\\n
        \           \\n            # Piecing together matricies that were previously
        sliced up and associate to 24 Wells\\n            if debug\\n                p1
        = Collection.find(271333)\\n                p2 = Collection.find(271334)\\n
        \               p3 = Collection.find(271335)\\n                p4 = Collection.find(271336)\\n
        \               input_item_arr = [p1,p2,p3,p4]\\n            else\\n                input_item_arr
        = op.input_array(INPUT).collections\\n            end\\n            \\n            #
        from the associated matricies of the input 24 Wells piece together a new 96
        Well matrix\\n            transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out = transferring_24s_to_96_matricies(input_item_arr)\\n
        \           \\n            # Prep FC Plate - returns collection\\n            out_fc_plt
        = prepare_flow_cytometry_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Prepare Plate Reader Plate - returns collection\\n            plate_reader_plate
        = prepare_plate_reader_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Prepare RNA Plate - returns collection\\n            rna_plate
        = prepare_rna_plate(op, transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n            \\n
        \           # Grab 24 Deep Wells from Incubator shaker\\n            take
        input_item_arr, interactive: true\\n            \\n            # Transfer
        cultures from 24 Deep wells to FC flat bottom plate \\u0026 plate reader plate\\n
        \           coordinates_96 = ('A'..'H').to_a.map {|row| (1..12).to_a.map {|col|
        row + col.to_s}} # 96 Well coordinate map\\n            count = 0\\n            spin_down_plates
        = []\\n            input_item_arr.each do |plt|\\n                # find the
        rc_list from where the deep well transfer coords match the coordinates_96\\n
        \               display_rc_list = []\\n                deep_well_transfer_coords
        = plt.get('deep_well_transfer_coords') # Contains coords like: \\\"A1\\\",
        \\\"A2\\\"...\\n                deep_well_transfer_coords.flatten.each do
        |coord|\\n                    coordinates_96.map.each_with_index do |row,
        r_idx|\\n                        col_idx = row.each_index.select {|well| row[well]
        == coord}\\n                        col_idx.each {|c_idx| display_rc_list.push([r_idx,
        c_idx])}\\n                    end\\n                end\\n                \\n
        \               show do\\n                    title \\\"Transferring Culture
        to Output Plates\\\"\\n                    separator\\n                    note
        \\\"Follow the table below to transfer culture from the 24 Deep Well Plate
        #{plt.id} to Plate #{out_fc_plt.id} \\u0026 Plate #{plate_reader_plate.id}\\\"\\n
        \                   check \\\"To plate \\u003cb\\u003e#{out_fc_plt.id}\\u003c/b\\u003e
        transfer \\u003cb\\u003e#{FC_PLT_TRANSFER_VOL}l\\u003c/b\\u003e\\\"\\n                    check
        \\\"To plate \\u003cb\\u003e#{plate_reader_plate.id}\\u003c/b\\u003e transfer
        \\u003cb\\u003e#{PLT_RDR_PLT_TRANSERFER_VOL}l\\u003c/b\\u003e\\\"\\n                    if
        debug\\n                        collection = Collection.find(271292)\\n                    else\\n
        \                       collection = out_fc_plt # This is just for displaying
        both out_fc_plt and plate_reader_plate should have the same matricies associated
        in the same layout\\n                    end\\n                    bullet
        \\\"\\u003cb\\u003eCoordinates correspond to the wells in plate #{plt.id}\\u003c/b\\u003e\\\"\\n
        \                   table highlight_rc(collection, display_rc_list) {|r,c|
        \\\"#{coordinates_24(r, c)}\\\"}\\n                end\\n                count
        += 1\\n                spin_down_plates.push(plt.id)\\n                if
        count % 2 == 0 # Spin down every pair of 24DW plates in order to balance centrifuge\\n
        \                   show {\\n                        title \\\"Spin Down 24
        Deep Well Plates\\\"\\n                        separator\\n                        note
        \\\"Use the large centrifuge to spin down deep well plates\\\"\\n                        check
        \\\"Centrifuge plates \\u003cb\\u003e#{spin_down_plates.flatten}\\u003c/b\\u003e
        at \\u003cb\\u003e4C, 4000rpm, for 10 mins\\u003c/b\\u003e\\\"\\n                        note
        \\\"Once plates are finished being centrifuged aspirate supernatant without
        disturbing the cell pellets.\\\"\\n                        bullet \\\"Continue
        on to the next step once plates are being centrifuged.\\\"\\n                    }\\n
        \                   spin_down_plates = []\\n                end\\n            end\\n
        \           \\n            # Once 24 Deep wells have been spun down and supernatant
        has been removed\\n            input_item_arr.each do |plt|\\n                #
        find the rc_list from where the deep well transfer coords match the coordinates_96\\n
        \               display_rc_list = []\\n                deep_well_transfer_coords
        = plt.get('deep_well_transfer_coords') # Contains coords like: \\\"A1\\\",
        \\\"A2\\\"...\\n                deep_well_transfer_coords.flatten.each do
        |coord|\\n                    coordinates_96.map.each_with_index do |row,
        r_idx|\\n                        col_idx = row.each_index.select {|well| row[well]
        == coord}\\n                        col_idx.each {|c_idx| display_rc_list.push([r_idx,
        c_idx])}\\n                    end\\n                end\\n                \\n
        \               show do\\n                    title \\\"Resuspending Cell
        Pellets\\\"\\n                    separator\\n                    check \\\"To
        each well in Plate \\u003cb\\u003e#{plt.id}\\u003c/b\\u003e resuspend cell
        pellet in \\u003cb\\u003e0.5mL\\u003c/b\\u003e of \\u003cb\\u003eRNAlater
        Soln\\u003c/b\\u003e\\\"\\n                    note \\\"Next, transfer resuspended
        cell pellet from Plate \\u003cb\\u003e#{plt.id}\\u003c/b\\u003e to Plate \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e\\\"\\n
        \                   note \\\"Follow the table below to transfer culture from
        the 24 Deep Well plate to Plate #{rna_plate.id}\\\"\\n                    if
        debug\\n                        collection = Collection.find(271292)\\n                    else\\n
        \                       collection = out_fc_plt # This is just for displaying\\n
        \                   end\\n                    bullet \\\"\\u003cb\\u003eCoordinates
        correspond to the wells in plate #{plt.id}\\u003c/b\\u003e\\\"\\n                    table
        highlight_rc(collection, display_rc_list) {|r,c| \\\"#{coordinates_24(r, c)}\\\"}\\n
        \               end\\n            end            \\n            # Once RNA
        plate has been filled, centrifuge once more to remove supernatant\\n            show
        {\\n                title \\\"Collecting Cell Pellets\\\"\\n                separator\\n
        \               note \\\"Once all cell pellets have been resuspended and collected
        on to Plate #{rna_plate.id}\\\"\\n                check \\\"Centrifuge Plate
        \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e at \\u003cb\\u003e4C, 4000rpm,
        for 10 mins\\u003c/b\\u003e\\\"\\n                check \\\"Once done, remove
        supernatant, seal with aluminumn foil cover, and place in the -80C freezer.\\\"\\n
        \               rna_plate.location = \\\" -80C freezer\\\"\\n                rna_plate.save\\n
        \           }\\n        }\\n        \\n        cleaning_up()\\n        \\n
        \   end # Main\\n\\n\\n    def intro()\\n        show {\\n            title
        \\\"Introduction - High Throughput Sampling \\u0026 Harvesting\\\"\\n            separator\\n
        \           note \\\"In this protocol you will be sampling and harvesting
        cultures for measurements and downstream processing.\\\"\\n            note
        \\\"\\u003cb\\u003e1.\\u003c/b\\u003e Sample each culture and arrest ribosomal
        function with Kanamycin\\\"\\n            note \\\"\\u003cb\\u003e2.\\u003c/b\\u003e
        Measure OD \\u0026 GFP\\\"\\n            note \\\"\\u003cb\\u003e3.\\u003c/b\\u003e
        Harvest cells for RNA Sequencing.\\\"\\n        }\\n    end\\n    \\n    def
        gather_materials(op)\\n        show {            transfer_coordinates = build_96_matrix(deep_well_transfer_coords,
        display_rc_list)\\n\\n            title \\\"Gather Materials\\\"\\n            separator\\n
        \           check \\\"Set large centrifuge to 4C\\\"\\n            check \\\"In
        an appropriate container, aliquot \\u003cb\\u003e12.8mL\\u003c/b\\u003e of
        PBS \\u0026 label: \\u003cb\\u003ePBS+Kan\\u003c/b\\u003e\\\"\\n            bullet
        \\\"To the PBS add \\u003cb\\u003e3.2mL\\u003c/b\\u003e of Kan Stock Solution
        (10mg/mL)\\\"\\n            check \\\"Gather \\u003cb\\u003e2\\u003c/b\\u003e
        96 Well Flat Bottom (black) plate(s)\\\"\\n            check \\\"Gather \\u003cb\\u003e1\\u003c/b\\u003e
        96 Deep Well plate(s)\\\"\\n            check \\\"In an appropriate container,
        aliquot \\u003cb\\u003e15mL\\u003c/b\\u003e of \\u003cb\\u003eM9\\u003c/b\\u003e
        media \\u0026 label: \\u003cb\\u003eRNAlater Soln\\u003c/b\\u003e\\\"\\n            bullet
        \\\"To that media, add \\u003cb\\u003e30mL\\u003c/b\\u003e of \\u003cb\\u003eRNAlater\\u003c/b\\u003e\\\"\\n
        \       }\\n    end\\n    def cleaning_up()\\n        show{\\n            title
        \\\"Cleaning Up...\\\"\\n            separator\\n            check \\\"Before
        ending the protocol, clean up bench and other instruments used\\\"\\n            check
        \\\"Make sure that the centrifuge temperature is placed back to room temperature\\\"\\n
        \       }\\n    end\\n    \\n    def prepare_flow_cytometry_plate(op, transfer_coordinates,
        experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out)\\n
        \       out_fc_plt = op.output(OUT_FC_PLT).collection\\n        \\n        #
        Associate to output FC plate\\n        out_fc_plt.matrix = sample_id_matrix_out\\n
        \       out_fc_plt.save\\n\\n        out_fc_plt.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       out_fc_plt.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       out_fc_plt.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       out_fc_plt.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n
        \       \\n        show {\\n            title \\\"Preparing Flow Cytometry
        Measurement Plate\\\"\\n            separator\\n            check \\\"Gather
        a 96 Flat Bottom (black) plate\\\"\\n            check \\\"Label Plate \\u003cb\\u003e#{out_fc_plt.id}\\u003c/b\\u003e\\\"\\n
        \           bullet \\\"Continue to the next step when ready\\\"\\n        }\\n
        \       show {\\n            title \\\"Preparing Flow Cytometry Measurement
        Plate\\\"\\n            separator\\n            note \\\"The PBS+Kan Solution
        will arrest ribosomal transcription\\\"\\n            check \\\"Gather a multichannel
        resivior for \\u003cb\\u003ePBS+Kan Solution\\u003c/b\\u003e\\\"\\n            note
        \\\"Follow the table below to fill plate the appropriate wells with \\u003cb\\u003ePBS+Kan\\u003c/b\\u003e\\\"\\n
        \           table highlight_non_empty(out_fc_plt) {|r,c| '180l'}\\n        }\\n
        \       return out_fc_plt\\n    end\\n    \\n    def prepare_plate_reader_plate(op,
        transfer_coordinates, experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96,
        sample_id_matrix_out)\\n        plate_reader_plate = op.output(OUT_PLT_RDR_PLT).collection\\n
        \       \\n        # Associate to output plate reader plate\\n        plate_reader_plate.matrix
        = sample_id_matrix_out\\n        plate_reader_plate.save\\n        plate_reader_plate.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       plate_reader_plate.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n
        \       \\n        show {\\n            title \\\"Preparing Plate Reader Measurement
        Plate\\\"\\n            separator\\n            check \\\"Gather a 96 Flat
        Bottom (black) plate\\\"\\n            check \\\"Label Plate \\u003cb\\u003e#{plate_reader_plate.id}\\u003c/b\\u003e\\\"\\n
        \           bullet \\\"Continue on the the next step to fill with culture.\\\"\\n
        \       }\\n        return plate_reader_plate\\n    end\\n    \\n    # TODO
        Shove rna parts into distinct screw cap items\\n    def prepare_rna_plate(op,
        transfer_coordinates, experimental_anti_matrix_96, media_type_matrix_96, inducer_matrix_96,
        sample_id_matrix_out)\\n        rna_plate = op.output(OUT_RNA_PLT).collection\\n
        \       \\n        # Associate to output RNA plate\\n        id_range = create_non_traditional_parts(rna_plate,
        sample_id_matrix_out, \\\"2 mL Screw Cap Tube\\\")\\n        \\n        rna_plate.save\\n
        \       rna_plate.set_data_matrix(\\\"transfer_coordinates\\\",transfer_coordinates)\\n
        \       rna_plate.set_data_matrix(\\\"Experimental Antibiotic\\\",experimental_anti_matrix_96)\\n
        \       rna_plate.set_data_matrix(\\\"Type of Media\\\",media_type_matrix_96)\\n
        \       rna_plate.set_data_matrix(\\\"Inducers\\\",inducer_matrix_96)\\n        \\n
        \       show {\\n            title \\\"Preparing RNA Prep Plate\\\"\\n            separator\\n
        \           check \\\"Gather a eppendorf 96 deep well plate\\\"\\n            check
        \\\"Label plate \\u003cb\\u003e#{rna_plate.id}\\u003c/b\\u003e\\\"\\n            bullet
        \\\"Continue on to the next step to fill with culture.\\\"\\n        }\\n
        \       return rna_plate\\n    end\\n    \\n    def coordinates_24(row, col)\\n
        \       r = transfer_24_to_96_row(row)\\n        c = transfer_24_to_96_col(col)\\n
        \       coordinates_24 = ('A'..'D').to_a.map {|row| (1..6).to_a.map {|col|
        row + col.to_s}} # 96 Well coordinate map\\n        return coordinates_24[r][c]\\n
        \   end\\n    \\n    def transfer_24_to_96_row(row)\\n        arr = [1, 3,
        5, 7]\\n        if arr.include? row\\n            row = arr.find_index(row)\\n
        \       else\\n            arr = [0, 2, 4, 6]\\n            row = arr.find_index(row)\\n
        \       end\\n        \\n        # arr = (arr.include? row) ? arr : arr =
        [0, 2, 4, 6]\\n        # row = arr.find_index(row)\\n        return row\\n
        \   end\\n    \\n    def transfer_24_to_96_col(col)\\n        if col \\u003e
        5\\n            col = col - 6\\n        else\\n            col\\n        end\\n
        \       return col\\n    end\\n    \\n    \\n    def transferring_24s_to_96_matricies(input_arr)\\n
        \       # Empty 96 well dimesion matricies\\n        transfer_coordinates
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        experimental_anti_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        media_type_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        inducer_matrix_96
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        sample_id_matrix_out
        = (0..7).to_a.map {|row| (0..11).to_a.map {|col| -1}}\\n        \\n        #
        96 Well coordinate map\\n        coordinates_96 = ('A'..'H').to_a.map {|row|
        (1..12).to_a.map {|col| row + col.to_s}}\\n        \\n        # For each input
        plate get its associate matricies and place into appropriate empty 96 well
        matrix\\n        input_arr.each do |plt|\\n            \\n            # find
        the rc_list from where the deep well transfer coords match the coordinates_96\\n
        \           display_rc_list = []\\n            deep_well_transfer_coords =
        plt.data_matrix_values('deep_well_transfer_coords') # Contains coords like:
        \\\"A1\\\", \\\"A2\\\"...\\n            deep_well_transfer_coords.flatten.each
        do |coord|\\n                coordinates_96.map.each_with_index do |row, r_idx|\\n
        \                   col_idx = row.each_index.select {|well| row[well] == coord}\\n
        \                   col_idx.each {|c_idx| display_rc_list.push([r_idx, c_idx])}\\n
        \               end\\n            end\\n            \\n            \\n            #
        Use display_rc_list to place information into the appropriate well\\n            transfer_coordinates
        = build_96_matrix(deep_well_transfer_coords, display_rc_list)\\n            \\n
        \           # Use display_rc_list to place correct media info into the correct
        well\\n            experimental_anti_mat       = plt.data_matrix_values('Experimental
        Antibiotics')\\n            experimental_anti_matrix_96 = build_96_matrix(experimental_anti_mat,
        display_rc_list)\\n            \\n            media_type_mat              =
        plt.data_matrix_values(\\\"Type of Media\\\")\\n            media_type_matrix_96
        \       = build_96_matrix(media_type_mat, display_rc_list)\\n            \\n
        \           inducer_mat                 = plt.data_matrix_values(\\\"Inducers\\\")\\n
        \           inducer_matrix_96           = build_96_matrix(inducer_mat, display_rc_list)\\n
        \           \\n            # Use display_rc_list to place correct sample_id/strain
        info into the correct well\\n            sample_id_mat = Collection.find(plt.id).matrix\\n
        \           sample_id_matrix_out = build_96_matrix(sample_id_mat, display_rc_list)\\n
        \       end\\n        return [transfer_coordinates, experimental_anti_matrix_96,
        media_type_matrix_96, inducer_matrix_96, sample_id_matrix_out]\\n    end\\n\\n
        \   def build_96_matrix(matrix, rc_list)\\n        matrix_96 = (0..7).to_a.map
        {|row| (0..11).to_a.map {|col| -1}}\\n        matrix.flatten.each_with_index
        { |coord, idx|\\n            r, c = rc_list[idx]\\n            (coord.nil?)
        ? matrix_96[r][c] = -1 : matrix_96[r][c] = coord\\n        }\\n        return
        matrix_96\\n    end\\n\\nend # Class\\n\\n\",\"parent_id\":1516,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:42:07.000-08:00\",\"updated_at\":\"2018-11-07T16:42:07.000-08:00\",\"user_id\":193},{\"id\":90703,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n\\n  def main\\n\\n
        \   operations.retrieve.make\\n    \\n    flask_type = \\n    cell_suspension_medium
        =\\n    \\n    ##Label a new flask.\\n    \\n    ##Add cell suspension medium\\n
        \   \\n    ##Transfer 5 mL of cell suspension to the new flask using a seriological
        pipette.\\n    \\n    ##Place in the shaker\\n    \\n    ##Place old flask
        in the cleaning bucket by the sink.\\n    \\n    \\n    ##Reset operation
        input item \\n    operations.eachd do |op|\\n        flask = op.input(INPUT).item.id\\n
        \       operations.first.input(\\\"Plate\\\").set item: plate if plate\\n
        \   \\n    operations.store\\n\\n    {}\\n\\n  end\\n\\nend\\n\",\"parent_id\":1551,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:41:30.000-08:00\",\"updated_at\":\"2018-11-07T16:41:30.000-08:00\",\"user_id\":143},{\"id\":90702,\"name\":\"protocol\",\"content\":\"#
        This is a default, one-size-fits all protocol that shows how you can\\r\\n#
        access the inputs and outputs of the operations associated with a job.\\r\\n#
        Add specific instructions for this protocol!\\r\\n\\r\\nneeds \\\"Standard
        Libs/UploadHelper\\\"\\r\\nneeds \\\"Standard Libs/AssociationManagement\\\"\\r\\nneeds
        \\\"Standard Libs/Feedback\\\"\\r\\n\\r\\n\\r\\nclass Protocol\\r\\n  include
        Feedback\\r\\n  include UploadHelper, AssociationManagement\\r\\n    \\r\\n
        \ # upload stuff\\r\\n  DIRNAME=\\\"\\u003cwhere are gel files on computer\\u003e\\\"\\r\\n
        \ TRIES=3\\r\\n  \\r\\n  def main\\r\\n\\r\\n    operations.retrieve(interactive:
        false)\\r\\n    \\r\\n    # get gel images\\r\\n    gels = operations.map
        { |op| op.input(\\\"SDS Gel\\\").collection}.uniq\\r\\n    gels.each do |gel|\\r\\n
        \   \\r\\n        grouped_ops=operations.select { |op| op.input(\\\"SDS Gel\\\").collection
        == gel }\\r\\n        image_name = \\\"gel_#{gel.id}\\\"\\r\\n        \\r\\n
        \       # image gel\\r\\n        image_gel(gel,image_name)\\r\\n        \\r\\n
        \       # upload image\\r\\n        ups = uploadData(\\\"#{DIRNAME}/#{image_name}\\\",
        1, TRIES) # 1 file per gel\\r\\n        ups = [Upload.find(1)] if debug\\r\\n
        \       \\r\\n        # associate to gel, plan, op \\r\\n        # can't associate
        to outputs yet because they are only made if lengths are verified\\r\\n        up=nil\\r\\n
        \       if(!(ups.nil?))\\r\\n            up=ups[0]\\r\\n\\r\\n            gel_item
        = Item.find(gel.id)\\r\\n\\r\\n            # associate gel image to gel\\r\\n
        \           gel_item.associate image_name, \\\"successfully imaged gel\\\",
        up\\r\\n          \\r\\n            grouped_ops.each do |op| # associate to
        all operations connected to gel\\r\\n                # description of where
        this op is in the gel, to be used as desc tag for image upload\\r\\n                location_in_gel
        = \\\"#{op.input(\\\"SDS Gel\\\").sample.name} is in row #{op.input(\\\"SDS
        Gel\\\").row + 1} and column #{op.input(\\\"SDS Gel\\\").column + 1}\\\"\\r\\n
        \           \\r\\n                # associate image to op with a location
        description\\r\\n                op.associate image_name, location_in_gel,
        up\\r\\n            \\r\\n                # associate image to plan, or append
        new location to description if association already exists\\r\\n                existing_assoc
        = op.plan.get(image_name)\\r\\n                if existing_assoc \\u0026\\u0026
        op.plan.upload(image_name) == up\\r\\n                    op.plan.modify(image_name,
        existing_assoc.to_s + \\\"\\\\n\\\" + location_in_gel, up)\\r\\n                else\\r\\n
        \                   op.plan.associate image_name, location_in_gel , up\\r\\n
        \               end\\r\\n            end\\r\\n        end\\r\\n        \\r\\n
        \       # check lengths of fragments in gel\\r\\n        verify_protein_size(gel,grouped_ops)\\r\\n
        \       \\r\\n        clean_up gel, gels\\r\\n    end\\r\\n\\r\\n  end\\r\\n\\r\\n\\r\\n
        \ def image_gel(gel,image_name)\\r\\n    show do\\r\\n        title \\\"Image
        gel #{gel}\\\"\\r\\n        check \\\"Take off the filter on the camera.\\\"\\r\\n
        \       check \\\"Spray the light box with ethanol and wipe dry with a paper
        towel.\\\"\\r\\n        check \\\"Put the gel #{gel} on the light box and
        take a picture.\\\"\\r\\n        check \\\"Check to see if the picture matches
        the gel before uploading.\\\"\\r\\n        check \\\"Rename the picture you
        just took exactly as \\u003cb\\u003e#{image_name}\\u003c/b\\u003e.\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def verify_protein_size(gel,grouped_ops)\\r\\n
        \   op_table = [[\\\"Gel ID\\\",\\\"Well Number\\\",\\\"Batch - Sample\\\",\\\"Expected
        protein band\\\"]]\\r\\n    well_no = 2\\r\\n    batch_no = 1\\r\\n\\r\\n
        \   grouped_ops.each do |op|\\r\\n        # before\\r\\n        row = []\\r\\n
        \       row \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row
        \\u003c\\u003c well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 1\\\"\\r\\n
        \       #row \\u003c\\u003c \\\"Before IPTG\\\"\\r\\n        row \\u003c\\u003c
        \\\"Undetectable\\\"\\r\\n        op_table \\u003c\\u003c row\\r\\n        well_no
        = well_no + 1\\r\\n        # after\\r\\n        row = []\\r\\n        row
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").item.id\\r\\n        row \\u003c\\u003c
        well_no\\r\\n        row \\u003c\\u003c \\\"#{batch_no} - 2\\\"\\r\\n        #row
        \\u003c\\u003c \\\"After IPTG\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n
        \       op_table \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n
        \       # sample\\r\\n        row = []\\r\\n        row \\u003c\\u003c op.input(\\\"SDS
        Gel\\\").item.id\\r\\n        row \\u003c\\u003c well_no\\r\\n        row
        \\u003c\\u003c \\\"#{batch_no} - 3\\\"\\r\\n        #row \\u003c\\u003c \\\"Protein
        Sample\\\"\\r\\n        row \\u003c\\u003c \\\"Detectable\\\"\\r\\n        op_table
        \\u003c\\u003c row\\r\\n        well_no = well_no + 1\\r\\n        \\r\\n
        \       batch_no = batch_no + 1\\r\\n    end\\r\\n\\r\\n    show {\\r\\n        title
        \\\"Verify protein size for gel #{gel}\\\"\\r\\n        bullet \\\"To verify
        a protein expression, every three wells are viewed as a data set. In the following
        table, 1-1, 1-2 and 1-3 are considered as one data set to verify a protein
        expression. The same condition applies to 2-1, 2-2 and 2-3 and so on.\\\"\\r\\n
        \       note \\\"An example of expected results as shown in the picture below.\\\"\\r\\n
        \       table op_table\\r\\n        table grouped_ops.start_table\\r\\n          .custom_column(heading:
        \\\"Gel ID\\\") { |op| op.input(\\\"SDS Gel\\\").item.id }\\r\\n          .custom_column(heading:
        \\\"Batch Number\\\", checkable: true) { |op| op.input(\\\"SDS Gel\\\").column
        + 1 }\\r\\n          .custom_column(heading: \\\"Expected Protein Size\\\")
        { |op| op.input(\\\"SDS Gel\\\").sample.properties[\\\"Size\\\"] }\\r\\n          .get(:correct,
        type: 'text', heading: \\\"Does the bands (Batch-1,Batch-2 and Batch-3) match
        the expected result? (y/n)\\\", default: 'y')\\r\\n          .custom_column(heading:
        \\\"User\\\") { |op| op.user.name }\\r\\n        .end_table\\r\\n        image
        \\\"Actions/ProteinPurification/expected_protein_expression.jpg\\\"\\r\\n
        \   }\\r\\n  end\\r\\n  \\r\\n  def clean_up gel, gels\\r\\n      show {\\r\\n
        \       title \\\"Clean Up\\\"\\r\\n        check \\\"Turn off the light box.\\\"\\r\\n
        \       check \\\"Dispose of the gel #{gel} by placing it in the waste container.
        Spray the surface of the light box with ethanol and wipe until dry using a
        paper towel.\\\"\\r\\n        check \\\"Clean up the gel box by rinsing with
        water and remove the id from the box. Return them to the gel station.\\\"\\r\\n
        \       check \\\"Reassemble the filter to the camera.\\\"\\r\\n      }\\r\\n
        \   end\\r\\n\\r\\nend\",\"parent_id\":1546,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:40:17.000-08:00\",\"updated_at\":\"2018-11-07T16:40:17.000-08:00\",\"user_id\":200},{\"id\":90701,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gel for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        bullet \\\"Retrieve
        #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n        bullet \\\"Make
        sure that the excess blue dye has been removed from the gel matrix background
        and the protein bands can be distinguished. (as an example shown in the picture
        below).\\\"\\r\\n        bullet \\\"Store the gel in the box saturated with
        water.\\\"\\r\\n        bullet \\\"If the background is still in dark blue,
        wash gels for another 1 hour or leave it on the shaker overnight. Grab a manager
        to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:38:01.000-08:00\",\"updated_at\":\"2018-11-07T16:38:01.000-08:00\",\"user_id\":200},{\"id\":90700,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gel for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        bullet \\\"Retrieve
        #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n        bullet \\\"Make
        sure that the excess blue dye has been removed from the gel matrix background
        and the protein bands can be distinguished. (as an example shown in the picture
        below).\\\"\\r\\n        bullet \\\"Store the gel in the box saturated with
        water.\\\"\\r\\n        bullet \\\"If the background is still in dark blue,
        wash gels for another 1 hour or leave it on the shaker overnight. Grab a manager
        to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:37:22.000-08:00\",\"updated_at\":\"2018-11-07T16:37:22.000-08:00\",\"user_id\":200},{\"id\":90699,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gel for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Retrieve
        #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n        check \\\"Make
        sure that the excess blue dye has been removed from the gel matrix background
        and the protein bands can be distinguished. (as an example shown in the picture
        below).\\\"\\r\\n        check \\\"Store the gel in the box saturated with
        water.\\\"\\r\\n        bullet \\\"If the background is still in dark blue,
        wash gels for another 1 hour or leave it on the shaker overnight. Grab a manager
        to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:36:28.000-08:00\",\"updated_at\":\"2018-11-07T16:36:28.000-08:00\",\"user_id\":200},{\"id\":90698,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gel for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:36:00.000-08:00\",\"updated_at\":\"2018-11-07T16:36:00.000-08:00\",\"user_id\":200},{\"id\":90697,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:35:49.000-08:00\",\"updated_at\":\"2018-11-07T16:35:49.000-08:00\",\"user_id\":200},{\"id\":90696,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the box.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def background_wash(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Destain gel \\\"\\r\\n        bullet \\\"Place
        the boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       bullet \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: {
        hours: 1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def
        check_gel_clean(op_in_gel)\\r\\n    show do\\r\\n        title \\\"Check on
        gels\\\"\\r\\n        check \\\"Remove boxes from the shaker in the still
        incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        check \\\"Make sure
        that the excess blue dye has been removed from the gel matrix background and
        the protein bands can be distinguished. (as an example shown in the picture
        below).\\\"\\r\\n        check \\\"Store the gel in the box saturated with
        water.\\\"\\r\\n        bullet \\\"If the background is still in dark blue,
        wash gels for another 1 hour or leave it on the shaker overnight. Grab a manager
        to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:35:31.000-08:00\",\"updated_at\":\"2018-11-07T16:35:31.000-08:00\",\"user_id\":200},{\"id\":90695,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      bullet \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def
        background_wash(op_in_gel)\\r\\n    show do\\r\\n        title \\\"Destain
        gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in the still
        incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet \\\"Wash
        gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes: 0, seconds:
        0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:35:15.000-08:00\",\"updated_at\":\"2018-11-07T16:35:15.000-08:00\",\"user_id\":200},{\"id\":90694,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      check \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      check
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker.\\\"\\r\\n      bullet
        \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n      bullet
        \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def
        background_wash(op_in_gel)\\r\\n    show do\\r\\n        title \\\"Destain
        gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in the still
        incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet \\\"Wash
        gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes: 0, seconds:
        0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:34:33.000-08:00\",\"updated_at\":\"2018-11-07T16:34:33.000-08:00\",\"user_id\":200},{\"id\":90693,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      check \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      check
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove #{op_in_gel.to_sentence} from the shaker in the still incubator.\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:34:26.000-08:00\",\"updated_at\":\"2018-11-07T16:34:26.000-08:00\",\"user_id\":200},{\"id\":90692,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      check \\\"Place
        #{op_in_gel.to_sentence} on a shaker in the still incubator.\\\"\\r\\n      check
        \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:34:10.000-08:00\",\"updated_at\":\"2018-11-07T16:34:10.000-08:00\",\"user_id\":200},{\"id\":90691,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      check \\\"Place
        the box on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gel for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:33:24.000-08:00\",\"updated_at\":\"2018-11-07T16:33:24.000-08:00\",\"user_id\":200},{\"id\":90690,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      check \\\"Place
        the box on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:33:14.000-08:00\",\"updated_at\":\"2018-11-07T16:33:14.000-08:00\",\"user_id\":200},{\"id\":90689,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Stain gel\\\"\\r\\n      check \\\"Place
        the boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:32:55.000-08:00\",\"updated_at\":\"2018-11-07T16:32:55.000-08:00\",\"user_id\":200},{\"id\":90688,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        bullet \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        bullet \\\"Pour off water and add 20mL of gel
        staining buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place
        the boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:32:26.000-08:00\",\"updated_at\":\"2018-11-07T16:32:26.000-08:00\",\"user_id\":200},{\"id\":90687,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      bullet \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      bullet \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      bullet \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      bullet \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      bullet
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        check \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        check \\\"Pour off water and add 20mL of gel staining
        buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place
        the boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:31:56.000-08:00\",\"updated_at\":\"2018-11-07T16:31:56.000-08:00\",\"user_id\":200},{\"id\":90686,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      check \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      check \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        check \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        check \\\"Pour off water and add 20mL of gel staining
        buffer (R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place
        the boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:31:23.000-08:00\",\"updated_at\":\"2018-11-07T16:31:23.000-08:00\",\"user_id\":200},{\"id\":90685,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      check \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      check \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        check \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n        check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        check \\\"Pour off water and add 20mL of gel staining
        buffer (in R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place
        the boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:30:49.000-08:00\",\"updated_at\":\"2018-11-07T16:30:49.000-08:00\",\"user_id\":200},{\"id\":90684,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      check \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n      check \\\"Return
        #{op_in_gel.to_sentence} to the shaker in the still incubator.\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Retrieve
        the box from shaker. Replace with clean water.\\\"\\r\\n        check \\\"Place
        the boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial:
        { hours: 0, minutes: 5, seconds: 0}\\r\\n        check \\\"Pour off water
        and add 20mL of gel staining buffer (in R1-350) to each box.\\\"\\r\\n        image
        \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place the boxes
        on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:30:32.000-08:00\",\"updated_at\":\"2018-11-07T16:30:32.000-08:00\",\"user_id\":200},{\"id\":90683,\"name\":\"precondition\",\"content\":\"def
        precondition(_op)\\n    #Age of item should be equal to the \\\"Splitting
        time (days)\\\" input value\\n  true\\nend\",\"parent_id\":1551,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:30:25.000-08:00\",\"updated_at\":\"2018-11-07T16:30:25.000-08:00\",\"user_id\":143},{\"id\":90682,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      check \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Replace with
        clean water.\\\"\\r\\n      check \\\"Return #{op_in_gel.to_sentence} to the
        shaker in the still incubator.\\\"\\r\\n      check \\\"Wash gels for 5 minutes.\\\"\\r\\n
        \     timer initial: { hours: 0, minutes: 5, seconds: 0}\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Retrieve the
        box from shaker. Replace with clean water.\\\"\\r\\n        check \\\"Place
        the boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial:
        { hours: 0, minutes: 5, seconds: 0}\\r\\n        check \\\"Pour off water
        and add 20mL of gel staining buffer (in R1-350) to each box.\\\"\\r\\n        image
        \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place the boxes
        on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:30:16.000-08:00\",\"updated_at\":\"2018-11-07T16:30:16.000-08:00\",\"user_id\":200},{\"id\":90681,\"name\":\"precondition\",\"content\":\"def
        precondition(_op)\\n    #Age of item should be equal to the \\n  true\\nend\",\"parent_id\":1551,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:30:14.000-08:00\",\"updated_at\":\"2018-11-07T16:30:14.000-08:00\",\"user_id\":143},{\"id\":90680,\"name\":\"protocol\",\"content\":\"\\n\\n#
        This is a default, one-size-fits all protocol that shows how you can\\n# access
        the inputs and outputs of the operations associated with a job.\\n# Add specific
        instructions for this protocol!\\n\\nclass Protocol\\n\\n  def main\\n\\n
        \   operations.retrieve.make\\n    \\n    flask_type = \\n    cell_suspension_medium
        =\\n    \\n    ##Label a new flask.\\n    \\n    ##Add cell suspension medium\\n
        \   \\n    ##Transfer \\n\\n    \\n    operations.store\\n\\n    {}\\n\\n
        \ end\\n\\nend\\n\",\"parent_id\":1551,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:29:58.000-08:00\",\"updated_at\":\"2018-11-07T16:29:58.000-08:00\",\"user_id\":143},{\"id\":90679,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      check \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Replace with
        clean water.\\\"\\r\\n      check \\\"Return #{op_in_gel.to_sentence} to the
        shaker in the still incubator.\\\"\\r\\n      check \\\"Wash gels for 5 minutes.\\\"\\r\\n
        \     timer initial: { hours: 0, minutes: 5, seconds: 0}\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Pour off water
        and add water into the boxes.\\\"\\r\\n        check \\\"Place the boxes on
        a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        check \\\"Pour off water and add 20mL of gel staining
        buffer (in R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place
        the boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:28:57.000-08:00\",\"updated_at\":\"2018-11-07T16:28:57.000-08:00\",\"user_id\":200},{\"id\":90678,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      check \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Replace with
        clean water.\\\"\\r\\n      check \\\"Return #{op_in_gel.to_sentence} to the
        shaker in the still incubator.\\\"\\r\\n      check \\\"Wash gels for 5 minutes.\\\"\\r\\n
        \     timer initial: { hours: 0, minutes: 5, seconds: 0}\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Pour off water
        and add water into the boxes.\\\"\\r\\n        check \\\"Place the boxes on
        a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n        check \\\"Pour off water and add 20mL of gel staining
        buffer (in R1-350) to each box.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place
        the boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:28:41.000-08:00\",\"updated_at\":\"2018-11-07T16:28:41.000-08:00\",\"user_id\":200},{\"id\":90677,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      check \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Replace with
        clean water.\\\"\\r\\n      check \\\"Place the boxes on a shaker in the still
        incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n      check \\\"Wash gels
        for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Pour
        off water and add water into the boxes.\\\"\\r\\n        check \\\"Place the
        boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial:
        { hours: 0, minutes: 5, seconds: 0}\\r\\n        check \\\"Pour off water
        and add 20mL of gel staining buffer (in R1-350) to each box.\\\"\\r\\n        image
        \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place the boxes
        on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:27:53.000-08:00\",\"updated_at\":\"2018-11-07T16:27:53.000-08:00\",\"user_id\":200},{\"id\":90676,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place #{op_in_gel.to_sentence}
        on a shaker in the still incubator.\\\"\\r\\n      check \\\"Wash gels for
        5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes: 5, seconds:
        0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Pour off water
        and add water into the boxes.\\\"\\r\\n      check \\\"Place the boxes on
        a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Pour
        off water and add water into the boxes.\\\"\\r\\n        check \\\"Place the
        boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial:
        { hours: 0, minutes: 5, seconds: 0}\\r\\n        check \\\"Pour off water
        and add 20mL of gel staining buffer (in R1-350) to each box.\\\"\\r\\n        image
        \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place the boxes
        on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:27:01.000-08:00\",\"updated_at\":\"2018-11-07T16:27:01.000-08:00\",\"user_id\":200},{\"id\":90675,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place the box on a shaker
        in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Pour off water
        and add water into the boxes.\\\"\\r\\n      check \\\"Place the boxes on
        a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Pour
        off water and add water into the boxes.\\\"\\r\\n        check \\\"Place the
        boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial:
        { hours: 0, minutes: 5, seconds: 0}\\r\\n        check \\\"Pour off water
        and add 20mL of gel staining buffer (in R1-350) to each box.\\\"\\r\\n        image
        \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place the boxes
        on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:26:15.000-08:00\",\"updated_at\":\"2018-11-07T16:26:15.000-08:00\",\"user_id\":200},{\"id\":90674,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      bullet \\\"Grab a gel releaser.\\\"\\r\\n      bullet
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     bullet \\\"Remove the short plate on the top.\\\"\\r\\n      bullet
        \\\"Cut away the top layer of gel by using a gel releaser.\\\"\\r\\n      bullet
        \\\"Inverting the gel and plater under water. Floating the gel off the plate
        in the corresponding box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place the boxes on a shaker
        in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Pour off water
        and add water into the boxes.\\\"\\r\\n      check \\\"Place the boxes on
        a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Pour
        off water and add water into the boxes.\\\"\\r\\n        check \\\"Place the
        boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial:
        { hours: 0, minutes: 5, seconds: 0}\\r\\n        check \\\"Pour off water
        and add 20mL of gel staining buffer (in R1-350) to each box.\\\"\\r\\n        image
        \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place the boxes
        on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:25:18.000-08:00\",\"updated_at\":\"2018-11-07T16:25:18.000-08:00\",\"user_id\":200},{\"id\":90673,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into the corresponding box.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      check \\\"Grab a gel releaser.\\\"\\r\\n      check
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     check \\\"Remove the short plate on the top.\\\"\\r\\n      check \\\"Cut
        away the top layer of gel by using a gel releaser.\\\"\\r\\n      check \\\"Inverting
        the gel and plater under water. Floating the gel off the plate in the corresponding
        box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place the boxes on a shaker
        in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Pour off water
        and add water into the boxes.\\\"\\r\\n      check \\\"Place the boxes on
        a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Pour
        off water and add water into the boxes.\\\"\\r\\n        check \\\"Place the
        boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial:
        { hours: 0, minutes: 5, seconds: 0}\\r\\n        check \\\"Pour off water
        and add 20mL of gel staining buffer (in R1-350) to each box.\\\"\\r\\n        image
        \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place the boxes
        on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:23:28.000-08:00\",\"updated_at\":\"2018-11-07T16:23:28.000-08:00\",\"user_id\":200},{\"id\":90672,\"name\":\"protocol\",\"content\":\"#
        Author: Pei Wu , Sep 2018\\r\\nneeds \\\"Standard Libs/Feedback\\\"\\r\\nclass
        Protocol\\r\\n  include Feedback\\r\\n  def main\\r\\n    \\r\\n    # Gather
        all reserved samples.\\r\\n    operations.retrieve\\r\\n\\r\\n    op_in_protein
        \  = []\\r\\n    op_in_before    = []\\r\\n    op_in_after     = []\\r\\n
        \   \\r\\n    #amount_before   = []\\r\\n    #amount_after    = []\\r\\n    #amount_protein
        \ = []\\r\\n    \\r\\n    #pbs_before      = []\\r\\n    #pbs_after       =
        []\\r\\n    #pbs_protein     = []\\r\\n    \\r\\n    op_count = 0\\r\\n    \\r\\n
        \   operations.running.each do |op|\\r\\n        # generate randon OD values
        for debug\\r\\n        #op.set_input_data(\\\"Protein\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"Before IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        #op.set_input_data(\\\"After IPTG\\\", :od_value, Random.rand(0.8..1.0))
        if debug\\r\\n        # \\r\\n        op_count = op_count + 1\\r\\n        op_in_protein
        \  \\u003c\\u003c op.input(\\\"Protein\\\").item.id\\r\\n        op_in_before
        \   \\u003c\\u003c op.input(\\\"Before IPTG\\\").item.id\\r\\n        op_in_after
        \    \\u003c\\u003c op.input(\\\"After IPTG\\\").item.id\\r\\n        \\r\\n
        \       #tmp_before  = (op.input_data(\\\"Before IPTG\\\", :od_value).to_f
        * 100).floor\\r\\n        #tmp_after   = (op.input_data(\\\"After IPTG\\\",
        :od_value).to_f * 100).floor\\r\\n        #tmp_protein = (op.input_data(\\\"Protein\\\",
        :od_value).to_f * 100).floor\\r\\n        \\r\\n        #amount_before   \\u003c\\u003c
        tmp_before\\r\\n        #amount_after    \\u003c\\u003c tmp_after\\r\\n        #amount_protein
        \ \\u003c\\u003c tmp_protein\\r\\n        #pbs_before  \\u003c\\u003c (240
        - tmp_before)\\r\\n        #pbs_after   \\u003c\\u003c (240 - tmp_after)\\r\\n
        \       #pbs_protein \\u003c\\u003c (240 - tmp_protein)\\r\\n    end\\r\\n\\r\\n
        \   #op_in_gel = []\\r\\n    #operations.each do |op|\\r\\n    #    op_in_gel
        \\u003c\\u003c op.input(\\\"SDS Gel\\\").collection.id\\r\\n    #end\\r\\n\\r\\n
        \   op_in_gel = operations.map { |op| op.input(\\\"SDS Gel\\\").collection.id
        }.uniq\\r\\n    \\r\\n    # Don't use generic operations.make\\r\\n    operations.each
        do |op|\\r\\n        op.output(\\\"SDS Gel\\\").make_part(\\r\\n          op.input(\\\"SDS
        Gel\\\").collection,\\r\\n          op.input(\\\"SDS Gel\\\").row,\\r\\n          op.input(\\\"SDS
        Gel\\\").column\\r\\n        )\\r\\n    end\\r\\n    \\r\\n    op_out_gel
        = operations.map { |op| op.output(\\\"SDS Gel\\\").collection.id }.uniq\\r\\n
        \   \\r\\n    tank_count = (op_in_gel.size)/4.floor\\r\\n    remainder = (op_in_gel.size)
        % 4\\r\\n    if remainder != 0\\r\\n        tank_count = tank_count + 1\\r\\n
        \   end\\r\\n\\r\\n    # Load samples into wells using a pipet with gel loading
        tips. [note] load samples slowly to allow them to settle evenly on the bottom
        of the well\\r\\n    # Arrange them in the following order:\\r\\n\\r\\n    #
        \ -----------------------------------------------------------------------------------------\\r\\n
        \   # | marker |         Batch 1          |         Batch 2          |         Batch
        3          |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | Before | After  | Sample | Before | After  | Sample
        | Before | After  | Sample |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   \\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   # | Col 1  | Col 2  | Col 3  | Col 4  | Col 5  | Col 6  | Col 7  | Col
        8  | Col 9  | Col 10 |\\r\\n    # | ---------------------------------------------------------------------------------------
        |\\r\\n    # | marker | ID_B1  | ID_A1  | ID_I1  | ID_B2  | ID_A2  | ID_I2
        \ | ID_B3  | ID_A3  | ID_I3  |\\r\\n    #  -----------------------------------------------------------------------------------------\\r\\n
        \   grab_lids(tank_count)\\r\\n    \\r\\n    load_marker(op_in_gel)\\r\\n
        \   \\r\\n    load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n\\r\\n
        \   # Place the lid on the tank and make sure to align it with the color-coded
        plugs.\\r\\n    place_lid_and_align_to_plugs\\r\\n    \\r\\n    set_a_30mins_timer\\r\\n
        \   \\r\\n    # Apply 100V to the electrophoresis.\\r\\n    \\r\\n    # Run
        the gel until the smallest protein of the protein marker is completely down
        to the SDS-PAGE.\\r\\n    \\r\\n    # Turn off the power supply, remove the
        tank and pour off the running buffer.\\r\\n    \\r\\n    # Open the arms of
        assembly and remove the gel cassettes.\\r\\n    remove_gel_cassette(op_in_gel)\\r\\n
        \   \\r\\n    # Remove the gels from the gel cassette by gently separating
        the two plates of the gel cassette.\\r\\n    gel_removal\\r\\n    \\r\\n    #
        Remove the gel by floating it off the plate, inverting the gel and plate under
        water.\\r\\n    \\r\\n    # Soak the gel in water and put the container on
        the shaker in the incubator.\\r\\n    gel_wash(op_in_gel)\\r\\n    \\r\\n
        \   # Replace water with clean water every 5mins for three times.\\r\\n    second_wash(op_in_gel)\\r\\n
        \   \\r\\n    final_wash_add_staining(op_in_gel)\\r\\n    \\r\\n    # Pour
        off water and add 20mL gel staining buffer to the container.\\r\\n    \\r\\n
        \   # Put the container on the shaker in incubator for 1hour.\\r\\n    # Pour
        off the gel staining buffer and add clean water to the container to wash the
        gel.\\r\\n    put_container_on_shaker_1hr(op_in_gel)\\r\\n    \\r\\n    #
        Replace the water with clean water every 10mins until the gel background is
        completely clear and gel band can be easily distinguished.\\r\\n    remove_gel_stain(op_in_gel)\\r\\n
        \   \\r\\n    background_wash(op_in_gel)\\r\\n    \\r\\n    # Take a photo
        of the gel. Save the photo and discard the gel.\\r\\n    check_gel_clean(op_in_gel)\\r\\n
        \   \\r\\n    operations.each do |op|\\r\\n        op.input(\\\"Protein\\\").item.mark_as_deleted\\r\\n
        \       op.input(\\\"Before IPTG\\\").item.mark_as_deleted\\r\\n        op.input(\\\"After
        IPTG\\\").item.mark_as_deleted\\r\\n      end\\r\\n    \\r\\n    operations.store(io:
        \\\"output\\\", interactive: true)\\r\\n\\r\\n    return {}\\r\\n  end\\r\\n
        \ \\r\\n  def grab_lids(tank_count)\\r\\n    show do\\r\\n        title \\\"Set
        up the power supply\\\"\\r\\n        check \\\"In the gel room, obtain a power
        supply and set it to 200 V.\\\"\\r\\n        check \\\"Grab \\u003cb\\u003e#{tank_count}\\u003c/b\\u003e
        lid(s). Attach the electrodes of a lid to the power supply. Make sure to align
        the color-coded plugs and jacks.\\\"\\r\\n        image \\\"Actions/ProteinPurification/lid.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\n  def load_marker(op_in_gel)\\r\\n    show
        do\\r\\n        title \\\"Add protein ladder to gel\\\"\\r\\n        check
        \\\"Pipette 10 \xB5l of the protein ladder to well position 1 (the leftmost
        well) of gel #{op_in_gel.to_sentence}.\\\"\\r\\n    end\\r\\n  end\\r\\n\\r\\n
        \ def load_sample_into_wells(op_count,op_in_protein,op_in_before,op_in_after,op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Load sample into gel\\\"\\r\\n      bullet
        \\\"Transfer samples from the tube to the well according to the following
        table:\\\"\\r\\n      note \\\"Load samples by using a P200 pipettor with
        gel loading tips.\\\"\\r\\n      for i in 0...op_in_gel.size\\r\\n        note
        \\\"Gel #{i+1}: #{op_in_gel[i]}\\\"\\r\\n        op_table = [[\\\"Gel ID\\\",\\\"Well
        number\\\",\\\"Sample ID\\\"]]\\r\\n        well_no = 2\\r\\n        if (i+1)*3
        \\u003e op_count\\r\\n            length = op_count - (i*3)\\r\\n        else\\r\\n
        \           length = 3\\r\\n        end\\r\\n        for j in 0...length\\r\\n
        \           # before\\r\\n            row = []\\r\\n            row \\u003c\\u003c
        op_in_gel[i]\\r\\n            row \\u003c\\u003c well_no\\r\\n            row
        \\u003c\\u003c {content:op_in_before[i*3+j], check: true}\\r\\n            op_table
        \\u003c\\u003c row\\r\\n            well_no = well_no + 1\\r\\n            #
        after\\r\\n            row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_after[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n            # sample\\r\\n
        \           row = []\\r\\n            row \\u003c\\u003c op_in_gel[i]\\r\\n
        \           row \\u003c\\u003c well_no\\r\\n            row \\u003c\\u003c
        {content:op_in_protein[i*3+j], check: true}\\r\\n            op_table \\u003c\\u003c
        row\\r\\n            well_no = well_no + 1\\r\\n        end\\r\\n        table
        op_table\\r\\n      end\\r\\n      warning \\\"Load samples slowly to allow
        them to settle evenly on the bottom of the well. Be carefully not to puncture
        the bottom of gel wells.\\\"\\r\\n      image \\\"Actions/ProteinPurification/loading_tip.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def place_lid_and_align_to_plugs\\r\\n
        \   show do \\r\\n      title \\\"Start Electrophoresis\\\"\\r\\n      bullet
        \\\"Carefully attach the lid to tank. Attach the red electrode to the red
        terminal of the power supply, and the black \\r\\n      electrode to the neighboring
        black terminal\\\"\\r\\n      bullet \\\"Set the power supply to 200V.\\\"\\r\\n
        \     bullet \\\"Hit the RUN button on the power supply.\\\"\\r\\n      image
        \\\"Actions/ProteinPurification/Start_Electrophoresis.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n  \\r\\n  def set_a_30mins_timer\\r\\n      show do\\r\\n        title
        \\\"Check on gels\\\"\\r\\n        check \\\"Set a 30-mins timer.\\\"\\r\\n
        \       timer initial: { hours: 0, minutes: 30, seconds: 0}\\r\\n        check
        \\\"The protein ladder should be fully separated by electrophoresis. Grab
        a lab manager to check on the gel with you. The lab manager may have you set
        another timer after checking the gel.\\\"\\r\\n      end\\r\\n  end\\r\\n
        \ \\r\\n  def remove_gel_cassette(op_in_gel)\\r\\n    show do \\r\\n        title
        \\\"Remove gel cassette\\\"\\r\\n        bullet \\\"After electrophoresis
        is done, turn off the power supply and remove the tank lids.\\\"\\r\\n        bullet
        \\\"Pour off the running buffer.\\\"\\r\\n        warning \\\"Make sure the
        gel ID is still labeled on the gel cassette.\\\"\\r\\n        bullet \\\"Grab
        \\u003cb\\u003e#{op_in_gel.size}\\u003c/b\\u003e box(es) and label with ID:
        #{op_in_gel.to_sentence}.\\\"\\r\\n        bullet \\\"Add water to the box.\\\"\\r\\n
        \       bullet \\\"Open the arms of assembly and release the gel cassette.\\\"\\r\\n
        \       bullet \\\"Place the gel cassettes into corresponding boxes.\\\"\\r\\n
        \       image \\\"Actions/ProteinPurification/empty_box.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def gel_removal\\r\\n    show do \\r\\n      title \\\"Gel
        removal\\\"\\r\\n      check \\\"Grab a gel releaser.\\\"\\r\\n      check
        \\\"Gently separate the two plates of a gel cassette by using a gel releaser.\\\"\\r\\n
        \     check \\\"Remove the short plate on the top.\\\"\\r\\n      check \\\"Cut
        away the top layer of gel by using a gel releaser.\\\"\\r\\n      check \\\"Inverting
        the gel and plater under water. Floating the gel off the plate in the corresponding
        box.\\\"\\r\\n      image \\\"Actions/ProteinPurification/gel_releaser.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n\\r\\n  def gel_wash(op_in_gel)\\r\\n    show do \\r\\n
        \     title \\\"Wash gels\\\"\\r\\n      check \\\"Place the boxes on a shaker
        in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n      image \\\"Actions/ProteinPurification/shaker_in_incubator.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n    \\r\\n  def second_wash(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Second wash\\\"\\r\\n      check \\\"Pour off water
        and add water into the boxes.\\\"\\r\\n      check \\\"Place the boxes on
        a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n      check
        \\\"Wash gels for 5 minutes.\\\"\\r\\n      timer initial: { hours: 0, minutes:
        5, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def final_wash_add_staining(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Third wash\\\"\\r\\n        check \\\"Pour
        off water and add water into the boxes.\\\"\\r\\n        check \\\"Place the
        boxes on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Wash gels for 5 minutes.\\\"\\r\\n        timer initial:
        { hours: 0, minutes: 5, seconds: 0}\\r\\n        check \\\"Pour off water
        and add 20mL of gel staining buffer (in R1-350) to each box.\\\"\\r\\n        image
        \\\"Actions/ProteinPurification/gel_staining_buffer.jpg\\\"\\r\\n    end\\r\\n
        \ end\\r\\n\\r\\n  def put_container_on_shaker_1hr(op_in_gel)\\r\\n    show
        do \\r\\n      title \\\"Gel stain\\\"\\r\\n      check \\\"Place the boxes
        on a shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     check \\\"Stain gels for 1 hour.\\\"\\r\\n      timer initial: { hours:
        1, minutes: 0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n\\r\\n  def remove_gel_stain(op_in_gel)\\r\\n
        \   show do \\r\\n      title \\\"Remove Gel staining buffer\\\"\\r\\n      bullet
        \\\"Remove boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \     bullet \\\"Pour off gel staining buffer and rinse the gel with water.\\\"\\r\\n
        \     bullet \\\"Add water to the boxes.\\\"\\r\\n    end\\r\\n  end\\r\\n
        \ \\r\\n  def background_wash(op_in_gel)\\r\\n    show do\\r\\n        title
        \\\"Destain gel \\\"\\r\\n        bullet \\\"Place the boxes on a shaker in
        the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n        bullet
        \\\"Wash gels for 1 hour.\\\"\\r\\n        timer initial: { hours: 1, minutes:
        0, seconds: 0}\\r\\n    end\\r\\n  end\\r\\n  \\r\\n  def check_gel_clean(op_in_gel)\\r\\n
        \   show do\\r\\n        title \\\"Check on gels\\\"\\r\\n        check \\\"Remove
        boxes from the shaker in the still incubator (ID:#{op_in_gel.to_sentence}).\\\"\\r\\n
        \       check \\\"Make sure that the excess blue dye has been removed from
        the gel matrix background and the protein bands can be distinguished. (as
        an example shown in the picture below).\\\"\\r\\n        check \\\"Store the
        gel in the box saturated with water.\\\"\\r\\n        bullet \\\"If the background
        is still in dark blue, wash gels for another 1 hour or leave it on the shaker
        overnight. Grab a manager to check on the gels.\\\"\\r\\n        image \\\"Actions/ProteinPurification/gel_staining.jpg\\\"\\r\\n
        \   end\\r\\n  end\\r\\n  \\r\\nend\",\"parent_id\":1545,\"parent_class\":\"OperationType\",\"created_at\":\"2018-11-07T16:23:08.000-08:00\",\"updated_at\":\"2018-11-07T16:23:08.000-08:00\",\"user_id\":200}]"}
    headers:
      Cache-Control: ['max-age=0, private, must-revalidate']
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      Date: ['Thu, 08 Nov 2018 07:24:58 GMT']
      ETag: [W/"16ab50679ef6867ae8f9190d171c8c55"]
      Server: [nginx/1.10.3 (Ubuntu)]
      Set-Cookie: [XSRF-TOKEN=4SqIH2By5fmUjXOZWF7rWpzlCpBg90bbM3rlPH4jU4Z6kZXJjT3C0mTZiA4%2B0v2sdcmmE2w%2BPODfQVIuBW1gEA%3D%3D;
          path=/, _aquarium_NURSERY_production_session=RWc5YVBPdWlSZlhkTnVzaEwyYnZ6TXJSc1lzU1doZEowWnNMbzdjZll1MWhsWEFNbCt6MW1YOEx3NWpJQ3FTZmR1Kzd0QzArbFVXZUtTVXVwR3kwMGtVV203aHZCRU9NMlliYjN2K0wrcE1xUkF2U0ZLcGpQd2d3dlA4eGYrUC9LRFJJNnJuaklCZ21YRHFxN3Y1WUp2VDJDVFhpMjRpVVFOU2RQTG5VN3Z3Y3Yxc0daalQwL2RqaDI4K010STIwcGx6a05aRHVWSEhxOHgvRTVRQ1ZmWHVTZ2thZzg4d1E3bWlTdnpPOUQ4UWlyTDFFdjUwM0RWZFhpTEhPdW13ZTV6Q0pGelI3Y3ZvUkZBVlpDSHBOditmYU9YWlh0K3BIcnc0UEpjVC9GbWoveE9LNTlaUGNoRnRhSnp0UDJnOGpLUnRhZTdsNGhyUGpneDB1MEx4STRjZlRlakoySzUxZk5taERsYVZjV29JYVBuUFhxTTV1ZE9KbEE1UE9CNUJwcE1Jc096MXowS3RaZHFzUjNVYlZ0RFVtV01NQURzZm1LOHBSZXdsYmZCaz0tLWN5YUtxOGpMV0RlZ1g4NjM0eEFKZlE9PQ%3D%3D--448009b0e6b5b6a8d4571c5dbca805d162a29757;
          path=/; HttpOnly]
      Vary: [Origin]
      X-Content-Type-Options: [nosniff]
      X-Frame-Options: [SAMEORIGIN]
      X-Request-Id: [72808378-76ab-4ea4-bffe-23f8f6945d8a]
      X-Runtime: ['0.158121']
      X-XSS-Protection: [1; mode=block]
    status: {code: 200, message: OK}
version: 1
